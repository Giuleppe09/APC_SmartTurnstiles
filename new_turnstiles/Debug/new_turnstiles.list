
new_turnstiles.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800738c  0800738c  0000838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074cc  080074cc  000094c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074cc  080074cc  000084cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074d4  080074d4  000094c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074d4  080074d4  000084d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074d8  080074d8  000084d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004c0  20000000  080074dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000094c0  2**0
                  CONTENTS
 10 .bss          00000628  200004c0  200004c0  000094c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae8  20000ae8  000094c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000094c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bb2  00000000  00000000  000094f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eed  00000000  00000000  000210a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  00023f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001040  00000000  00000000  00025440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe0c  00000000  00000000  00026480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a94d  00000000  00000000  0004628c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000beab5  00000000  00000000  00060bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f68e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dd4  00000000  00000000  0011f6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001254a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004c0 	.word	0x200004c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007374 	.word	0x08007374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004c4 	.word	0x200004c4
 80001cc:	08007374 	.word	0x08007374

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <i2c_pcf8574_write>:
#define RS_DATA         0x01
#define LCD_BACKLIGHT   0x08 // Backlight bit on PCF8574

// Function to send a byte to the PCF8574
void i2c_pcf8574_write(uint8_t data)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, &data, 1, 100);
 800027a:	1dfa      	adds	r2, r7, #7
 800027c:	2364      	movs	r3, #100	@ 0x64
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2301      	movs	r3, #1
 8000282:	214e      	movs	r1, #78	@ 0x4e
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <i2c_pcf8574_write+0x24>)
 8000286:	f002 f8c1 	bl	800240c <HAL_I2C_Master_Transmit>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	200004dc 	.word	0x200004dc

08000298 <lcd_send_nibble>:

// Function to send a command or data nibble to the LCD
void lcd_send_nibble(uint8_t nibble, uint8_t rs)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	460a      	mov	r2, r1
 80002a2:	71fb      	strb	r3, [r7, #7]
 80002a4:	4613      	mov	r3, r2
 80002a6:	71bb      	strb	r3, [r7, #6]
    uint8_t data_t;

    // Construct the byte for PCF8574:
    // D7 D6 D5 D4 BL EN RW RS
    // nibble (high 4 bits) + Backlight + Enable + Read/Write (Write=0) + Register Select
    data_t = (nibble & 0xF0) | LCD_BACKLIGHT | rs;
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	f023 030f 	bic.w	r3, r3, #15
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	4313      	orrs	r3, r2
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	73fb      	strb	r3, [r7, #15]

    // Send high nibble with Enable high, then Enable low
    i2c_pcf8574_write(data_t | 0x04);  // EN = 1 (0x04)
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ffd3 	bl	8000270 <i2c_pcf8574_write>
    HAL_Delay(1);
 80002ca:	2001      	movs	r0, #1
 80002cc:	f001 fd20 	bl	8001d10 <HAL_Delay>
    i2c_pcf8574_write(data_t & ~0x04); // EN = 0 (~0x04)
 80002d0:	7bfb      	ldrb	r3, [r7, #15]
 80002d2:	f023 0304 	bic.w	r3, r3, #4
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffc9 	bl	8000270 <i2c_pcf8574_write>
    HAL_Delay(1);
 80002de:	2001      	movs	r0, #1
 80002e0:	f001 fd16 	bl	8001d10 <HAL_Delay>
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <lcd_send_cmd>:

// Function to send a command to the LCD
void lcd_send_cmd(char cmd)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
    // Send high nibble
    lcd_send_nibble(cmd & 0xF0, RS_COMMAND);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f023 030f 	bic.w	r3, r3, #15
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ffc9 	bl	8000298 <lcd_send_nibble>
    // Send low nibble
    lcd_send_nibble((cmd & 0x0F) << 4, RS_COMMAND);
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	011b      	lsls	r3, r3, #4
 800030a:	b2db      	uxtb	r3, r3
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ffc2 	bl	8000298 <lcd_send_nibble>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <lcd_send_data>:

// Function to send data to the LCD
void lcd_send_data(char data)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    // Send high nibble
    lcd_send_nibble(data & 0xF0, RS_DATA);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2101      	movs	r1, #1
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ffb1 	bl	8000298 <lcd_send_nibble>
    // Send low nibble
    lcd_send_nibble((data & 0x0F) << 4, RS_DATA);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	011b      	lsls	r3, r3, #4
 800033a:	b2db      	uxtb	r3, r3
 800033c:	2101      	movs	r1, #1
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ffaa 	bl	8000298 <lcd_send_nibble>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <lcd_init>:

// Function to initialize the LCD
void lcd_init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
    // 4-bit mode initialization sequence (datasheet dependent, common for HD44780)
    HAL_Delay(50);  // Power-on delay
 8000350:	2032      	movs	r0, #50	@ 0x32
 8000352:	f001 fcdd 	bl	8001d10 <HAL_Delay>
    lcd_send_nibble(0x30, RS_COMMAND); // Function Set: 8-bit interface
 8000356:	2100      	movs	r1, #0
 8000358:	2030      	movs	r0, #48	@ 0x30
 800035a:	f7ff ff9d 	bl	8000298 <lcd_send_nibble>
    HAL_Delay(5);   // Wait for more than 4.1ms
 800035e:	2005      	movs	r0, #5
 8000360:	f001 fcd6 	bl	8001d10 <HAL_Delay>
    lcd_send_nibble(0x30, RS_COMMAND); // Function Set: 8-bit interface
 8000364:	2100      	movs	r1, #0
 8000366:	2030      	movs	r0, #48	@ 0x30
 8000368:	f7ff ff96 	bl	8000298 <lcd_send_nibble>
    HAL_Delay(1);   // Wait for more than 100us
 800036c:	2001      	movs	r0, #1
 800036e:	f001 fccf 	bl	8001d10 <HAL_Delay>
    lcd_send_nibble(0x30, RS_COMMAND); // Function Set: 8-bit interface
 8000372:	2100      	movs	r1, #0
 8000374:	2030      	movs	r0, #48	@ 0x30
 8000376:	f7ff ff8f 	bl	8000298 <lcd_send_nibble>
    HAL_Delay(10);
 800037a:	200a      	movs	r0, #10
 800037c:	f001 fcc8 	bl	8001d10 <HAL_Delay>

    lcd_send_nibble(0x20, RS_COMMAND); // Function Set: 4-bit interface
 8000380:	2100      	movs	r1, #0
 8000382:	2020      	movs	r0, #32
 8000384:	f7ff ff88 	bl	8000298 <lcd_send_nibble>
    HAL_Delay(10);
 8000388:	200a      	movs	r0, #10
 800038a:	f001 fcc1 	bl	8001d10 <HAL_Delay>

    // Now in 4-bit mode
    lcd_send_cmd(0x28); // Function Set: 4-bit, 2 lines, 5x8 dots
 800038e:	2028      	movs	r0, #40	@ 0x28
 8000390:	f7ff ffac 	bl	80002ec <lcd_send_cmd>
    HAL_Delay(1);
 8000394:	2001      	movs	r0, #1
 8000396:	f001 fcbb 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x08); // Display OFF
 800039a:	2008      	movs	r0, #8
 800039c:	f7ff ffa6 	bl	80002ec <lcd_send_cmd>
    HAL_Delay(1);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f001 fcb5 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x01); // Clear Display
 80003a6:	2001      	movs	r0, #1
 80003a8:	f7ff ffa0 	bl	80002ec <lcd_send_cmd>
    HAL_Delay(2);   // Clear display takes longer
 80003ac:	2002      	movs	r0, #2
 80003ae:	f001 fcaf 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x06); // Entry Mode Set: Increment cursor, no display shift
 80003b2:	2006      	movs	r0, #6
 80003b4:	f7ff ff9a 	bl	80002ec <lcd_send_cmd>
    HAL_Delay(1);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f001 fca9 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x0C); // Display ON, Cursor OFF, Blink OFF
 80003be:	200c      	movs	r0, #12
 80003c0:	f7ff ff94 	bl	80002ec <lcd_send_cmd>
    HAL_Delay(1);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f001 fca3 	bl	8001d10 <HAL_Delay>
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}

080003ce <lcd_clear>:

// Function to clear the LCD
void lcd_clear(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01); // Clear display
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff ff8a 	bl	80002ec <lcd_send_cmd>
    HAL_Delay(2);       // Delay for clear operation
 80003d8:	2002      	movs	r0, #2
 80003da:	f001 fc99 	bl	8001d10 <HAL_Delay>
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <lcd_put_cur>:

// Function to set cursor position
void lcd_put_cur(int row, int col)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b084      	sub	sp, #16
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	6039      	str	r1, [r7, #0]
    uint8_t address;
    switch(row)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d003      	beq.n	80003fa <lcd_put_cur+0x18>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d005      	beq.n	8000404 <lcd_put_cur+0x22>
            break;
        case 1:
            address = 0xC0 + col; // 0xC0 is DDRAM address for line 2
            break;
        default:
            return; // Invalid row
 80003f8:	e00d      	b.n	8000416 <lcd_put_cur+0x34>
            address = 0x80 + col; // 0x80 is DDRAM address for line 1
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	3b80      	subs	r3, #128	@ 0x80
 8000400:	73fb      	strb	r3, [r7, #15]
            break;
 8000402:	e004      	b.n	800040e <lcd_put_cur+0x2c>
            address = 0xC0 + col; // 0xC0 is DDRAM address for line 2
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	3b40      	subs	r3, #64	@ 0x40
 800040a:	73fb      	strb	r3, [r7, #15]
            break;
 800040c:	bf00      	nop
    }
    lcd_send_cmd(address);
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff6b 	bl	80002ec <lcd_send_cmd>
}
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <lcd_send_string>:

// Function to send a string to the LCD
void lcd_send_string(char *str)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
    while (*str)
 8000424:	e006      	b.n	8000434 <lcd_send_string+0x18>
    {
        lcd_send_data(*str++);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ff74 	bl	800031c <lcd_send_data>
    while (*str)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1f4      	bne.n	8000426 <lcd_send_string+0xa>
    }
}
 800043c:	bf00      	nop
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <lcd_display_message_lines>:

// Funzione per visualizzare due linee di testo sull'LCD
void lcd_display_message_lines(const char* line1, const char* line2)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
    lcd_clear();
 8000450:	f7ff ffbd 	bl	80003ce <lcd_clear>

    if (line1 != NULL) {
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d006      	beq.n	8000468 <lcd_display_message_lines+0x22>
        lcd_put_cur(0, 0);
 800045a:	2100      	movs	r1, #0
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff ffc0 	bl	80003e2 <lcd_put_cur>
        // lcd_send_string invia l'intera stringa fino al null terminator
        // Per 16x2, assicurati che le stringhe passate non superino 16 caratteri per riga.
        lcd_send_string((char*)line1); // Cast a char* necessario per lcd_send_string
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ffda 	bl	800041c <lcd_send_string>
    }

    if (line2 != NULL) {
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d006      	beq.n	800047c <lcd_display_message_lines+0x36>
        lcd_put_cur(1, 0);
 800046e:	2100      	movs	r1, #0
 8000470:	2001      	movs	r0, #1
 8000472:	f7ff ffb6 	bl	80003e2 <lcd_put_cur>
        lcd_send_string((char*)line2); // Cast a char* necessario per lcd_send_string
 8000476:	6838      	ldr	r0, [r7, #0]
 8000478:	f7ff ffd0 	bl	800041c <lcd_send_string>
    }
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <i2c_scanner>:
/* USER CODE BEGIN 0 */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void i2c_scanner(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
    uint8_t i;
    HAL_StatusTypeDef ret;
    char buffer[20];
    uint8_t found_devices = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	75bb      	strb	r3, [r7, #22]
    // Optional: if you have a serial port/UART configured, you can print messages there
    // Otherwise, you can use a breakpoint in debugger to check the output
    // For now, let's assume you'll use a debugger or just count LEDs

    // Toggle a LED to indicate scanning started
    HAL_GPIO_TogglePin(GPIOE, LD3_Pin); // Use one of your LEDs on GPIOE
 800048e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000492:	4817      	ldr	r0, [pc, #92]	@ (80004f0 <i2c_scanner+0x6c>)
 8000494:	f001 ff04 	bl	80022a0 <HAL_GPIO_TogglePin>

    for(i = 1; i < 128; i++) // I2C addresses are 7-bit, from 0x01 to 0x77
 8000498:	2301      	movs	r3, #1
 800049a:	75fb      	strb	r3, [r7, #23]
 800049c:	e01b      	b.n	80004d6 <i2c_scanner+0x52>
    {
        // Try to transmit 1 byte to the current address
        // The last parameter (1) is the number of bytes to transmit, doesn't matter what
        // The timeout (5) is short to quickly check for ACK
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 2, 5); // Shift address for 8-bit format
 800049e:	7dfb      	ldrb	r3, [r7, #23]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	b299      	uxth	r1, r3
 80004a6:	2305      	movs	r3, #5
 80004a8:	2202      	movs	r2, #2
 80004aa:	4812      	ldr	r0, [pc, #72]	@ (80004f4 <i2c_scanner+0x70>)
 80004ac:	f002 f8c6 	bl	800263c <HAL_I2C_IsDeviceReady>
 80004b0:	4603      	mov	r3, r0
 80004b2:	757b      	strb	r3, [r7, #21]

        if (ret == HAL_OK) // Device responded (ACK received)
 80004b4:	7d7b      	ldrb	r3, [r7, #21]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d10a      	bne.n	80004d0 <i2c_scanner+0x4c>
        {
            // Device found!
            found_devices++;
 80004ba:	7dbb      	ldrb	r3, [r7, #22]
 80004bc:	3301      	adds	r3, #1
 80004be:	75bb      	strb	r3, [r7, #22]
            // If you have a UART setup, you could print the address:
            // sprintf(buffer, "Found I2C device at 0x%X\r\n", i);
            // HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);

            // You can also blink a specific LED or set a breakpoint here
            HAL_GPIO_TogglePin(GPIOE, LD4_Pin); // Blink another LED to confirm detection
 80004c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004c4:	480a      	ldr	r0, [pc, #40]	@ (80004f0 <i2c_scanner+0x6c>)
 80004c6:	f001 feeb 	bl	80022a0 <HAL_GPIO_TogglePin>
            HAL_Delay(100); // Small delay to make LED blink visible
 80004ca:	2064      	movs	r0, #100	@ 0x64
 80004cc:	f001 fc20 	bl	8001d10 <HAL_Delay>
    for(i = 1; i < 128; i++) // I2C addresses are 7-bit, from 0x01 to 0x77
 80004d0:	7dfb      	ldrb	r3, [r7, #23]
 80004d2:	3301      	adds	r3, #1
 80004d4:	75fb      	strb	r3, [r7, #23]
 80004d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	dadf      	bge.n	800049e <i2c_scanner+0x1a>
        }
    }

    // Toggle LED again to indicate scanning finished
    HAL_GPIO_TogglePin(GPIOE, LD3_Pin);
 80004de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004e2:	4803      	ldr	r0, [pc, #12]	@ (80004f0 <i2c_scanner+0x6c>)
 80004e4:	f001 fedc 	bl	80022a0 <HAL_GPIO_TogglePin>

    // If you're debugging, you can check 'found_devices' variable here.
    // If found_devices > 0, it means at least one device responded.
    // If found_devices == 1 and you only have the LCD, then 'i' in the loop
    // when ret == HAL_OK will be your LCD address.
}
 80004e8:	bf00      	nop
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	48001000 	.word	0x48001000
 80004f4:	200004dc 	.word	0x200004dc

080004f8 <delay>:

void delay (uint16_t us)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000502:	4b09      	ldr	r3, [pc, #36]	@ (8000528 <delay+0x30>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 800050a:	bf00      	nop
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <delay+0x30>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	429a      	cmp	r2, r3
 8000516:	d3f9      	bcc.n	800050c <delay+0x14>
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000594 	.word	0x20000594

0800052c <stepper_set_rpm>:

void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 8000534:	f643 1238 	movw	r2, #14648	@ 0x3938
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	fb92 f3f3 	sdiv	r3, r2, r3
 800053e:	b29b      	uxth	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff ffd9 	bl	80004f8 <delay>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <stepper_half_drive>:

void stepper_half_drive (int step)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	switch (step){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b07      	cmp	r3, #7
 800055c:	f200 80d4 	bhi.w	8000708 <stepper_half_drive+0x1b8>
 8000560:	a201      	add	r2, pc, #4	@ (adr r2, 8000568 <stepper_half_drive+0x18>)
 8000562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000566:	bf00      	nop
 8000568:	08000589 	.word	0x08000589
 800056c:	080005b9 	.word	0x080005b9
 8000570:	080005e9 	.word	0x080005e9
 8000574:	08000619 	.word	0x08000619
 8000578:	08000649 	.word	0x08000649
 800057c:	08000679 	.word	0x08000679
 8000580:	080006a9 	.word	0x080006a9
 8000584:	080006d9 	.word	0x080006d9
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 8000588:	2201      	movs	r2, #1
 800058a:	2102      	movs	r1, #2
 800058c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000590:	f001 fe6e 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 8000594:	2200      	movs	r2, #0
 8000596:	2104      	movs	r1, #4
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f001 fe68 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80005a0:	2200      	movs	r2, #0
 80005a2:	2108      	movs	r1, #8
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a8:	f001 fe62 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 80005ac:	2200      	movs	r2, #0
 80005ae:	2110      	movs	r1, #16
 80005b0:	4857      	ldr	r0, [pc, #348]	@ (8000710 <stepper_half_drive+0x1c0>)
 80005b2:	f001 fe5d 	bl	8002270 <HAL_GPIO_WritePin>
			break;
 80005b6:	e0a7      	b.n	8000708 <stepper_half_drive+0x1b8>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 80005b8:	2201      	movs	r2, #1
 80005ba:	2102      	movs	r1, #2
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f001 fe56 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 80005c4:	2201      	movs	r2, #1
 80005c6:	2104      	movs	r1, #4
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005cc:	f001 fe50 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80005d0:	2200      	movs	r2, #0
 80005d2:	2108      	movs	r1, #8
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d8:	f001 fe4a 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 80005dc:	2200      	movs	r2, #0
 80005de:	2110      	movs	r1, #16
 80005e0:	484b      	ldr	r0, [pc, #300]	@ (8000710 <stepper_half_drive+0x1c0>)
 80005e2:	f001 fe45 	bl	8002270 <HAL_GPIO_WritePin>
			break;
 80005e6:	e08f      	b.n	8000708 <stepper_half_drive+0x1b8>
		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 80005e8:	2200      	movs	r2, #0
 80005ea:	2102      	movs	r1, #2
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f0:	f001 fe3e 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 80005f4:	2201      	movs	r2, #1
 80005f6:	2104      	movs	r1, #4
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fc:	f001 fe38 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 8000600:	2200      	movs	r2, #0
 8000602:	2108      	movs	r1, #8
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f001 fe32 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 800060c:	2200      	movs	r2, #0
 800060e:	2110      	movs	r1, #16
 8000610:	483f      	ldr	r0, [pc, #252]	@ (8000710 <stepper_half_drive+0x1c0>)
 8000612:	f001 fe2d 	bl	8002270 <HAL_GPIO_WritePin>
			break;
 8000616:	e077      	b.n	8000708 <stepper_half_drive+0x1b8>
		case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8000618:	2200      	movs	r2, #0
 800061a:	2102      	movs	r1, #2
 800061c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000620:	f001 fe26 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 8000624:	2201      	movs	r2, #1
 8000626:	2104      	movs	r1, #4
 8000628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062c:	f001 fe20 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 8000630:	2201      	movs	r2, #1
 8000632:	2108      	movs	r1, #8
 8000634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000638:	f001 fe1a 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 800063c:	2200      	movs	r2, #0
 800063e:	2110      	movs	r1, #16
 8000640:	4833      	ldr	r0, [pc, #204]	@ (8000710 <stepper_half_drive+0x1c0>)
 8000642:	f001 fe15 	bl	8002270 <HAL_GPIO_WritePin>
			break;
 8000646:	e05f      	b.n	8000708 <stepper_half_drive+0x1b8>
		case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8000648:	2200      	movs	r2, #0
 800064a:	2102      	movs	r1, #2
 800064c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000650:	f001 fe0e 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 8000654:	2200      	movs	r2, #0
 8000656:	2104      	movs	r1, #4
 8000658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065c:	f001 fe08 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f001 fe02 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 800066c:	2200      	movs	r2, #0
 800066e:	2110      	movs	r1, #16
 8000670:	4827      	ldr	r0, [pc, #156]	@ (8000710 <stepper_half_drive+0x1c0>)
 8000672:	f001 fdfd 	bl	8002270 <HAL_GPIO_WritePin>
			break;
 8000676:	e047      	b.n	8000708 <stepper_half_drive+0x1b8>
		case 5:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8000678:	2200      	movs	r2, #0
 800067a:	2102      	movs	r1, #2
 800067c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000680:	f001 fdf6 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 8000684:	2200      	movs	r2, #0
 8000686:	2104      	movs	r1, #4
 8000688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068c:	f001 fdf0 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 8000690:	2201      	movs	r2, #1
 8000692:	2108      	movs	r1, #8
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f001 fdea 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 800069c:	2201      	movs	r2, #1
 800069e:	2110      	movs	r1, #16
 80006a0:	481b      	ldr	r0, [pc, #108]	@ (8000710 <stepper_half_drive+0x1c0>)
 80006a2:	f001 fde5 	bl	8002270 <HAL_GPIO_WritePin>
			break;
 80006a6:	e02f      	b.n	8000708 <stepper_half_drive+0x1b8>
		case 6:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f001 fdde 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006bc:	f001 fdd8 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80006c0:	2200      	movs	r2, #0
 80006c2:	2108      	movs	r1, #8
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c8:	f001 fdd2 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 80006cc:	2201      	movs	r2, #1
 80006ce:	2110      	movs	r1, #16
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <stepper_half_drive+0x1c0>)
 80006d2:	f001 fdcd 	bl	8002270 <HAL_GPIO_WritePin>
			break;
 80006d6:	e017      	b.n	8000708 <stepper_half_drive+0x1b8>
		case 7:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 80006d8:	2201      	movs	r2, #1
 80006da:	2102      	movs	r1, #2
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e0:	f001 fdc6 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 80006e4:	2200      	movs	r2, #0
 80006e6:	2104      	movs	r1, #4
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ec:	f001 fdc0 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80006f0:	2200      	movs	r2, #0
 80006f2:	2108      	movs	r1, #8
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f8:	f001 fdba 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 80006fc:	2201      	movs	r2, #1
 80006fe:	2110      	movs	r1, #16
 8000700:	4803      	ldr	r0, [pc, #12]	@ (8000710 <stepper_half_drive+0x1c0>)
 8000702:	f001 fdb5 	bl	8002270 <HAL_GPIO_WritePin>
			break;
 8000706:	bf00      	nop
	}
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	48001400 	.word	0x48001400

08000714 <stepper_step_angle>:

void stepper_step_angle (float angle, int direction, int rpm) //direction-> 0 for CK, 1 for CCK
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	ed87 0a03 	vstr	s0, [r7, #12]
 800071e:	60b8      	str	r0, [r7, #8]
 8000720:	6079      	str	r1, [r7, #4]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <stepper_step_angle+0x90>)
 8000724:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle/anglepersequence);
 8000726:	edd7 6a03 	vldr	s13, [r7, #12]
 800072a:	ed97 7a06 	vldr	s14, [r7, #24]
 800072e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000736:	ee17 3a90 	vmov	r3, s15
 800073a:	617b      	str	r3, [r7, #20]
	for (int seq=0; seq<numberofsequences; seq++)
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000740:	e027      	b.n	8000792 <stepper_step_angle+0x7e>
	{
		if (direction == 0)  // for clockwise
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d10f      	bne.n	8000768 <stepper_step_angle+0x54>
		{
			for (int step=7; step>=0; step--)
 8000748:	2307      	movs	r3, #7
 800074a:	623b      	str	r3, [r7, #32]
 800074c:	e008      	b.n	8000760 <stepper_step_angle+0x4c>
				{
				stepper_half_drive(step);
 800074e:	6a38      	ldr	r0, [r7, #32]
 8000750:	f7ff fefe 	bl	8000550 <stepper_half_drive>
				stepper_set_rpm(rpm);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff fee9 	bl	800052c <stepper_set_rpm>
			for (int step=7; step>=0; step--)
 800075a:	6a3b      	ldr	r3, [r7, #32]
 800075c:	3b01      	subs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	2b00      	cmp	r3, #0
 8000764:	daf3      	bge.n	800074e <stepper_step_angle+0x3a>
 8000766:	e011      	b.n	800078c <stepper_step_angle+0x78>
				}
		}
		else if (direction == 1)  // for anti-clockwise
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d10e      	bne.n	800078c <stepper_step_angle+0x78>
		{
			for (int step=0; step<=7; step++)
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	e008      	b.n	8000786 <stepper_step_angle+0x72>
				{
				stepper_half_drive(step);
 8000774:	69f8      	ldr	r0, [r7, #28]
 8000776:	f7ff feeb 	bl	8000550 <stepper_half_drive>
				stepper_set_rpm(rpm);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff fed6 	bl	800052c <stepper_set_rpm>
			for (int step=0; step<=7; step++)
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	3301      	adds	r3, #1
 8000784:	61fb      	str	r3, [r7, #28]
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	2b07      	cmp	r3, #7
 800078a:	ddf3      	ble.n	8000774 <stepper_step_angle+0x60>
	for (int seq=0; seq<numberofsequences; seq++)
 800078c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078e:	3301      	adds	r3, #1
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
 8000792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	429a      	cmp	r2, r3
 8000798:	dbd3      	blt.n	8000742 <stepper_step_angle+0x2e>
				}
		}
	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	@ 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	3f340000 	.word	0x3f340000

080007a8 <Stepper_rotate>:

float currentAngle = 0; // Questa va dichiarata come variabile globale, non locale a main.

void Stepper_rotate (float targetAngle, int rpm) // Accetta float per l'angolo target
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80007b2:	6038      	str	r0, [r7, #0]
    float changeInAngle = targetAngle - currentAngle; // Calcola la differenza tra l'angolo target e l'attuale
 80007b4:	4b19      	ldr	r3, [pc, #100]	@ (800081c <Stepper_rotate+0x74>)
 80007b6:	edd3 7a00 	vldr	s15, [r3]
 80007ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80007be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007c2:	edc7 7a03 	vstr	s15, [r7, #12]

    if (changeInAngle > 0.001f)  // Per rotazione in senso orario (valore > 0 con una piccola tolleranza)
 80007c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80007ca:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000820 <Stepper_rotate+0x78>
 80007ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d6:	dd06      	ble.n	80007e6 <Stepper_rotate+0x3e>
    {
        stepper_step_angle(changeInAngle, 0, rpm); // direction 0 per orario
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	2000      	movs	r0, #0
 80007dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80007e0:	f7ff ff98 	bl	8000714 <stepper_step_angle>
 80007e4:	e012      	b.n	800080c <Stepper_rotate+0x64>
    }
    else if (changeInAngle < -0.001f) // Per rotazione in senso antiorario (valore < 0 con una piccola tolleranza)
 80007e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80007ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000824 <Stepper_rotate+0x7c>
 80007ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f6:	d509      	bpl.n	800080c <Stepper_rotate+0x64>
    {
        stepper_step_angle(-changeInAngle, 1, rpm); // direction 1 per antiorario, passa il valore assoluto dell'angolo
 80007f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80007fc:	eef1 7a67 	vneg.f32	s15, s15
 8000800:	6839      	ldr	r1, [r7, #0]
 8000802:	2001      	movs	r0, #1
 8000804:	eeb0 0a67 	vmov.f32	s0, s15
 8000808:	f7ff ff84 	bl	8000714 <stepper_step_angle>
    }
    currentAngle = targetAngle; // Aggiorna l'angolo corrente
 800080c:	4a03      	ldr	r2, [pc, #12]	@ (800081c <Stepper_rotate+0x74>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000994 	.word	0x20000994
 8000820:	3a83126f 	.word	0x3a83126f
 8000824:	ba83126f 	.word	0xba83126f

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b0b0      	sub	sp, #192	@ 0xc0
 800082c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f001 fa09 	bl	8001c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f9d7 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 fbb1 	bl	8000f9c <MX_GPIO_Init>
  MX_I2C1_Init();
 800083a:	f000 fa37 	bl	8000cac <MX_I2C1_Init>
  MX_SPI1_Init();
 800083e:	f000 fa75 	bl	8000d2c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000842:	f000 fb89 	bl	8000f58 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000846:	f000 faaf 	bl	8000da8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800084a:	f000 fb01 	bl	8000e50 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800084e:	f000 fb53 	bl	8000ef8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanner();
 8000852:	f7ff fe17 	bl	8000484 <i2c_scanner>

  HAL_TIM_Base_Start(&htim1); // Questo è il timer che usi per i tuoi ritardi, lascialo
 8000856:	48cc      	ldr	r0, [pc, #816]	@ (8000b88 <main+0x360>)
 8000858:	f004 fbac 	bl	8004fb4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Avvia l'Input Capture con interruzioni
 800085c:	2100      	movs	r1, #0
 800085e:	48cb      	ldr	r0, [pc, #812]	@ (8000b8c <main+0x364>)
 8000860:	f004 fc62 	bl	8005128 <HAL_TIM_IC_Start_IT>


  uchar status_request=0;
 8000864:	2300      	movs	r3, #0
 8000866:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uchar TagType[2] = {0,0};
 800086a:	2300      	movs	r3, #0
 800086c:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
  uchar serNum[5]= {0,0,0,0,0};	//Per memorizzare il seriale del tag
 8000870:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	711a      	strb	r2, [r3, #4]

  TagData* tag; // Puntatore a TagData, non allocazione qui
  MFRC522_Init(); // Inizializza il sensore RC522
 800087a:	f000 fd97 	bl	80013ac <MFRC522_Init>

  char displayBuffer[64];
  lcd_init(); // Initialize the LCD
 800087e:	f7ff fd65 	bl	800034c <lcd_init>
  lcd_display_message_lines("Inserire card"," o biglietto ");
 8000882:	49c3      	ldr	r1, [pc, #780]	@ (8000b90 <main+0x368>)
 8000884:	48c3      	ldr	r0, [pc, #780]	@ (8000b94 <main+0x36c>)
 8000886:	f7ff fdde 	bl	8000446 <lcd_display_message_lines>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Controlla se 32 bit sono stati ricevuti (il flag bitCount lo indica)
	  if (32 <= bitCount)
 800088a:	4bc3      	ldr	r3, [pc, #780]	@ (8000b98 <main+0x370>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b1f      	cmp	r3, #31
 8000892:	d978      	bls.n	8000986 <main+0x15e>
	  {
		  // Qui puoi elaborare il valore di 'receivedData'
		  // Esempio: stampalo sul display LCD o su seriale, o confrontalo con codici di pulsanti noti

		  lcd_clear();
 8000894:	f7ff fd9b 	bl	80003ce <lcd_clear>
		  lcd_put_cur(0,0);
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fda1 	bl	80003e2 <lcd_put_cur>
		  char ir_buffer[20];
		  sprintf(ir_buffer, "IR Data: 0x%lX", receivedData); // Stampa il dato in esadecimale
 80008a0:	4bbe      	ldr	r3, [pc, #760]	@ (8000b9c <main+0x374>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008a8:	49bd      	ldr	r1, [pc, #756]	@ (8000ba0 <main+0x378>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f006 f94c 	bl	8006b48 <siprintf>
		  lcd_send_string(ir_buffer);
 80008b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fdb1 	bl	800041c <lcd_send_string>
		  HAL_Delay(2000); // Visualizza per 2 secondi
 80008ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008be:	f001 fa27 	bl	8001d10 <HAL_Delay>


			// valore effettivo dell' " 1"
			if (receivedData == receivedData) // Esempio: se il codice IR ricevuto è quello per l'apertura
 80008c2:	4bb6      	ldr	r3, [pc, #728]	@ (8000b9c <main+0x374>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4bb5      	ldr	r3, [pc, #724]	@ (8000b9c <main+0x374>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d144      	bne.n	8000958 <main+0x130>
			{
				lcd_clear();
 80008ce:	f7ff fd7e 	bl	80003ce <lcd_clear>
				lcd_display_message_lines("IR: Accesso", "Consentito!");
 80008d2:	49b4      	ldr	r1, [pc, #720]	@ (8000ba4 <main+0x37c>)
 80008d4:	48b4      	ldr	r0, [pc, #720]	@ (8000ba8 <main+0x380>)
 80008d6:	f7ff fdb6 	bl	8000446 <lcd_display_message_lines>
				HAL_Delay(1000); // Breve ritardo per visualizzare il messaggio
 80008da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008de:	f001 fa17 	bl	8001d10 <HAL_Delay>

				// APERTURA TORNELLO: Rotazione completa del tornello
				for (int i = 0; i <= 360; i++) // Fa un giro completo in senso orario
 80008e2:	2300      	movs	r3, #0
 80008e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80008e8:	e00f      	b.n	800090a <main+0xe2>
				{
					Stepper_rotate((float)i, 10); // Passa l'angolo come float
 80008ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80008ee:	ee07 3a90 	vmov	s15, r3
 80008f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f6:	200a      	movs	r0, #10
 80008f8:	eeb0 0a67 	vmov.f32	s0, s15
 80008fc:	f7ff ff54 	bl	80007a8 <Stepper_rotate>
				for (int i = 0; i <= 360; i++) // Fa un giro completo in senso orario
 8000900:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000904:	3301      	adds	r3, #1
 8000906:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800090a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800090e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000912:	ddea      	ble.n	80008ea <main+0xc2>
				}
				// currentAngle è ora 360

				// CHIUSURA TORNELLO: Torna alla posizione iniziale
				for (int i = 360; i >= 0; i--) // Torna indietro in senso antiorario
 8000914:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800091c:	e00f      	b.n	800093e <main+0x116>
				{
					Stepper_rotate((float)i, 10); // Passa l'angolo come float
 800091e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000922:	ee07 3a90 	vmov	s15, r3
 8000926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092a:	200a      	movs	r0, #10
 800092c:	eeb0 0a67 	vmov.f32	s0, s15
 8000930:	f7ff ff3a 	bl	80007a8 <Stepper_rotate>
				for (int i = 360; i >= 0; i--) // Torna indietro in senso antiorario
 8000934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000938:	3b01      	subs	r3, #1
 800093a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800093e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000942:	2b00      	cmp	r3, #0
 8000944:	daeb      	bge.n	800091e <main+0xf6>
				}
				lcd_display_message_lines("Tornello", "chiuso");
 8000946:	4999      	ldr	r1, [pc, #612]	@ (8000bac <main+0x384>)
 8000948:	4899      	ldr	r0, [pc, #612]	@ (8000bb0 <main+0x388>)
 800094a:	f7ff fd7c 	bl	8000446 <lcd_display_message_lines>
				HAL_Delay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000952:	f001 f9dd 	bl	8001d10 <HAL_Delay>
 8000956:	e009      	b.n	800096c <main+0x144>
			}
			else
			{
				lcd_clear();
 8000958:	f7ff fd39 	bl	80003ce <lcd_clear>
				lcd_display_message_lines("IR: Codice", "Sconosciuto!");
 800095c:	4995      	ldr	r1, [pc, #596]	@ (8000bb4 <main+0x38c>)
 800095e:	4896      	ldr	r0, [pc, #600]	@ (8000bb8 <main+0x390>)
 8000960:	f7ff fd71 	bl	8000446 <lcd_display_message_lines>
				HAL_Delay(2000); // Mostra messaggio di negato
 8000964:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000968:	f001 f9d2 	bl	8001d10 <HAL_Delay>
			}

		  // Dopo aver elaborato i dati, resetta le variabili per ricevere il prossimo segnale
		  bitCount = 0;
 800096c:	4b8a      	ldr	r3, [pc, #552]	@ (8000b98 <main+0x370>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
		  receivedData = 0;
 8000972:	4b8a      	ldr	r3, [pc, #552]	@ (8000b9c <main+0x374>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
		  isStartCaptured = 0;
 8000978:	4b90      	ldr	r3, [pc, #576]	@ (8000bbc <main+0x394>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Riavvia l'Input Capture per la prossima ricezione
 800097e:	2100      	movs	r1, #0
 8000980:	4882      	ldr	r0, [pc, #520]	@ (8000b8c <main+0x364>)
 8000982:	f004 fbd1 	bl	8005128 <HAL_TIM_IC_Start_IT>
	  }

	 if (isSensorDetected()){
 8000986:	f000 fe6a 	bl	800165e <isSensorDetected>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	f43f af7c 	beq.w	800088a <main+0x62>
			// Il sensore RC522 è stato rilevato e sta comunicando correttamente
			HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000998:	4889      	ldr	r0, [pc, #548]	@ (8000bc0 <main+0x398>)
 800099a:	f001 fc69 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_Delay(10); // Piccolo ritardo per stabilità
 800099e:	200a      	movs	r0, #10
 80009a0:	f001 f9b6 	bl	8001d10 <HAL_Delay>
			status_request = MFRC522_Request(PICC_REQIDL, TagType); // Cerca un tag in modalità idle
 80009a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a8:	4619      	mov	r1, r3
 80009aa:	2026      	movs	r0, #38	@ 0x26
 80009ac:	f000 fdf5 	bl	800159a <MFRC522_Request>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

			if (status_request == MI_OK)
 80009b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f040 80d2 	bne.w	8000b64 <main+0x33c>
			{
			  // Tag RFID rilevato!
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Accendi il LED che indica tag presente
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c6:	487e      	ldr	r0, [pc, #504]	@ (8000bc0 <main+0x398>)
 80009c8:	f001 fc52 	bl	8002270 <HAL_GPIO_WritePin>
			  lcd_display_message_lines("Tag RFID","Rilevato!");
 80009cc:	497d      	ldr	r1, [pc, #500]	@ (8000bc4 <main+0x39c>)
 80009ce:	487e      	ldr	r0, [pc, #504]	@ (8000bc8 <main+0x3a0>)
 80009d0:	f7ff fd39 	bl	8000446 <lcd_display_message_lines>

			  status_request = MFRC522_Anticoll(serNum);
 80009d4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fe03 	bl	80015e4 <MFRC522_Anticoll>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			  if (status_request == MI_OK)
 80009e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	f040 80b4 	bne.w	8000b56 <main+0x32e>
			  {
				 if(isTagRegistered(&serNum)){
 80009ee:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 f8eb 	bl	8001bce <isTagRegistered>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 808f 	beq.w	8000b1e <main+0x2f6>
					 tag = findTag(&serNum);
 8000a00:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 f861 	bl	8001acc <findTag>
 8000a0a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
					 // Tag Riconosciuto.
					 HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET); // Accendi il LED VERDE 7
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a14:	486a      	ldr	r0, [pc, #424]	@ (8000bc0 <main+0x398>)
 8000a16:	f001 fc2b 	bl	8002270 <HAL_GPIO_WritePin>

					 char tagName[32];
					 char tagSurname[32];
					 bool tagFoundAndCopied = getNamesBySerial(serNum, tagName, sizeof(tagName), tagSurname, sizeof(tagSurname));
 8000a1a:	f107 0320 	add.w	r3, r7, #32
 8000a1e:	4639      	mov	r1, r7
 8000a20:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8000a24:	2220      	movs	r2, #32
 8000a26:	9200      	str	r2, [sp, #0]
 8000a28:	2220      	movs	r2, #32
 8000a2a:	f001 f881 	bl	8001b30 <getNamesBySerial>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

					 if (tagFoundAndCopied)
 8000a34:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d062      	beq.n	8000b02 <main+0x2da>
					     {
					         // Tag Riconosciuto.
					         HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET); // Accendi il LED VERDE 7
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a42:	485f      	ldr	r0, [pc, #380]	@ (8000bc0 <main+0x398>)
 8000a44:	f001 fc14 	bl	8002270 <HAL_GPIO_WritePin>

					         lcd_clear();
 8000a48:	f7ff fcc1 	bl	80003ce <lcd_clear>
					         lcd_put_cur(0, 0);
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff fcc7 	bl	80003e2 <lcd_put_cur>
					         sprintf(displayBuffer, "ciao %s", tagName);
 8000a54:	463a      	mov	r2, r7
 8000a56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a5a:	495c      	ldr	r1, [pc, #368]	@ (8000bcc <main+0x3a4>)
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f006 f873 	bl	8006b48 <siprintf>
					         lcd_send_string(displayBuffer);    // Stampa il nome
 8000a62:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fcd8 	bl	800041c <lcd_send_string>
					         lcd_put_cur(1, 0);
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff fcb7 	bl	80003e2 <lcd_put_cur>
					         lcd_send_string(tagSurname); // Stampa il cognome
 8000a74:	f107 0320 	add.w	r3, r7, #32
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fccf 	bl	800041c <lcd_send_string>

					         //APERTURA TORNELLO: Rotazione completa del tornello
							 for (int i=0; i<=360; i++) // Fa un giro completo in senso orario
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000a84:	e00f      	b.n	8000aa6 <main+0x27e>
							 {
							   Stepper_rotate((float)i, 10); // Passa l'angolo come float
 8000a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000a8a:	ee07 3a90 	vmov	s15, r3
 8000a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a92:	200a      	movs	r0, #10
 8000a94:	eeb0 0a67 	vmov.f32	s0, s15
 8000a98:	f7ff fe86 	bl	80007a8 <Stepper_rotate>
							 for (int i=0; i<=360; i++) // Fa un giro completo in senso orario
 8000a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000aaa:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000aae:	ddea      	ble.n	8000a86 <main+0x25e>
							   // la velocità è controllata dall'RPM
							 }
							  // currentAngle è ora 360

							 // CHIUSURA TORNELLO: Torna alla posizione iniziale
							 for (int i=360; i>=0; i--) // Torna indietro in senso antiorario
 8000ab0:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ab8:	e00f      	b.n	8000ada <main+0x2b2>
							 {
							   Stepper_rotate((float)i, 10); // Passa l'angolo come float
 8000aba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000abe:	ee07 3a90 	vmov	s15, r3
 8000ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8000acc:	f7ff fe6c 	bl	80007a8 <Stepper_rotate>
							 for (int i=360; i>=0; i--) // Torna indietro in senso antiorario
 8000ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ada:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	daeb      	bge.n	8000aba <main+0x292>
							   // HAL_Delay(X) qui rallenta il movimento
							 }

					         HAL_Delay(2000); // Visualizza nome e cognome
 8000ae2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ae6:	f001 f913 	bl	8001d10 <HAL_Delay>

					         // Poi il resto della tua logica per "Accesso Consentito"
					         lcd_display_message_lines("Accesso","Consentito!");
 8000aea:	492e      	ldr	r1, [pc, #184]	@ (8000ba4 <main+0x37c>)
 8000aec:	4838      	ldr	r0, [pc, #224]	@ (8000bd0 <main+0x3a8>)
 8000aee:	f7ff fcaa 	bl	8000446 <lcd_display_message_lines>



					         lcd_display_message_lines("Arrivederci ","e Buon viaggio");
 8000af2:	4938      	ldr	r1, [pc, #224]	@ (8000bd4 <main+0x3ac>)
 8000af4:	4838      	ldr	r0, [pc, #224]	@ (8000bd8 <main+0x3b0>)
 8000af6:	f7ff fca6 	bl	8000446 <lcd_display_message_lines>

							 HAL_Delay(2000); // Tempo per visualizzare il messaggio "Arrivederci"
 8000afa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000afe:	f001 f907 	bl	8001d10 <HAL_Delay>
					     }
					 // Torna allo stato iniziale dopo il ciclo completo
					 lcd_display_message_lines("Inserire card"," o biglietto ");
 8000b02:	4923      	ldr	r1, [pc, #140]	@ (8000b90 <main+0x368>)
 8000b04:	4823      	ldr	r0, [pc, #140]	@ (8000b94 <main+0x36c>)
 8000b06:	f7ff fc9e 	bl	8000446 <lcd_display_message_lines>

					 HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET); // Spegni LED verde
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b10:	482b      	ldr	r0, [pc, #172]	@ (8000bc0 <main+0x398>)
 8000b12:	f001 fbad 	bl	8002270 <HAL_GPIO_WritePin>
					 HAL_Delay(50); // Breve delay per stabilità
 8000b16:	2032      	movs	r0, #50	@ 0x32
 8000b18:	f001 f8fa 	bl	8001d10 <HAL_Delay>
 8000b1c:	e6b5      	b.n	800088a <main+0x62>
				 }else{
					 // Tag NON Riconosciuto.
					 HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_SET); // Accendi il LED ROSSO 6
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b24:	4826      	ldr	r0, [pc, #152]	@ (8000bc0 <main+0x398>)
 8000b26:	f001 fba3 	bl	8002270 <HAL_GPIO_WritePin>

					 lcd_display_message_lines("Accesso ","Negato!");
 8000b2a:	492c      	ldr	r1, [pc, #176]	@ (8000bdc <main+0x3b4>)
 8000b2c:	482c      	ldr	r0, [pc, #176]	@ (8000be0 <main+0x3b8>)
 8000b2e:	f7ff fc8a 	bl	8000446 <lcd_display_message_lines>

					 HAL_Delay(2000); // Mostra messaggio di negato
 8000b32:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b36:	f001 f8eb 	bl	8001d10 <HAL_Delay>
					 HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_RESET); // Spegni LED rosso
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b40:	481f      	ldr	r0, [pc, #124]	@ (8000bc0 <main+0x398>)
 8000b42:	f001 fb95 	bl	8002270 <HAL_GPIO_WritePin>
					 HAL_Delay(50); // Breve delay per stabilità
 8000b46:	2032      	movs	r0, #50	@ 0x32
 8000b48:	f001 f8e2 	bl	8001d10 <HAL_Delay>

					 lcd_display_message_lines("Inserire card"," o biglietto ");
 8000b4c:	4910      	ldr	r1, [pc, #64]	@ (8000b90 <main+0x368>)
 8000b4e:	4811      	ldr	r0, [pc, #68]	@ (8000b94 <main+0x36c>)
 8000b50:	f7ff fc79 	bl	8000446 <lcd_display_message_lines>
 8000b54:	e699      	b.n	800088a <main+0x62>
				 }
			}
			else
			{
			  // Nessun tag rilevato o errore nella richiesta del tag
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // Spegni il LED che indica tag presente
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b5c:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <main+0x398>)
 8000b5e:	f001 fb87 	bl	8002270 <HAL_GPIO_WritePin>
 8000b62:	e692      	b.n	800088a <main+0x62>
			}
		}
		else
		{
			// Il sensore RC522 NON è stato rilevato o non sta comunicando
			HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_RESET); // Spegni il LED "sensore ok"
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b6a:	4815      	ldr	r0, [pc, #84]	@ (8000bc0 <main+0x398>)
 8000b6c:	f001 fb80 	bl	8002270 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // Assicurati che anche il LED del tag sia spento
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b76:	4812      	ldr	r0, [pc, #72]	@ (8000bc0 <main+0x398>)
 8000b78:	f001 fb7a 	bl	8002270 <HAL_GPIO_WritePin>

			HAL_Delay(500); // Breve ritardo prima di riprovare a rilevare il sensore
 8000b7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b80:	f001 f8c6 	bl	8001d10 <HAL_Delay>
	  if (32 <= bitCount)
 8000b84:	e681      	b.n	800088a <main+0x62>
 8000b86:	bf00      	nop
 8000b88:	20000594 	.word	0x20000594
 8000b8c:	200005e0 	.word	0x200005e0
 8000b90:	0800738c 	.word	0x0800738c
 8000b94:	0800739c 	.word	0x0800739c
 8000b98:	20000988 	.word	0x20000988
 8000b9c:	2000098c 	.word	0x2000098c
 8000ba0:	080073ac 	.word	0x080073ac
 8000ba4:	080073bc 	.word	0x080073bc
 8000ba8:	080073c8 	.word	0x080073c8
 8000bac:	080073d4 	.word	0x080073d4
 8000bb0:	080073dc 	.word	0x080073dc
 8000bb4:	080073e8 	.word	0x080073e8
 8000bb8:	080073f8 	.word	0x080073f8
 8000bbc:	20000989 	.word	0x20000989
 8000bc0:	48001000 	.word	0x48001000
 8000bc4:	08007404 	.word	0x08007404
 8000bc8:	08007410 	.word	0x08007410
 8000bcc:	0800741c 	.word	0x0800741c
 8000bd0:	08007424 	.word	0x08007424
 8000bd4:	0800742c 	.word	0x0800742c
 8000bd8:	0800743c 	.word	0x0800743c
 8000bdc:	0800744c 	.word	0x0800744c
 8000be0:	08007454 	.word	0x08007454

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b09e      	sub	sp, #120	@ 0x78
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000bee:	2228      	movs	r2, #40	@ 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f005 ffda 	bl	8006bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	223c      	movs	r2, #60	@ 0x3c
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 ffcc 	bl	8006bac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c14:	2303      	movs	r3, #3
 8000c16:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c18:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c1c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c22:	2301      	movs	r3, #1
 8000c24:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c26:	2310      	movs	r3, #16
 8000c28:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c32:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c34:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c38:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f960 	bl	8002f04 <HAL_RCC_OscConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c4a:	f000 faf7 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4e:	230f      	movs	r3, #15
 8000c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c52:	2302      	movs	r3, #2
 8000c54:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 f958 	bl	8003f20 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c76:	f000 fae1 	bl	800123c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <SystemClock_Config+0xc4>)
 8000c7c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fb57 	bl	8004344 <HAL_RCCEx_PeriphCLKConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000c9c:	f000 face 	bl	800123c <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3778      	adds	r7, #120	@ 0x78
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	00021021 	.word	0x00021021

08000cac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <MX_I2C1_Init+0x78>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <MX_I2C1_Init+0x7c>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce6:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000ce8:	f001 faf4 	bl	80022d4 <HAL_I2C_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cf2:	f000 faa3 	bl	800123c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cfa:	f001 ffa5 	bl	8002c48 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d04:	f000 fa9a 	bl	800123c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000d0c:	f001 ffe7 	bl	8002cde <HAL_I2CEx_ConfigDigitalFilter>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 fa91 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200004dc 	.word	0x200004dc
 8000d24:	40005400 	.word	0x40005400
 8000d28:	00201d2b 	.word	0x00201d2b

08000d2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d32:	4a1c      	ldr	r2, [pc, #112]	@ (8000da4 <MX_SPI1_Init+0x78>)
 8000d34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d46:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d52:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d62:	2220      	movs	r2, #32
 8000d64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d86:	2208      	movs	r2, #8
 8000d88:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_SPI1_Init+0x74>)
 8000d8c:	f003 fc88 	bl	80046a0 <HAL_SPI_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f000 fa51 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000530 	.word	0x20000530
 8000da4:	40013000 	.word	0x40013000

08000da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <MX_TIM1_Init+0xa0>)
 8000dc8:	4a20      	ldr	r2, [pc, #128]	@ (8000e4c <MX_TIM1_Init+0xa4>)
 8000dca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <MX_TIM1_Init+0xa0>)
 8000dce:	2247      	movs	r2, #71	@ 0x47
 8000dd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <MX_TIM1_Init+0xa0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <MX_TIM1_Init+0xa0>)
 8000dda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_TIM1_Init+0xa0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_TIM1_Init+0xa0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_TIM1_Init+0xa0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df2:	4815      	ldr	r0, [pc, #84]	@ (8000e48 <MX_TIM1_Init+0xa0>)
 8000df4:	f004 f886 	bl	8004f04 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000dfe:	f000 fa1d 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480e      	ldr	r0, [pc, #56]	@ (8000e48 <MX_TIM1_Init+0xa0>)
 8000e10:	f004 fd28 	bl	8005864 <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e1a:	f000 fa0f 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <MX_TIM1_Init+0xa0>)
 8000e30:	f005 f8c8 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e3a:	f000 f9ff 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000594 	.word	0x20000594
 8000e4c:	40012c00 	.word	0x40012c00

08000e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e78:	2247      	movs	r2, #71	@ 0x47
 8000e7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e96:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e98:	f004 f8ee 	bl	8005078 <HAL_TIM_IC_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ea2:	f000 f9cb 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480f      	ldr	r0, [pc, #60]	@ (8000ef4 <MX_TIM2_Init+0xa4>)
 8000eb6:	f005 f885 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ec0:	f000 f9bc 	bl	800123c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <MX_TIM2_Init+0xa4>)
 8000edc:	f004 fc26 	bl	800572c <HAL_TIM_IC_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ee6:	f000 f9a9 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200005e0 	.word	0x200005e0

08000ef8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	@ (8000f54 <MX_USART1_UART_Init+0x5c>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f04:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000f08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f3c:	f005 f8e0 	bl	8006100 <HAL_UART_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f46:	f000 f979 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000062c 	.word	0x2000062c
 8000f54:	40013800 	.word	0x40013800

08000f58 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <MX_USB_PCD_Init+0x3c>)
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f98 <MX_USB_PCD_Init+0x40>)
 8000f60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_USB_PCD_Init+0x3c>)
 8000f64:	2208      	movs	r2, #8
 8000f66:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <MX_USB_PCD_Init+0x3c>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_USB_PCD_Init+0x3c>)
 8000f70:	2202      	movs	r2, #2
 8000f72:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <MX_USB_PCD_Init+0x3c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_USB_PCD_Init+0x3c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <MX_USB_PCD_Init+0x3c>)
 8000f82:	f001 fef8 	bl	8002d76 <HAL_PCD_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f8c:	f000 f956 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200006b4 	.word	0x200006b4
 8000f98:	40005c00 	.word	0x40005c00

08000f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb2:	4b55      	ldr	r3, [pc, #340]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a54      	ldr	r2, [pc, #336]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b52      	ldr	r3, [pc, #328]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	4b4f      	ldr	r3, [pc, #316]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a4e      	ldr	r2, [pc, #312]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe2:	4b49      	ldr	r3, [pc, #292]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a48      	ldr	r2, [pc, #288]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fe8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	4b46      	ldr	r3, [pc, #280]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b43      	ldr	r3, [pc, #268]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a42      	ldr	r2, [pc, #264]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	4b40      	ldr	r3, [pc, #256]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b3d      	ldr	r3, [pc, #244]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a3c      	ldr	r2, [pc, #240]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800101c:	6153      	str	r3, [r2, #20]
 800101e:	4b3a      	ldr	r3, [pc, #232]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800102a:	2200      	movs	r2, #0
 800102c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001030:	4836      	ldr	r0, [pc, #216]	@ (800110c <MX_GPIO_Init+0x170>)
 8001032:	f001 f91d 	bl	8002270 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|SPI_1SS_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	211e      	movs	r1, #30
 800103a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103e:	f001 f917 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2110      	movs	r1, #16
 8001046:	4832      	ldr	r0, [pc, #200]	@ (8001110 <MX_GPIO_Init+0x174>)
 8001048:	f001 f912 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SP1_RST_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2103      	movs	r1, #3
 8001050:	4830      	ldr	r0, [pc, #192]	@ (8001114 <MX_GPIO_Init+0x178>)
 8001052:	f001 f90d 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001056:	2337      	movs	r3, #55	@ 0x37
 8001058:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800105a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4828      	ldr	r0, [pc, #160]	@ (800110c <MX_GPIO_Init+0x170>)
 800106c:	f000 ff86 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001070:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8001074:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4820      	ldr	r0, [pc, #128]	@ (800110c <MX_GPIO_Init+0x170>)
 800108a:	f000 ff77 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800108e:	2301      	movs	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a4:	f000 ff6a 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 SPI_1SS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|SPI_1SS_Pin;
 80010a8:	231e      	movs	r3, #30
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c2:	f000 ff5b 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010c6:	2310      	movs	r3, #16
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <MX_GPIO_Init+0x174>)
 80010de:	f000 ff4d 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SP1_RST_Pin PB1 */
  GPIO_InitStruct.Pin = SP1_RST_Pin|GPIO_PIN_1;
 80010e2:	2303      	movs	r3, #3
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_GPIO_Init+0x178>)
 80010fa:	f000 ff3f 	bl	8001f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000
 800110c:	48001000 	.word	0x48001000
 8001110:	48001400 	.word	0x48001400
 8001114:	48000400 	.word	0x48000400

08001118 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    // Assicurati che sia il timer e il canale corretto che ha generato l'interruzione
    if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Adatta TIM2 e TIM_CHANNEL_1 se usi un altro timer/canale
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001128:	d17b      	bne.n	8001222 <HAL_TIM_IC_CaptureCallback+0x10a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7f1b      	ldrb	r3, [r3, #28]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d177      	bne.n	8001222 <HAL_TIM_IC_CaptureCallback+0x10a>
    {
        if(0 == bitCount && 0 == isStartCaptured && 0 == receivedData)
 8001132:	4b3e      	ldr	r3, [pc, #248]	@ (800122c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10c      	bne.n	8001156 <HAL_TIM_IC_CaptureCallback+0x3e>
 800113c:	4b3c      	ldr	r3, [pc, #240]	@ (8001230 <HAL_TIM_IC_CaptureCallback+0x118>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d107      	bne.n	8001156 <HAL_TIM_IC_CaptureCallback+0x3e>
 8001146:	4b3b      	ldr	r3, [pc, #236]	@ (8001234 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d103      	bne.n	8001156 <HAL_TIM_IC_CaptureCallback+0x3e>
        {
            // Primo fronte di discesa del bit di start (9ms)
            isStartCaptured = 1;
 800114e:	4b38      	ldr	r3, [pc, #224]	@ (8001230 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e065      	b.n	8001222 <HAL_TIM_IC_CaptureCallback+0x10a>
        }
        else if(0 == bitCount && 1 == isStartCaptured && 0 == receivedData)
 8001156:	4b35      	ldr	r3, [pc, #212]	@ (800122c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d110      	bne.n	8001182 <HAL_TIM_IC_CaptureCallback+0x6a>
 8001160:	4b33      	ldr	r3, [pc, #204]	@ (8001230 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10b      	bne.n	8001182 <HAL_TIM_IC_CaptureCallback+0x6a>
 800116a:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d107      	bne.n	8001182 <HAL_TIM_IC_CaptureCallback+0x6a>
        {
            // Secondo fronte di discesa del bit di start (dopo 4.5ms)
            // Resetta il contatore del timer per misurare la durata del primo bit di dati
            __HAL_TIM_SET_COUNTER(htim, 0);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24
            isStartCaptured = 2; // Passa allo stato di acquisizione dati
 800117a:	4b2d      	ldr	r3, [pc, #180]	@ (8001230 <HAL_TIM_IC_CaptureCallback+0x118>)
 800117c:	2202      	movs	r2, #2
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e04f      	b.n	8001222 <HAL_TIM_IC_CaptureCallback+0x10a>
        }
        else if(32 > bitCount) // Abbiamo ancora bit da ricevere (32 bit per il protocollo NEC)
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b1f      	cmp	r3, #31
 800118a:	d84a      	bhi.n	8001222 <HAL_TIM_IC_CaptureCallback+0x10a>
        {
            IC_Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Legge il valore catturato
 800118c:	2100      	movs	r1, #0
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f004 fc32 	bl	80059f8 <HAL_TIM_ReadCapturedValue>
 8001194:	4603      	mov	r3, r0
 8001196:	4a28      	ldr	r2, [pc, #160]	@ (8001238 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001198:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0); // Resetta il contatore per la prossima misurazione
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24
            // Per un '1' ha una durata di ~2.25ms (562.5us MARK + 1.687ms SPACE)
            // I valori 1000-1300 e 2100-2400 us suggeriscono che il timer ha un tick di 1us.
            // Questi sono i "gap" tra i fronti di discesa, che rappresentano il "SPACE" del bit.

            // Received Logic '0'
            if(IC_Value > 1000 && IC_Value < 1300) // Questo è il tempo dello "SPACE" per un 0 (~1.125ms)
 80011a2:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011aa:	d912      	bls.n	80011d2 <HAL_TIM_IC_CaptureCallback+0xba>
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f240 5213 	movw	r2, #1299	@ 0x513
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d80c      	bhi.n	80011d2 <HAL_TIM_IC_CaptureCallback+0xba>
            {
                receivedData &= ~(1UL << bitCount); // Imposta il bit a 0
 80011b8:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <HAL_TIM_IC_CaptureCallback+0x114>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	2301      	movs	r3, #1
 80011c2:	4093      	lsls	r3, r2
 80011c4:	43da      	mvns	r2, r3
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4013      	ands	r3, r2
 80011cc:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e016      	b.n	8001200 <HAL_TIM_IC_CaptureCallback+0xe8>
            }
            // Received Logic '1'
            else if(IC_Value > 2100 && IC_Value < 2400) // Questo è il tempo dello "SPACE" per un 1 (~2.25ms)
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f640 0234 	movw	r2, #2100	@ 0x834
 80011da:	4293      	cmp	r3, r2
 80011dc:	d910      	bls.n	8001200 <HAL_TIM_IC_CaptureCallback+0xe8>
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 80011e6:	d20b      	bcs.n	8001200 <HAL_TIM_IC_CaptureCallback+0xe8>
            {
                receivedData |= (1UL << bitCount); // Imposta il bit a 1
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <HAL_TIM_IC_CaptureCallback+0x114>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	2301      	movs	r3, #1
 80011f2:	fa03 f202 	lsl.w	r2, r3, r2
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011fe:	6013      	str	r3, [r2, #0]
            }
            // ELSE: se il valore non rientra in questi range, è un errore o una tempistica non NEC

            bitCount++; // Passa al bit successivo
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	3301      	adds	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <HAL_TIM_IC_CaptureCallback+0x114>)
 800120c:	701a      	strb	r2, [r3, #0]
            if(bitCount == 32) // Tutti i 32 bit sono stati ricevuti
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b20      	cmp	r3, #32
 8001216:	d104      	bne.n	8001222 <HAL_TIM_IC_CaptureCallback+0x10a>
            {
                // Ferma l'Input Capture per evitare ulteriori interruzioni finché non viene processato il dato
                HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1); // Ho cambiato &htim2 in htim
 8001218:	2100      	movs	r1, #0
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f004 f8c6 	bl	80053ac <HAL_TIM_IC_Stop_IT>
            }
        }
    }
}
 8001220:	e7ff      	b.n	8001222 <HAL_TIM_IC_CaptureCallback+0x10a>
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000988 	.word	0x20000988
 8001230:	20000989 	.word	0x20000989
 8001234:	2000098c 	.word	0x2000098c
 8001238:	20000990 	.word	0x20000990

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <Error_Handler+0x8>

08001248 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001252:	f107 020f 	add.w	r2, r7, #15
 8001256:	1df9      	adds	r1, r7, #7
 8001258:	2364      	movs	r3, #100	@ 0x64
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	4804      	ldr	r0, [pc, #16]	@ (8001270 <RC522_SPI_Transfer+0x28>)
 8001260:	f003 fac9 	bl	80047f6 <HAL_SPI_TransmitReceive>

	return rx_data;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000530 	.word	0x20000530

08001274 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	460a      	mov	r2, r1
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	4613      	mov	r3, r2
 8001282:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	2110      	movs	r1, #16
 8001288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128c:	f000 fff0 	bl	8002270 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ffd3 	bl	8001248 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ffcf 	bl	8001248 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2110      	movs	r1, #16
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b2:	f000 ffdd 	bl	8002270 <HAL_GPIO_WritePin>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2110      	movs	r1, #16
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d0:	f000 ffce 	bl	8002270 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ffac 	bl	8001248 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff ffa9 	bl	8001248 <RC522_SPI_Transfer>
 80012f6:	4603      	mov	r3, r0
 80012f8:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2110      	movs	r1, #16
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001302:	f000 ffb5 	bl	8002270 <HAL_GPIO_WritePin>

	return val;
 8001306:	7bfb      	ldrb	r3, [r7, #15]

}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	460a      	mov	r2, r1
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	4613      	mov	r3, r2
 800131e:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ffcb 	bl	80012be <Read_MFRC522>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	4313      	orrs	r3, r2
 8001332:	b2da      	uxtb	r2, r3
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff9b 	bl	8001274 <Write_MFRC522>
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	460a      	mov	r2, r1
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	4613      	mov	r3, r2
 8001354:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ffb0 	bl	80012be <Read_MFRC522>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001362:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001366:	43db      	mvns	r3, r3
 8001368:	b25a      	sxtb	r2, r3
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4013      	ands	r3, r2
 8001370:	b25b      	sxtb	r3, r3
 8001372:	b2da      	uxtb	r2, r3
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff7b 	bl	8001274 <Write_MFRC522>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800138a:	2014      	movs	r0, #20
 800138c:	f7ff ff97 	bl	80012be <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001390:	2103      	movs	r1, #3
 8001392:	2014      	movs	r0, #20
 8001394:	f7ff ffbc 	bl	8001310 <SetBitMask>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80013a0:	210f      	movs	r1, #15
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff ff66 	bl	8001274 <Write_MFRC522>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2110      	movs	r1, #16
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b8:	f000 ff5a 	bl	8002270 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2101      	movs	r1, #1
 80013c0:	4810      	ldr	r0, [pc, #64]	@ (8001404 <MFRC522_Init+0x58>)
 80013c2:	f000 ff55 	bl	8002270 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80013c6:	f7ff ffe9 	bl	800139c <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80013ca:	218d      	movs	r1, #141	@ 0x8d
 80013cc:	202a      	movs	r0, #42	@ 0x2a
 80013ce:	f7ff ff51 	bl	8001274 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80013d2:	213e      	movs	r1, #62	@ 0x3e
 80013d4:	202b      	movs	r0, #43	@ 0x2b
 80013d6:	f7ff ff4d 	bl	8001274 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80013da:	211e      	movs	r1, #30
 80013dc:	202d      	movs	r0, #45	@ 0x2d
 80013de:	f7ff ff49 	bl	8001274 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80013e2:	2100      	movs	r1, #0
 80013e4:	202c      	movs	r0, #44	@ 0x2c
 80013e6:	f7ff ff45 	bl	8001274 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80013ea:	2140      	movs	r1, #64	@ 0x40
 80013ec:	2015      	movs	r0, #21
 80013ee:	f7ff ff41 	bl	8001274 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80013f2:	213d      	movs	r1, #61	@ 0x3d
 80013f4:	2011      	movs	r0, #17
 80013f6:	f7ff ff3d 	bl	8001274 <Write_MFRC522>

	AntennaOn();
 80013fa:	f7ff ffc4 	bl	8001386 <AntennaOn>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	48000400 	.word	0x48000400

08001408 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4603      	mov	r3, r0
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	4613      	mov	r3, r2
 8001418:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800141a:	2302      	movs	r3, #2
 800141c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800141e:	2300      	movs	r3, #0
 8001420:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001422:	2300      	movs	r3, #0
 8001424:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d006      	beq.n	800143a <MFRC522_ToCard+0x32>
 800142c:	2b0e      	cmp	r3, #14
 800142e:	d109      	bne.n	8001444 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001430:	2312      	movs	r3, #18
 8001432:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001434:	2310      	movs	r3, #16
 8001436:	777b      	strb	r3, [r7, #29]
			break;
 8001438:	e005      	b.n	8001446 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800143a:	2377      	movs	r3, #119	@ 0x77
 800143c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800143e:	2330      	movs	r3, #48	@ 0x30
 8001440:	777b      	strb	r3, [r7, #29]
			break;
 8001442:	e000      	b.n	8001446 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001444:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001446:	7fbb      	ldrb	r3, [r7, #30]
 8001448:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	2002      	movs	r0, #2
 8001452:	f7ff ff0f 	bl	8001274 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001456:	2180      	movs	r1, #128	@ 0x80
 8001458:	2004      	movs	r0, #4
 800145a:	f7ff ff74 	bl	8001346 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800145e:	2180      	movs	r1, #128	@ 0x80
 8001460:	200a      	movs	r0, #10
 8001462:	f7ff ff55 	bl	8001310 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001466:	2100      	movs	r1, #0
 8001468:	2001      	movs	r0, #1
 800146a:	f7ff ff03 	bl	8001274 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	e00a      	b.n	800148a <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4413      	add	r3, r2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	2009      	movs	r0, #9
 8001480:	f7ff fef8 	bl	8001274 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	3301      	adds	r3, #1
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	429a      	cmp	r2, r3
 8001490:	d3f0      	bcc.n	8001474 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	4619      	mov	r1, r3
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff feec 	bl	8001274 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d103      	bne.n	80014aa <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80014a2:	2180      	movs	r1, #128	@ 0x80
 80014a4:	200d      	movs	r0, #13
 80014a6:	f7ff ff33 	bl	8001310 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80014aa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014ae:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80014b0:	2004      	movs	r0, #4
 80014b2:	f7ff ff04 	bl	80012be <Read_MFRC522>
 80014b6:	4603      	mov	r3, r0
 80014b8:	773b      	strb	r3, [r7, #28]
        i--;
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	3b01      	subs	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00a      	beq.n	80014dc <MFRC522_ToCard+0xd4>
 80014c6:	7f3b      	ldrb	r3, [r7, #28]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <MFRC522_ToCard+0xd4>
 80014d0:	7f3a      	ldrb	r2, [r7, #28]
 80014d2:	7f7b      	ldrb	r3, [r7, #29]
 80014d4:	4013      	ands	r3, r2
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0e9      	beq.n	80014b0 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	200d      	movs	r0, #13
 80014e0:	f7ff ff31 	bl	8001346 <ClearBitMask>

    if (i != 0)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d052      	beq.n	8001590 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80014ea:	2006      	movs	r0, #6
 80014ec:	f7ff fee7 	bl	80012be <Read_MFRC522>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f003 031b 	and.w	r3, r3, #27
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d148      	bne.n	800158c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80014fe:	7f3a      	ldrb	r2, [r7, #28]
 8001500:	7fbb      	ldrb	r3, [r7, #30]
 8001502:	4013      	ands	r3, r2
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 800150e:	2301      	movs	r3, #1
 8001510:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b0c      	cmp	r3, #12
 8001516:	d13b      	bne.n	8001590 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001518:	200a      	movs	r0, #10
 800151a:	f7ff fed0 	bl	80012be <Read_MFRC522>
 800151e:	4603      	mov	r3, r0
 8001520:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001522:	200c      	movs	r0, #12
 8001524:	f7ff fecb 	bl	80012be <Read_MFRC522>
 8001528:	4603      	mov	r3, r0
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8001536:	7f3b      	ldrb	r3, [r7, #28]
 8001538:	3b01      	subs	r3, #1
 800153a:	00da      	lsls	r2, r3, #3
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	4413      	add	r3, r2
 8001540:	461a      	mov	r2, r3
 8001542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e004      	b.n	8001552 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001548:	7f3b      	ldrb	r3, [r7, #28]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	461a      	mov	r2, r3
 800154e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001550:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001552:	7f3b      	ldrb	r3, [r7, #28]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 800155c:	7f3b      	ldrb	r3, [r7, #28]
 800155e:	2b10      	cmp	r3, #16
 8001560:	d901      	bls.n	8001566 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8001562:	2310      	movs	r3, #16
 8001564:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	e00a      	b.n	8001582 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	18d4      	adds	r4, r2, r3
 8001572:	2009      	movs	r0, #9
 8001574:	f7ff fea3 	bl	80012be <Read_MFRC522>
 8001578:	4603      	mov	r3, r0
 800157a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	3301      	adds	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	7f3b      	ldrb	r3, [r7, #28]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	429a      	cmp	r2, r3
 8001588:	d3f0      	bcc.n	800156c <MFRC522_ToCard+0x164>
 800158a:	e001      	b.n	8001590 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800158c:	2302      	movs	r3, #2
 800158e:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8001590:	7ffb      	ldrb	r3, [r7, #31]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}

0800159a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af02      	add	r7, sp, #8
 80015a0:	4603      	mov	r3, r0
 80015a2:	6039      	str	r1, [r7, #0]
 80015a4:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80015a6:	2107      	movs	r1, #7
 80015a8:	200d      	movs	r0, #13
 80015aa:	f7ff fe63 	bl	8001274 <Write_MFRC522>

	TagType[0] = reqMode;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	200c      	movs	r0, #12
 80015c2:	f7ff ff21 	bl	8001408 <MFRC522_ToCard>
 80015c6:	4603      	mov	r3, r0
 80015c8:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <MFRC522_Request+0x3c>
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d001      	beq.n	80015da <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80015d6:	2302      	movs	r3, #2
 80015d8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80015f0:	2100      	movs	r1, #0
 80015f2:	200d      	movs	r0, #13
 80015f4:	f7ff fe3e 	bl	8001274 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2293      	movs	r2, #147	@ 0x93
 80015fc:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	2220      	movs	r2, #32
 8001604:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	200c      	movs	r0, #12
 8001614:	f7ff fef8 	bl	8001408 <MFRC522_ToCard>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	73bb      	strb	r3, [r7, #14]
 8001626:	e009      	b.n	800163c <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001628:	7bbb      	ldrb	r3, [r7, #14]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	7b7b      	ldrb	r3, [r7, #13]
 8001632:	4053      	eors	r3, r2
 8001634:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001636:	7bbb      	ldrb	r3, [r7, #14]
 8001638:	3301      	adds	r3, #1
 800163a:	73bb      	strb	r3, [r7, #14]
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d9f2      	bls.n	8001628 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	7b7a      	ldrb	r2, [r7, #13]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8001650:	2302      	movs	r3, #2
 8001652:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <isSensorDetected>:
 * Function Name: isSensorDetected
 * Description: Checks if the MFRC522 sensor is detected by reading its Version Register.
 * Input Parameters: None
 * Returns: true if the sensor is detected (version matches known values), false otherwise.
 */
bool isSensorDetected(void){
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
    // Legge il valore dal registro di versione (VersionReg) del MFRC522.
    uchar version = Read_MFRC522(VersionReg);
 8001664:	2037      	movs	r0, #55	@ 0x37
 8001666:	f7ff fe2a 	bl	80012be <Read_MFRC522>
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]

    // Controlla se la versione del chip corrisponde a uno dei valori noti del MFRC522.
    // I valori tipici sono 0x91 (v1.0) o 0x92 (v2.0). Alcuni potrebbero restituire 0x90.
    if (version == MFRC522_VERSION_1 || version == MFRC522_VERSION_2 || version == MFRC522_VERSION_0){
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b91      	cmp	r3, #145	@ 0x91
 8001672:	d005      	beq.n	8001680 <isSensorDetected+0x22>
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2b92      	cmp	r3, #146	@ 0x92
 8001678:	d002      	beq.n	8001680 <isSensorDetected+0x22>
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2b90      	cmp	r3, #144	@ 0x90
 800167e:	d101      	bne.n	8001684 <isSensorDetected+0x26>
        return true; // Il sensore è stato rilevato
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <isSensorDetected+0x28>
    }else{
        return false; // Il sensore non è stato rilevato o non sta comunicando correttamente
 8001684:	2300      	movs	r3, #0
    }
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_MspInit+0x44>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <HAL_MspInit+0x44>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6193      	str	r3, [r2, #24]
 80016a2:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <HAL_MspInit+0x44>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_MspInit+0x44>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <HAL_MspInit+0x44>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	61d3      	str	r3, [r2, #28]
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_MspInit+0x44>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016c6:	2007      	movs	r0, #7
 80016c8:	f000 fc16 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_I2C_MspInit+0x7c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d127      	bne.n	800174a <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <HAL_I2C_MspInit+0x80>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <HAL_I2C_MspInit+0x80>)
 8001700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001704:	6153      	str	r3, [r2, #20]
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <HAL_I2C_MspInit+0x80>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001712:	23c0      	movs	r3, #192	@ 0xc0
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001716:	2312      	movs	r3, #18
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171a:	2301      	movs	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001722:	2304      	movs	r3, #4
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	480b      	ldr	r0, [pc, #44]	@ (800175c <HAL_I2C_MspInit+0x84>)
 800172e:	f000 fc25 	bl	8001f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_I2C_MspInit+0x80>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <HAL_I2C_MspInit+0x80>)
 8001738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_I2C_MspInit+0x80>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	@ 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40005400 	.word	0x40005400
 8001758:	40021000 	.word	0x40021000
 800175c:	48000400 	.word	0x48000400

08001760 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a17      	ldr	r2, [pc, #92]	@ (80017dc <HAL_SPI_MspInit+0x7c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d128      	bne.n	80017d4 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001782:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <HAL_SPI_MspInit+0x80>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	4a16      	ldr	r2, [pc, #88]	@ (80017e0 <HAL_SPI_MspInit+0x80>)
 8001788:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800178c:	6193      	str	r3, [r2, #24]
 800178e:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <HAL_SPI_MspInit+0x80>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <HAL_SPI_MspInit+0x80>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <HAL_SPI_MspInit+0x80>)
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	6153      	str	r3, [r2, #20]
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <HAL_SPI_MspInit+0x80>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80017b2:	23e0      	movs	r3, #224	@ 0xe0
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017c2:	2305      	movs	r3, #5
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d0:	f000 fbd4 	bl	8001f7c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	@ 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40013000 	.word	0x40013000
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <HAL_TIM_Base_MspInit+0x38>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10b      	bne.n	800180e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HAL_TIM_Base_MspInit+0x3c>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	4a09      	ldr	r2, [pc, #36]	@ (8001820 <HAL_TIM_Base_MspInit+0x3c>)
 80017fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001800:	6193      	str	r3, [r2, #24]
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <HAL_TIM_Base_MspInit+0x3c>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40012c00 	.word	0x40012c00
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001844:	d131      	bne.n	80018aa <HAL_TIM_IC_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001846:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <HAL_TIM_IC_MspInit+0x90>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a1a      	ldr	r2, [pc, #104]	@ (80018b4 <HAL_TIM_IC_MspInit+0x90>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_TIM_IC_MspInit+0x90>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_TIM_IC_MspInit+0x90>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <HAL_TIM_IC_MspInit+0x90>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	6153      	str	r3, [r2, #20]
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_TIM_IC_MspInit+0x90>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001880:	2301      	movs	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001888:	2301      	movs	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001896:	f000 fb71 	bl	8001f7c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	201c      	movs	r0, #28
 80018a0:	f000 fb35 	bl	8001f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a4:	201c      	movs	r0, #28
 80018a6:	f000 fb4e 	bl	8001f46 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	@ 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	@ 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <HAL_UART_MspInit+0x7c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d127      	bne.n	800192a <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <HAL_UART_MspInit+0x80>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a16      	ldr	r2, [pc, #88]	@ (8001938 <HAL_UART_MspInit+0x80>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <HAL_UART_MspInit+0x80>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <HAL_UART_MspInit+0x80>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4a10      	ldr	r2, [pc, #64]	@ (8001938 <HAL_UART_MspInit+0x80>)
 80018f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018fc:	6153      	str	r3, [r2, #20]
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <HAL_UART_MspInit+0x80>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800190a:	2330      	movs	r3, #48	@ 0x30
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800191a:	2307      	movs	r3, #7
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	@ (800193c <HAL_UART_MspInit+0x84>)
 8001926:	f000 fb29 	bl	8001f7c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	@ 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40013800 	.word	0x40013800
 8001938:	40021000 	.word	0x40021000
 800193c:	48000800 	.word	0x48000800

08001940 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	@ 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a18      	ldr	r2, [pc, #96]	@ (80019c0 <HAL_PCD_MspInit+0x80>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d129      	bne.n	80019b6 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <HAL_PCD_MspInit+0x84>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a17      	ldr	r2, [pc, #92]	@ (80019c4 <HAL_PCD_MspInit+0x84>)
 8001968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_PCD_MspInit+0x84>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800197a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800198c:	230e      	movs	r3, #14
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199a:	f000 faef 	bl	8001f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_PCD_MspInit+0x84>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_PCD_MspInit+0x84>)
 80019a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_PCD_MspInit+0x84>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	@ 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40005c00 	.word	0x40005c00
 80019c4:	40021000 	.word	0x40021000

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <NMI_Handler+0x4>

080019d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <MemManage_Handler+0x4>

080019e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <UsageFault_Handler+0x4>

080019f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1e:	f000 f957 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a2c:	4802      	ldr	r0, [pc, #8]	@ (8001a38 <TIM2_IRQHandler+0x10>)
 8001a2e:	f003 fd7b 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200005e0 	.word	0x200005e0

08001a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a44:	4a14      	ldr	r2, [pc, #80]	@ (8001a98 <_sbrk+0x5c>)
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <_sbrk+0x60>)
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <_sbrk+0x64>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <_sbrk+0x68>)
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d207      	bcs.n	8001a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a6c:	f005 f8ca 	bl	8006c04 <__errno>
 8001a70:	4603      	mov	r3, r0
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	e009      	b.n	8001a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <_sbrk+0x64>)
 8001a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000a000 	.word	0x2000a000
 8001a9c:	00000400 	.word	0x00000400
 8001aa0:	20000998 	.word	0x20000998
 8001aa4:	20000ae8 	.word	0x20000ae8

08001aa8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <SystemInit+0x20>)
 8001aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ab2:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <SystemInit+0x20>)
 8001ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <findTag>:


// --- Function Implementations ---

// Function to find a tag in the registeredTags array
TagData* findTag(unsigned char* serNum){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < numRegisteredTags; i++) {
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e01b      	b.n	8001b12 <findTag+0x46>
        if (memcmp(registeredTags[i].serialNum, serNum, 5) == 0) {
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	3360      	adds	r3, #96	@ 0x60
 8001ae6:	4a10      	ldr	r2, [pc, #64]	@ (8001b28 <findTag+0x5c>)
 8001ae8:	4413      	add	r3, r2
 8001aea:	3304      	adds	r3, #4
 8001aec:	2205      	movs	r2, #5
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 f84b 	bl	8006b8c <memcmp>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d107      	bne.n	8001b0c <findTag+0x40>
            return &registeredTags[i];
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <findTag+0x5c>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	e008      	b.n	8001b1e <findTag+0x52>
    for (int i = 0; i < numRegisteredTags; i++) {
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <findTag+0x60>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbde      	blt.n	8001ada <findTag+0xe>
        }
    }
    return NULL;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000004 	.word	0x20000004

08001b30 <getNamesBySerial>:
	 }

	 return generalita;
}

bool getNamesBySerial(unsigned char* serNum, char* nameBuffer, size_t nameBufferSize, char* surnameBuffer, size_t surnameBufferSize) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
    TagData* foundTag = findTag(serNum); // Usa la tua funzione findTag esistente
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff ffc4 	bl	8001acc <findTag>
 8001b44:	6178      	str	r0, [r7, #20]

    // Assicurati che i buffer siano sempre terminati da null in caso di errore o tag non trovato
    if (nameBuffer != NULL && nameBufferSize > 0) nameBuffer[0] = '\0';
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <getNamesBySerial+0x28>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <getNamesBySerial+0x28>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
    if (surnameBuffer != NULL && surnameBufferSize > 0) surnameBuffer[0] = '\0';
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <getNamesBySerial+0x3a>
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <getNamesBySerial+0x3a>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]

    if (foundTag != NULL) {
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d029      	beq.n	8001bc4 <getNamesBySerial+0x94>
        // Copia il nome nel buffer, assicurandoti di non superare la dimensione
        if (nameBuffer != NULL && nameBufferSize > 0) {
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00f      	beq.n	8001b96 <getNamesBySerial+0x66>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00c      	beq.n	8001b96 <getNamesBySerial+0x66>
            strncpy(nameBuffer, foundTag->name, nameBufferSize - 1);
 8001b7c:	6979      	ldr	r1, [r7, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	461a      	mov	r2, r3
 8001b84:	68b8      	ldr	r0, [r7, #8]
 8001b86:	f005 f819 	bl	8006bbc <strncpy>
            nameBuffer[nameBufferSize - 1] = '\0'; // Assicura la terminazione della stringa
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	4413      	add	r3, r2
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
        }

        // Copia il cognome nel buffer, assicurandoti di non superare la dimensione
        if (surnameBuffer != NULL && surnameBufferSize > 0) {
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d011      	beq.n	8001bc0 <getNamesBySerial+0x90>
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00e      	beq.n	8001bc0 <getNamesBySerial+0x90>
            strncpy(surnameBuffer, foundTag->surname, surnameBufferSize - 1);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f103 0132 	add.w	r1, r3, #50	@ 0x32
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	461a      	mov	r2, r3
 8001bae:	6838      	ldr	r0, [r7, #0]
 8001bb0:	f005 f804 	bl	8006bbc <strncpy>
            surnameBuffer[surnameBufferSize - 1] = '\0'; // Assicura la terminazione della stringa
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
        }
        return true; // Tag trovato e dati copiati
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <getNamesBySerial+0x96>
    } else {
        // Tag non trovato. I buffer sono già stati azzerati sopra.
        return false;
 8001bc4:	2300      	movs	r3, #0
    }
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <isTagRegistered>:

// Function to check if a tag is registered
bool isTagRegistered(unsigned char* serNum) {
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
    return findTag(serNum) != NULL;
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff78 	bl	8001acc <findTag>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <Reset_Handler>:
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c28 <LoopForever+0x2>
 8001bf4:	f7ff ff58 	bl	8001aa8 <SystemInit>
 8001bf8:	480c      	ldr	r0, [pc, #48]	@ (8001c2c <LoopForever+0x6>)
 8001bfa:	490d      	ldr	r1, [pc, #52]	@ (8001c30 <LoopForever+0xa>)
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <LoopForever+0xe>)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:
 8001c02:	58d4      	ldr	r4, [r2, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:
 8001c08:	18c4      	adds	r4, r0, r3
 8001c0a:	428c      	cmp	r4, r1
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <LoopForever+0x12>)
 8001c10:	4c0a      	ldr	r4, [pc, #40]	@ (8001c3c <LoopForever+0x16>)
 8001c12:	2300      	movs	r3, #0
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:
 8001c1a:	42a2      	cmp	r2, r4
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>
 8001c1e:	f004 fff7 	bl	8006c10 <__libc_init_array>
 8001c22:	f7fe fe01 	bl	8000828 <main>

08001c26 <LoopForever>:
 8001c26:	e7fe      	b.n	8001c26 <LoopForever>
 8001c28:	2000a000 	.word	0x2000a000
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	200004c0 	.word	0x200004c0
 8001c34:	080074dc 	.word	0x080074dc
 8001c38:	200004c0 	.word	0x200004c0
 8001c3c:	20000ae8 	.word	0x20000ae8

08001c40 <ADC1_2_IRQHandler>:
 8001c40:	e7fe      	b.n	8001c40 <ADC1_2_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <HAL_Init+0x28>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a07      	ldr	r2, [pc, #28]	@ (8001c6c <HAL_Init+0x28>)
 8001c4e:	f043 0310 	orr.w	r3, r3, #16
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c54:	2003      	movs	r0, #3
 8001c56:	f000 f94f 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f000 f808 	bl	8001c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c60:	f7ff fd16 	bl	8001690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40022000 	.word	0x40022000

08001c70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_InitTick+0x54>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_InitTick+0x58>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f967 	bl	8001f62 <HAL_SYSTICK_Config>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00e      	b.n	8001cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b0f      	cmp	r3, #15
 8001ca2:	d80a      	bhi.n	8001cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f000 f92f 	bl	8001f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb0:	4a06      	ldr	r2, [pc, #24]	@ (8001ccc <HAL_InitTick+0x5c>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	2000046c 	.word	0x2000046c
 8001ccc:	20000468 	.word	0x20000468

08001cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_IncTick+0x20>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x24>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_IncTick+0x24>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000046c 	.word	0x2000046c
 8001cf4:	2000099c 	.word	0x2000099c

08001cf8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2000099c 	.word	0x2000099c

08001d10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff ffee 	bl	8001cf8 <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d005      	beq.n	8001d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <HAL_Delay+0x44>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d36:	bf00      	nop
 8001d38:	f7ff ffde 	bl	8001cf8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d8f7      	bhi.n	8001d38 <HAL_Delay+0x28>
  {
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000046c 	.word	0x2000046c

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4907      	ldr	r1, [pc, #28]	@ (8001df4 <__NVIC_EnableIRQ+0x38>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	@ (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	@ (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	@ 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec4:	d301      	bcc.n	8001eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f7ff ff8e 	bl	8001df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff29 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f20:	f7ff ff3e 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff8e 	bl	8001e4c <NVIC_EncodePriority>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff5d 	bl	8001df8 <__NVIC_SetPriority>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff31 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ffa2 	bl	8001eb4 <SysTick_Config>
 8001f70:	4603      	mov	r3, r0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8a:	e154      	b.n	8002236 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2101      	movs	r1, #1
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8146 	beq.w	8002230 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d005      	beq.n	8001fbc <HAL_GPIO_Init+0x40>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d130      	bne.n	800201e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	f003 0201 	and.w	r2, r3, #1
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b03      	cmp	r3, #3
 8002028:	d017      	beq.n	800205a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2203      	movs	r2, #3
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d123      	bne.n	80020ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	08da      	lsrs	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3208      	adds	r2, #8
 800206e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	220f      	movs	r2, #15
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	6939      	ldr	r1, [r7, #16]
 80020aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0203 	and.w	r2, r3, #3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80a0 	beq.w	8002230 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f0:	4b58      	ldr	r3, [pc, #352]	@ (8002254 <HAL_GPIO_Init+0x2d8>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a57      	ldr	r2, [pc, #348]	@ (8002254 <HAL_GPIO_Init+0x2d8>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b55      	ldr	r3, [pc, #340]	@ (8002254 <HAL_GPIO_Init+0x2d8>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002108:	4a53      	ldr	r2, [pc, #332]	@ (8002258 <HAL_GPIO_Init+0x2dc>)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	3302      	adds	r3, #2
 8002110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002132:	d019      	beq.n	8002168 <HAL_GPIO_Init+0x1ec>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a49      	ldr	r2, [pc, #292]	@ (800225c <HAL_GPIO_Init+0x2e0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_GPIO_Init+0x1e8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a48      	ldr	r2, [pc, #288]	@ (8002260 <HAL_GPIO_Init+0x2e4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00d      	beq.n	8002160 <HAL_GPIO_Init+0x1e4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a47      	ldr	r2, [pc, #284]	@ (8002264 <HAL_GPIO_Init+0x2e8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <HAL_GPIO_Init+0x1e0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a46      	ldr	r2, [pc, #280]	@ (8002268 <HAL_GPIO_Init+0x2ec>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_GPIO_Init+0x1dc>
 8002154:	2304      	movs	r3, #4
 8002156:	e008      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 8002158:	2305      	movs	r3, #5
 800215a:	e006      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 800215c:	2303      	movs	r3, #3
 800215e:	e004      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 8002160:	2302      	movs	r3, #2
 8002162:	e002      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 8002168:	2300      	movs	r3, #0
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	f002 0203 	and.w	r2, r2, #3
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	4093      	lsls	r3, r2
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800217a:	4937      	ldr	r1, [pc, #220]	@ (8002258 <HAL_GPIO_Init+0x2dc>)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002188:	4b38      	ldr	r3, [pc, #224]	@ (800226c <HAL_GPIO_Init+0x2f0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021ac:	4a2f      	ldr	r2, [pc, #188]	@ (800226c <HAL_GPIO_Init+0x2f0>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b2:	4b2e      	ldr	r3, [pc, #184]	@ (800226c <HAL_GPIO_Init+0x2f0>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021d6:	4a25      	ldr	r2, [pc, #148]	@ (800226c <HAL_GPIO_Init+0x2f0>)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021dc:	4b23      	ldr	r3, [pc, #140]	@ (800226c <HAL_GPIO_Init+0x2f0>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002200:	4a1a      	ldr	r2, [pc, #104]	@ (800226c <HAL_GPIO_Init+0x2f0>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002206:	4b19      	ldr	r3, [pc, #100]	@ (800226c <HAL_GPIO_Init+0x2f0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800222a:	4a10      	ldr	r2, [pc, #64]	@ (800226c <HAL_GPIO_Init+0x2f0>)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3301      	adds	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	f47f aea3 	bne.w	8001f8c <HAL_GPIO_Init+0x10>
  }
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40021000 	.word	0x40021000
 8002258:	40010000 	.word	0x40010000
 800225c:	48000400 	.word	0x48000400
 8002260:	48000800 	.word	0x48000800
 8002264:	48000c00 	.word	0x48000c00
 8002268:	48001000 	.word	0x48001000
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800228c:	e002      	b.n	8002294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	041a      	lsls	r2, r3, #16
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43d9      	mvns	r1, r3
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	400b      	ands	r3, r1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	619a      	str	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e08d      	b.n	8002402 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff f9ec 	bl	80016d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	@ 0x24
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002324:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002334:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	e006      	b.n	800235c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800235a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d108      	bne.n	8002376 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	e007      	b.n	8002386 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002384:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002398:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69d9      	ldr	r1, [r3, #28]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	461a      	mov	r2, r3
 8002418:	460b      	mov	r3, r1
 800241a:	817b      	strh	r3, [r7, #10]
 800241c:	4613      	mov	r3, r2
 800241e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b20      	cmp	r3, #32
 800242a:	f040 80fd 	bne.w	8002628 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_I2C_Master_Transmit+0x30>
 8002438:	2302      	movs	r3, #2
 800243a:	e0f6      	b.n	800262a <HAL_I2C_Master_Transmit+0x21e>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002444:	f7ff fc58 	bl	8001cf8 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2319      	movs	r3, #25
 8002450:	2201      	movs	r2, #1
 8002452:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fa00 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0e1      	b.n	800262a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2221      	movs	r2, #33	@ 0x21
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2210      	movs	r2, #16
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	893a      	ldrh	r2, [r7, #8]
 8002486:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	2bff      	cmp	r3, #255	@ 0xff
 8002496:	d906      	bls.n	80024a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	22ff      	movs	r2, #255	@ 0xff
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800249e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	e007      	b.n	80024b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80024b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d024      	beq.n	8002508 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	8979      	ldrh	r1, [r7, #10]
 80024fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002634 <HAL_I2C_Master_Transmit+0x228>)
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fb6f 	bl	8002be4 <I2C_TransferConfig>
 8002506:	e066      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250c:	b2da      	uxtb	r2, r3
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	4b48      	ldr	r3, [pc, #288]	@ (8002634 <HAL_I2C_Master_Transmit+0x228>)
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fb64 	bl	8002be4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800251c:	e05b      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	6a39      	ldr	r1, [r7, #32]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f9f3 	bl	800290e <I2C_WaitOnTXISFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e07b      	b.n	800262a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d034      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x1ca>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d130      	bne.n	80025d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	2200      	movs	r2, #0
 800257c:	2180      	movs	r1, #128	@ 0x80
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f96c 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e04d      	b.n	800262a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	2bff      	cmp	r3, #255	@ 0xff
 8002596:	d90e      	bls.n	80025b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	22ff      	movs	r2, #255	@ 0xff
 800259c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fb18 	bl	8002be4 <I2C_TransferConfig>
 80025b4:	e00f      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	8979      	ldrh	r1, [r7, #10]
 80025c8:	2300      	movs	r3, #0
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 fb07 	bl	8002be4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d19e      	bne.n	800251e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	6a39      	ldr	r1, [r7, #32]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f9d9 	bl	800299c <I2C_WaitOnSTOPFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e01a      	b.n	800262a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2220      	movs	r2, #32
 80025fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_I2C_Master_Transmit+0x22c>)
 8002608:	400b      	ands	r3, r1
 800260a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e000      	b.n	800262a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
  }
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	80002000 	.word	0x80002000
 8002638:	fe00e800 	.word	0xfe00e800

0800263c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	@ 0x28
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	460b      	mov	r3, r1
 800264a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b20      	cmp	r3, #32
 800265a:	f040 80d6 	bne.w	800280a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800266c:	d101      	bne.n	8002672 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800266e:	2302      	movs	r3, #2
 8002670:	e0cc      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_I2C_IsDeviceReady+0x44>
 800267c:	2302      	movs	r3, #2
 800267e:	e0c5      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1d0>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2224      	movs	r2, #36	@ 0x24
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <HAL_I2C_IsDeviceReady+0x72>
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026ac:	e006      	b.n	80026bc <HAL_I2C_IsDeviceReady+0x80>
 80026ae:	897b      	ldrh	r3, [r7, #10]
 80026b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026b8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80026c2:	f7ff fb19 	bl	8001cf8 <HAL_GetTick>
 80026c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	bf0c      	ite	eq
 80026d6:	2301      	moveq	r3, #1
 80026d8:	2300      	movne	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026f4:	e034      	b.n	8002760 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d01a      	beq.n	8002734 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026fe:	f7ff fafb 	bl	8001cf8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d302      	bcc.n	8002714 <HAL_I2C_IsDeviceReady+0xd8>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10f      	bne.n	8002734 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e06b      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b20      	cmp	r3, #32
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b10      	cmp	r3, #16
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002760:	7ffb      	ldrb	r3, [r7, #31]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_I2C_IsDeviceReady+0x130>
 8002766:	7fbb      	ldrb	r3, [r7, #30]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0c4      	beq.n	80026f6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b10      	cmp	r3, #16
 8002778:	d01a      	beq.n	80027b0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	2120      	movs	r1, #32
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f869 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e03b      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2220      	movs	r2, #32
 800279a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e02d      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2200      	movs	r2, #0
 80027b8:	2120      	movs	r1, #32
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f84e 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e020      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2210      	movs	r2, #16
 80027d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2220      	movs	r2, #32
 80027d8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	f63f af56 	bhi.w	8002696 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	f043 0220 	orr.w	r2, r3, #32
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
  }
}
 800280c:	4618      	mov	r0, r3
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b02      	cmp	r3, #2
 8002828:	d103      	bne.n	8002832 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d007      	beq.n	8002850 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	619a      	str	r2, [r3, #24]
  }
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800286c:	e03b      	b.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f8d6 	bl	8002a24 <I2C_IsErrorOccurred>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e041      	b.n	8002906 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d02d      	beq.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7ff fa35 	bl	8001cf8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d122      	bne.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d113      	bne.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00f      	b.n	8002906 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	bf0c      	ite	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	2300      	movne	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	429a      	cmp	r2, r3
 8002902:	d0b4      	beq.n	800286e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800291a:	e033      	b.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f87f 	bl	8002a24 <I2C_IsErrorOccurred>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e031      	b.n	8002994 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d025      	beq.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002938:	f7ff f9de 	bl	8001cf8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	d302      	bcc.n	800294e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d11a      	bne.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d013      	beq.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e007      	b.n	8002994 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d1c4      	bne.n	800291c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a8:	e02f      	b.n	8002a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f838 	bl	8002a24 <I2C_IsErrorOccurred>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02d      	b.n	8002a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7ff f99b 	bl	8001cf8 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d11a      	bne.n	8002a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d013      	beq.n	8002a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e007      	b.n	8002a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d1c8      	bne.n	80029aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	@ 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d068      	beq.n	8002b22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2210      	movs	r2, #16
 8002a56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a58:	e049      	b.n	8002aee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d045      	beq.n	8002aee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7ff f949 	bl	8001cf8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_IsErrorOccurred+0x54>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d13a      	bne.n	8002aee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a9a:	d121      	bne.n	8002ae0 <I2C_IsErrorOccurred+0xbc>
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002aa2:	d01d      	beq.n	8002ae0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d01a      	beq.n	8002ae0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ab8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002aba:	f7ff f91d 	bl	8001cf8 <HAL_GetTick>
 8002abe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ac0:	e00e      	b.n	8002ae0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ac2:	f7ff f919 	bl	8001cf8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b19      	cmp	r3, #25
 8002ace:	d907      	bls.n	8002ae0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f043 0320 	orr.w	r3, r3, #32
 8002ad6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002ade:	e006      	b.n	8002aee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d1e9      	bne.n	8002ac2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d003      	beq.n	8002b04 <I2C_IsErrorOccurred+0xe0>
 8002afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0aa      	beq.n	8002a5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2220      	movs	r2, #32
 8002b12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00b      	beq.n	8002b90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f043 0302 	orr.w	r3, r3, #2
 8002b7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01c      	beq.n	8002bd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7ff fe3b 	bl	8002814 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <I2C_IsErrorOccurred+0x1bc>)
 8002baa:	400b      	ands	r3, r1
 8002bac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3728      	adds	r7, #40	@ 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	fe00e800 	.word	0xfe00e800

08002be4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	817b      	strh	r3, [r7, #10]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bfc:	7a7b      	ldrb	r3, [r7, #9]
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	0d5b      	lsrs	r3, r3, #21
 8002c1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002c22:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <I2C_TransferConfig+0x60>)
 8002c24:	430b      	orrs	r3, r1
 8002c26:	43db      	mvns	r3, r3
 8002c28:	ea02 0103 	and.w	r1, r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	03ff63ff 	.word	0x03ff63ff

08002c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d138      	bne.n	8002cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e032      	b.n	8002cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	@ 0x24
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6819      	ldr	r1, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e000      	b.n	8002cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d139      	bne.n	8002d68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e033      	b.n	8002d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2224      	movs	r2, #36	@ 0x24
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e000      	b.n	8002d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0b9      	b.n	8002efc <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7fe fdcf 	bl	8001940 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2203      	movs	r2, #3
 8002da6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 fde3 	bl	800697a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e03e      	b.n	8002e38 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3311      	adds	r3, #17
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	3310      	adds	r3, #16
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	440b      	add	r3, r1
 8002df0:	3313      	adds	r3, #19
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	3320      	adds	r3, #32
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	3324      	adds	r3, #36	@ 0x24
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	3301      	adds	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	791b      	ldrb	r3, [r3, #4]
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d3bb      	bcc.n	8002dba <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	e044      	b.n	8002ed2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	791b      	ldrb	r3, [r3, #4]
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d3b5      	bcc.n	8002e48 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ee8:	f003 fd62 	bl	80069b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f14:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f000 bff4 	b.w	8003f12 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 816d 	beq.w	800321a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f40:	4bb4      	ldr	r3, [pc, #720]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d00c      	beq.n	8002f66 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f4c:	4bb1      	ldr	r3, [pc, #708]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d157      	bne.n	8003008 <HAL_RCC_OscConfig+0x104>
 8002f58:	4bae      	ldr	r3, [pc, #696]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f64:	d150      	bne.n	8003008 <HAL_RCC_OscConfig+0x104>
 8002f66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f6a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f86:	d802      	bhi.n	8002f8e <HAL_RCC_OscConfig+0x8a>
 8002f88:	4ba2      	ldr	r3, [pc, #648]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	e015      	b.n	8002fba <HAL_RCC_OscConfig+0xb6>
 8002f8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f92:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002fa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fa6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002faa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002fb6:	4b97      	ldr	r3, [pc, #604]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fbe:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002fc2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002fc6:	fa92 f2a2 	rbit	r2, r2
 8002fca:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002fce:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002fd2:	fab2 f282 	clz	r2, r2
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	f042 0220 	orr.w	r2, r2, #32
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	f002 021f 	and.w	r2, r2, #31
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8114 	beq.w	8003218 <HAL_RCC_OscConfig+0x314>
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 810b 	bne.w	8003218 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f000 bf85 	b.w	8003f12 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003018:	d106      	bne.n	8003028 <HAL_RCC_OscConfig+0x124>
 800301a:	4b7e      	ldr	r3, [pc, #504]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7d      	ldr	r2, [pc, #500]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e036      	b.n	8003096 <HAL_RCC_OscConfig+0x192>
 8003028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10c      	bne.n	8003052 <HAL_RCC_OscConfig+0x14e>
 8003038:	4b76      	ldr	r3, [pc, #472]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a75      	ldr	r2, [pc, #468]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 800303e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b73      	ldr	r3, [pc, #460]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a72      	ldr	r2, [pc, #456]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 800304a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e021      	b.n	8003096 <HAL_RCC_OscConfig+0x192>
 8003052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003056:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003062:	d10c      	bne.n	800307e <HAL_RCC_OscConfig+0x17a>
 8003064:	4b6b      	ldr	r3, [pc, #428]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a6a      	ldr	r2, [pc, #424]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 800306a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b68      	ldr	r3, [pc, #416]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a67      	ldr	r2, [pc, #412]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	e00b      	b.n	8003096 <HAL_RCC_OscConfig+0x192>
 800307e:	4b65      	ldr	r3, [pc, #404]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a64      	ldr	r2, [pc, #400]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b62      	ldr	r3, [pc, #392]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a61      	ldr	r2, [pc, #388]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003090:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003094:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003096:	4b5f      	ldr	r3, [pc, #380]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	f023 020f 	bic.w	r2, r3, #15
 800309e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	495a      	ldr	r1, [pc, #360]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d054      	beq.n	800316a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fe1a 	bl	8001cf8 <HAL_GetTick>
 80030c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ca:	f7fe fe15 	bl	8001cf8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	@ 0x64
 80030d8:	d902      	bls.n	80030e0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	f000 bf19 	b.w	8003f12 <HAL_RCC_OscConfig+0x100e>
 80030e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030e4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80030f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003100:	d802      	bhi.n	8003108 <HAL_RCC_OscConfig+0x204>
 8003102:	4b44      	ldr	r3, [pc, #272]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	e015      	b.n	8003134 <HAL_RCC_OscConfig+0x230>
 8003108:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800310c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800311c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003120:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003124:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003130:	4b38      	ldr	r3, [pc, #224]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003138:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800313c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003140:	fa92 f2a2 	rbit	r2, r2
 8003144:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003148:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800314c:	fab2 f282 	clz	r2, r2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f042 0220 	orr.w	r2, r2, #32
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f002 021f 	and.w	r2, r2, #31
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f202 	lsl.w	r2, r1, r2
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0b0      	beq.n	80030ca <HAL_RCC_OscConfig+0x1c6>
 8003168:	e057      	b.n	800321a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe fdc5 	bl	8001cf8 <HAL_GetTick>
 800316e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	e00a      	b.n	800318a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fdc0 	bl	8001cf8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b64      	cmp	r3, #100	@ 0x64
 8003182:	d902      	bls.n	800318a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	f000 bec4 	b.w	8003f12 <HAL_RCC_OscConfig+0x100e>
 800318a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800318e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800319e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80031aa:	d802      	bhi.n	80031b2 <HAL_RCC_OscConfig+0x2ae>
 80031ac:	4b19      	ldr	r3, [pc, #100]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	e015      	b.n	80031de <HAL_RCC_OscConfig+0x2da>
 80031b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031b6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80031c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031ca:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80031ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <HAL_RCC_OscConfig+0x310>)
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031e2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80031e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80031ea:	fa92 f2a2 	rbit	r2, r2
 80031ee:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80031f2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80031f6:	fab2 f282 	clz	r2, r2
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f042 0220 	orr.w	r2, r2, #32
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f002 021f 	and.w	r2, r2, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1b0      	bne.n	8003174 <HAL_RCC_OscConfig+0x270>
 8003212:	e002      	b.n	800321a <HAL_RCC_OscConfig+0x316>
 8003214:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 816c 	beq.w	8003508 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003230:	4bcc      	ldr	r3, [pc, #816]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800323c:	4bc9      	ldr	r3, [pc, #804]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d16d      	bne.n	8003324 <HAL_RCC_OscConfig+0x420>
 8003248:	4bc6      	ldr	r3, [pc, #792]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d167      	bne.n	8003324 <HAL_RCC_OscConfig+0x420>
 8003254:	2302      	movs	r3, #2
 8003256:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003266:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b3f      	cmp	r3, #63	@ 0x3f
 8003272:	d802      	bhi.n	800327a <HAL_RCC_OscConfig+0x376>
 8003274:	4bbb      	ldr	r3, [pc, #748]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	e013      	b.n	80032a2 <HAL_RCC_OscConfig+0x39e>
 800327a:	2302      	movs	r3, #2
 800327c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800328c:	2302      	movs	r3, #2
 800328e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003292:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800329e:	4bb1      	ldr	r3, [pc, #708]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	2202      	movs	r2, #2
 80032a4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80032a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80032ac:	fa92 f2a2 	rbit	r2, r2
 80032b0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80032b4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f042 0220 	orr.w	r2, r2, #32
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f002 021f 	and.w	r2, r2, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCC_OscConfig+0x3e6>
 80032d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d002      	beq.n	80032ea <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f000 be14 	b.w	8003f12 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ea:	4b9e      	ldr	r3, [pc, #632]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	21f8      	movs	r1, #248	@ 0xf8
 8003300:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003308:	fa91 f1a1 	rbit	r1, r1
 800330c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003310:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003314:	fab1 f181 	clz	r1, r1
 8003318:	b2c9      	uxtb	r1, r1
 800331a:	408b      	lsls	r3, r1
 800331c:	4991      	ldr	r1, [pc, #580]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e0f1      	b.n	8003508 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003328:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8083 	beq.w	800343c <HAL_RCC_OscConfig+0x538>
 8003336:	2301      	movs	r3, #1
 8003338:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003348:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003356:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	461a      	mov	r2, r3
 800335e:	2301      	movs	r3, #1
 8003360:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe fcc9 	bl	8001cf8 <HAL_GetTick>
 8003366:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336c:	f7fe fcc4 	bl	8001cf8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d902      	bls.n	8003382 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	f000 bdc8 	b.w	8003f12 <HAL_RCC_OscConfig+0x100e>
 8003382:	2302      	movs	r3, #2
 8003384:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003394:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b3f      	cmp	r3, #63	@ 0x3f
 80033a0:	d802      	bhi.n	80033a8 <HAL_RCC_OscConfig+0x4a4>
 80033a2:	4b70      	ldr	r3, [pc, #448]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	e013      	b.n	80033d0 <HAL_RCC_OscConfig+0x4cc>
 80033a8:	2302      	movs	r3, #2
 80033aa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80033ba:	2302      	movs	r3, #2
 80033bc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80033c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80033cc:	4b65      	ldr	r3, [pc, #404]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	2202      	movs	r2, #2
 80033d2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80033d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80033da:	fa92 f2a2 	rbit	r2, r2
 80033de:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80033e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80033e6:	fab2 f282 	clz	r2, r2
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	f042 0220 	orr.w	r2, r2, #32
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	f002 021f 	and.w	r2, r2, #31
 80033f6:	2101      	movs	r1, #1
 80033f8:	fa01 f202 	lsl.w	r2, r1, r2
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0b4      	beq.n	800336c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	4b58      	ldr	r3, [pc, #352]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800340a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	21f8      	movs	r1, #248	@ 0xf8
 8003418:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003420:	fa91 f1a1 	rbit	r1, r1
 8003424:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003428:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800342c:	fab1 f181 	clz	r1, r1
 8003430:	b2c9      	uxtb	r1, r1
 8003432:	408b      	lsls	r3, r1
 8003434:	494b      	ldr	r1, [pc, #300]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
 800343a:	e065      	b.n	8003508 <HAL_RCC_OscConfig+0x604>
 800343c:	2301      	movs	r3, #1
 800343e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800344e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800345c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	461a      	mov	r2, r3
 8003464:	2300      	movs	r3, #0
 8003466:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe fc46 	bl	8001cf8 <HAL_GetTick>
 800346c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003472:	f7fe fc41 	bl	8001cf8 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d902      	bls.n	8003488 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	f000 bd45 	b.w	8003f12 <HAL_RCC_OscConfig+0x100e>
 8003488:	2302      	movs	r3, #2
 800348a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800349a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80034a6:	d802      	bhi.n	80034ae <HAL_RCC_OscConfig+0x5aa>
 80034a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	e013      	b.n	80034d6 <HAL_RCC_OscConfig+0x5d2>
 80034ae:	2302      	movs	r3, #2
 80034b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80034c0:	2302      	movs	r3, #2
 80034c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80034c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80034d2:	4b24      	ldr	r3, [pc, #144]	@ (8003564 <HAL_RCC_OscConfig+0x660>)
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	2202      	movs	r2, #2
 80034d8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80034dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80034e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80034ec:	fab2 f282 	clz	r2, r2
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	f042 0220 	orr.w	r2, r2, #32
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f002 021f 	and.w	r2, r2, #31
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1b4      	bne.n	8003472 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8115 	beq.w	8003748 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d07e      	beq.n	800362c <HAL_RCC_OscConfig+0x728>
 800352e:	2301      	movs	r3, #1
 8003530:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_RCC_OscConfig+0x664>)
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	461a      	mov	r2, r3
 8003554:	2301      	movs	r3, #1
 8003556:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003558:	f7fe fbce 	bl	8001cf8 <HAL_GetTick>
 800355c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003560:	e00f      	b.n	8003582 <HAL_RCC_OscConfig+0x67e>
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800356c:	f7fe fbc4 	bl	8001cf8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d902      	bls.n	8003582 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	f000 bcc8 	b.w	8003f12 <HAL_RCC_OscConfig+0x100e>
 8003582:	2302      	movs	r3, #2
 8003584:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003598:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800359c:	2202      	movs	r2, #2
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	fa93 f2a3 	rbit	r2, r3
 80035ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80035c0:	2202      	movs	r2, #2
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	fa93 f2a3 	rbit	r2, r3
 80035d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80035da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035dc:	4bb0      	ldr	r3, [pc, #704]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 80035de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80035e8:	2102      	movs	r1, #2
 80035ea:	6019      	str	r1, [r3, #0]
 80035ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f1a3 	rbit	r1, r3
 80035fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003602:	6019      	str	r1, [r3, #0]
  return result;
 8003604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003608:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0a0      	beq.n	800356c <HAL_RCC_OscConfig+0x668>
 800362a:	e08d      	b.n	8003748 <HAL_RCC_OscConfig+0x844>
 800362c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003630:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fa93 f2a3 	rbit	r2, r3
 8003646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800364e:	601a      	str	r2, [r3, #0]
  return result;
 8003650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003654:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003658:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	4b90      	ldr	r3, [pc, #576]	@ (80038a4 <HAL_RCC_OscConfig+0x9a0>)
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	461a      	mov	r2, r3
 800366a:	2300      	movs	r3, #0
 800366c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366e:	f7fe fb43 	bl	8001cf8 <HAL_GetTick>
 8003672:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003676:	e00a      	b.n	800368e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003678:	f7fe fb3e 	bl	8001cf8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d902      	bls.n	800368e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	f000 bc42 	b.w	8003f12 <HAL_RCC_OscConfig+0x100e>
 800368e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003692:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003696:	2202      	movs	r2, #2
 8003698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	fa93 f2a3 	rbit	r2, r3
 80036a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80036ba:	2202      	movs	r2, #2
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80036de:	2202      	movs	r2, #2
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	fa93 f2a3 	rbit	r2, r3
 80036f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80036f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fa:	4b69      	ldr	r3, [pc, #420]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 80036fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003702:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003706:	2102      	movs	r1, #2
 8003708:	6019      	str	r1, [r3, #0]
 800370a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	fa93 f1a3 	rbit	r1, r3
 8003718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003720:	6019      	str	r1, [r3, #0]
  return result;
 8003722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003726:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	fab3 f383 	clz	r3, r3
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2101      	movs	r1, #1
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d197      	bne.n	8003678 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 819e 	beq.w	8003a9a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003764:	4b4e      	ldr	r3, [pc, #312]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d116      	bne.n	800379e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003770:	4b4b      	ldr	r3, [pc, #300]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	4a4a      	ldr	r2, [pc, #296]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377a:	61d3      	str	r3, [r2, #28]
 800377c:	4b48      	ldr	r3, [pc, #288]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003788:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003792:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003796:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003798:	2301      	movs	r3, #1
 800379a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	4b42      	ldr	r3, [pc, #264]	@ (80038a8 <HAL_RCC_OscConfig+0x9a4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d11a      	bne.n	80037e0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037aa:	4b3f      	ldr	r3, [pc, #252]	@ (80038a8 <HAL_RCC_OscConfig+0x9a4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a3e      	ldr	r2, [pc, #248]	@ (80038a8 <HAL_RCC_OscConfig+0x9a4>)
 80037b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b6:	f7fe fa9f 	bl	8001cf8 <HAL_GetTick>
 80037ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037be:	e009      	b.n	80037d4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c0:	f7fe fa9a 	bl	8001cf8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b64      	cmp	r3, #100	@ 0x64
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e39e      	b.n	8003f12 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b34      	ldr	r3, [pc, #208]	@ (80038a8 <HAL_RCC_OscConfig+0x9a4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ef      	beq.n	80037c0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d106      	bne.n	80037fe <HAL_RCC_OscConfig+0x8fa>
 80037f0:	4b2b      	ldr	r3, [pc, #172]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a2a      	ldr	r2, [pc, #168]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6213      	str	r3, [r2, #32]
 80037fc:	e035      	b.n	800386a <HAL_RCC_OscConfig+0x966>
 80037fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003802:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x924>
 800380e:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4a23      	ldr	r2, [pc, #140]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6213      	str	r3, [r2, #32]
 800381a:	4b21      	ldr	r3, [pc, #132]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4a20      	ldr	r2, [pc, #128]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	6213      	str	r3, [r2, #32]
 8003826:	e020      	b.n	800386a <HAL_RCC_OscConfig+0x966>
 8003828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b05      	cmp	r3, #5
 8003836:	d10c      	bne.n	8003852 <HAL_RCC_OscConfig+0x94e>
 8003838:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4a18      	ldr	r2, [pc, #96]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 800383e:	f043 0304 	orr.w	r3, r3, #4
 8003842:	6213      	str	r3, [r2, #32]
 8003844:	4b16      	ldr	r3, [pc, #88]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4a15      	ldr	r2, [pc, #84]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	6213      	str	r3, [r2, #32]
 8003850:	e00b      	b.n	800386a <HAL_RCC_OscConfig+0x966>
 8003852:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	6213      	str	r3, [r2, #32]
 800385e:	4b10      	ldr	r3, [pc, #64]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <HAL_RCC_OscConfig+0x99c>)
 8003864:	f023 0304 	bic.w	r3, r3, #4
 8003868:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800386a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8087 	beq.w	800398a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387c:	f7fe fa3c 	bl	8001cf8 <HAL_GetTick>
 8003880:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003884:	e012      	b.n	80038ac <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fe fa37 	bl	8001cf8 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d908      	bls.n	80038ac <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e339      	b.n	8003f12 <HAL_RCC_OscConfig+0x100e>
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	10908120 	.word	0x10908120
 80038a8:	40007000 	.word	0x40007000
 80038ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80038b4:	2202      	movs	r2, #2
 80038b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	fa93 f2a3 	rbit	r2, r3
 80038c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80038d8:	2202      	movs	r2, #2
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	fa93 f2a3 	rbit	r2, r3
 80038ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80038f2:	601a      	str	r2, [r3, #0]
  return result;
 80038f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80038fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <HAL_RCC_OscConfig+0xa10>
 800390e:	4b98      	ldr	r3, [pc, #608]	@ (8003b70 <HAL_RCC_OscConfig+0xc6c>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	e013      	b.n	800393c <HAL_RCC_OscConfig+0xa38>
 8003914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003918:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800391c:	2202      	movs	r2, #2
 800391e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003924:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	fa93 f2a3 	rbit	r2, r3
 800392e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003932:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	4b8d      	ldr	r3, [pc, #564]	@ (8003b70 <HAL_RCC_OscConfig+0xc6c>)
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003940:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003944:	2102      	movs	r1, #2
 8003946:	6011      	str	r1, [r2, #0]
 8003948:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800394c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	fa92 f1a2 	rbit	r1, r2
 8003956:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800395a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800395e:	6011      	str	r1, [r2, #0]
  return result;
 8003960:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003964:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	fab2 f282 	clz	r2, r2
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	f002 021f 	and.w	r2, r2, #31
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f202 	lsl.w	r2, r1, r2
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	f43f af7f 	beq.w	8003886 <HAL_RCC_OscConfig+0x982>
 8003988:	e07d      	b.n	8003a86 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fe f9b5 	bl	8001cf8 <HAL_GetTick>
 800398e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003992:	e00b      	b.n	80039ac <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003994:	f7fe f9b0 	bl	8001cf8 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e2b2      	b.n	8003f12 <HAL_RCC_OscConfig+0x100e>
 80039ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80039b4:	2202      	movs	r2, #2
 80039b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039bc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	fa93 f2a3 	rbit	r2, r3
 80039c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ca:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80039d8:	2202      	movs	r2, #2
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	fa93 f2a3 	rbit	r2, r3
 80039ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80039f2:	601a      	str	r2, [r3, #0]
  return result;
 80039f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80039fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <HAL_RCC_OscConfig+0xb10>
 8003a0e:	4b58      	ldr	r3, [pc, #352]	@ (8003b70 <HAL_RCC_OscConfig+0xc6c>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	e013      	b.n	8003a3c <HAL_RCC_OscConfig+0xb38>
 8003a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a18:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a24:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	fa93 f2a3 	rbit	r2, r3
 8003a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a32:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	4b4d      	ldr	r3, [pc, #308]	@ (8003b70 <HAL_RCC_OscConfig+0xc6c>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a40:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003a44:	2102      	movs	r1, #2
 8003a46:	6011      	str	r1, [r2, #0]
 8003a48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a4c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	fa92 f1a2 	rbit	r1, r2
 8003a56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a5a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003a5e:	6011      	str	r1, [r2, #0]
  return result;
 8003a60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a64:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	fab2 f282 	clz	r2, r2
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	f002 021f 	and.w	r2, r2, #31
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d186      	bne.n	8003994 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a86:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8e:	4b38      	ldr	r3, [pc, #224]	@ (8003b70 <HAL_RCC_OscConfig+0xc6c>)
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	4a37      	ldr	r2, [pc, #220]	@ (8003b70 <HAL_RCC_OscConfig+0xc6c>)
 8003a94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8232 	beq.w	8003f10 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aac:	4b30      	ldr	r3, [pc, #192]	@ (8003b70 <HAL_RCC_OscConfig+0xc6c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	f000 8201 	beq.w	8003ebc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	f040 8157 	bne.w	8003d7a <HAL_RCC_OscConfig+0xe76>
 8003acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003ad4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ade:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	fa93 f2a3 	rbit	r2, r3
 8003ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003af0:	601a      	str	r2, [r3, #0]
  return result;
 8003af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003afa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afc:	fab3 f383 	clz	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b06:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2300      	movs	r3, #0
 8003b10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fe f8f1 	bl	8001cf8 <HAL_GetTick>
 8003b16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1a:	e009      	b.n	8003b30 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fe f8ec 	bl	8001cf8 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1f0      	b.n	8003f12 <HAL_RCC_OscConfig+0x100e>
 8003b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b34:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003b38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b42:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	fa93 f2a3 	rbit	r2, r3
 8003b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b50:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003b54:	601a      	str	r2, [r3, #0]
  return result;
 8003b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b5a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003b5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b60:	fab3 f383 	clz	r3, r3
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b68:	d804      	bhi.n	8003b74 <HAL_RCC_OscConfig+0xc70>
 8003b6a:	4b01      	ldr	r3, [pc, #4]	@ (8003b70 <HAL_RCC_OscConfig+0xc6c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	e029      	b.n	8003bc4 <HAL_RCC_OscConfig+0xcc0>
 8003b70:	40021000 	.word	0x40021000
 8003b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b78:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b86:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	fa93 f2a3 	rbit	r2, r3
 8003b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b94:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003ba2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	fa93 f2a3 	rbit	r2, r3
 8003bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bba:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	4bc3      	ldr	r3, [pc, #780]	@ (8003ed0 <HAL_RCC_OscConfig+0xfcc>)
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bc8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003bcc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bd6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	fa92 f1a2 	rbit	r1, r2
 8003be0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003be4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003be8:	6011      	str	r1, [r2, #0]
  return result;
 8003bea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	fab2 f282 	clz	r2, r2
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	f042 0220 	orr.w	r2, r2, #32
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	f002 021f 	and.w	r2, r2, #31
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d185      	bne.n	8003b1c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c10:	4baf      	ldr	r3, [pc, #700]	@ (8003ed0 <HAL_RCC_OscConfig+0xfcc>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	430b      	orrs	r3, r1
 8003c32:	49a7      	ldr	r1, [pc, #668]	@ (8003ed0 <HAL_RCC_OscConfig+0xfcc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
 8003c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003c40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	fa93 f2a3 	rbit	r2, r3
 8003c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c58:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003c5c:	601a      	str	r2, [r3, #0]
  return result;
 8003c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c62:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003c66:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c68:	fab3 f383 	clz	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe f83b 	bl	8001cf8 <HAL_GetTick>
 8003c82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c86:	e009      	b.n	8003c9c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe f836 	bl	8001cf8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e13a      	b.n	8003f12 <HAL_RCC_OscConfig+0x100e>
 8003c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003ca4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	fa93 f2a3 	rbit	r2, r3
 8003cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003cc0:	601a      	str	r2, [r3, #0]
  return result;
 8003cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003cca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cd4:	d802      	bhi.n	8003cdc <HAL_RCC_OscConfig+0xdd8>
 8003cd6:	4b7e      	ldr	r3, [pc, #504]	@ (8003ed0 <HAL_RCC_OscConfig+0xfcc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	e027      	b.n	8003d2c <HAL_RCC_OscConfig+0xe28>
 8003cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003ce4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cee:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	fa93 f2a3 	rbit	r2, r3
 8003cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d06:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003d0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d14:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	fa93 f2a3 	rbit	r2, r3
 8003d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d22:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	4b69      	ldr	r3, [pc, #420]	@ (8003ed0 <HAL_RCC_OscConfig+0xfcc>)
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d30:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003d34:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d38:	6011      	str	r1, [r2, #0]
 8003d3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d3e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	fa92 f1a2 	rbit	r1, r2
 8003d48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d4c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003d50:	6011      	str	r1, [r2, #0]
  return result;
 8003d52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d56:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	fab2 f282 	clz	r2, r2
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	f042 0220 	orr.w	r2, r2, #32
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	f002 021f 	and.w	r2, r2, #31
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d087      	beq.n	8003c88 <HAL_RCC_OscConfig+0xd84>
 8003d78:	e0ca      	b.n	8003f10 <HAL_RCC_OscConfig+0x100c>
 8003d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003d82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	fa93 f2a3 	rbit	r2, r3
 8003d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d9e:	601a      	str	r2, [r3, #0]
  return result;
 8003da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003da8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	fab3 f383 	clz	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003db4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fd ff9a 	bl	8001cf8 <HAL_GetTick>
 8003dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc8:	e009      	b.n	8003dde <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dca:	f7fd ff95 	bl	8001cf8 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e099      	b.n	8003f12 <HAL_RCC_OscConfig+0x100e>
 8003dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003de6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	fa93 f2a3 	rbit	r2, r3
 8003dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003e02:	601a      	str	r2, [r3, #0]
  return result;
 8003e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e08:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003e0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e16:	d802      	bhi.n	8003e1e <HAL_RCC_OscConfig+0xf1a>
 8003e18:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed0 <HAL_RCC_OscConfig+0xfcc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	e027      	b.n	8003e6e <HAL_RCC_OscConfig+0xf6a>
 8003e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e22:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003e26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e30:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	fa93 f2a3 	rbit	r2, r3
 8003e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e48:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003e4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e56:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	fa93 f2a3 	rbit	r2, r3
 8003e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e64:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	4b19      	ldr	r3, [pc, #100]	@ (8003ed0 <HAL_RCC_OscConfig+0xfcc>)
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e72:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003e76:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e7a:	6011      	str	r1, [r2, #0]
 8003e7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e80:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	fa92 f1a2 	rbit	r1, r2
 8003e8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e8e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003e92:	6011      	str	r1, [r2, #0]
  return result;
 8003e94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e98:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	fab2 f282 	clz	r2, r2
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	f042 0220 	orr.w	r2, r2, #32
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	f002 021f 	and.w	r2, r2, #31
 8003eae:	2101      	movs	r1, #1
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d187      	bne.n	8003dca <HAL_RCC_OscConfig+0xec6>
 8003eba:	e029      	b.n	8003f10 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d103      	bne.n	8003ed4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e020      	b.n	8003f12 <HAL_RCC_OscConfig+0x100e>
 8003ed0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	@ (8003f1c <HAL_RCC_OscConfig+0x1018>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003edc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003ee0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d10b      	bne.n	8003f0c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ef4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003ef8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000

08003f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b09e      	sub	sp, #120	@ 0x78
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e154      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f38:	4b89      	ldr	r3, [pc, #548]	@ (8004160 <HAL_RCC_ClockConfig+0x240>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d910      	bls.n	8003f68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b86      	ldr	r3, [pc, #536]	@ (8004160 <HAL_RCC_ClockConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 0207 	bic.w	r2, r3, #7
 8003f4e:	4984      	ldr	r1, [pc, #528]	@ (8004160 <HAL_RCC_ClockConfig+0x240>)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b82      	ldr	r3, [pc, #520]	@ (8004160 <HAL_RCC_ClockConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e13c      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b7b      	ldr	r3, [pc, #492]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4978      	ldr	r1, [pc, #480]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80cd 	beq.w	800412e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d137      	bne.n	800400c <HAL_RCC_ClockConfig+0xec>
 8003f9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8003fb4:	d802      	bhi.n	8003fbc <HAL_RCC_ClockConfig+0x9c>
 8003fb6:	4b6b      	ldr	r3, [pc, #428]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	e00f      	b.n	8003fdc <HAL_RCC_ClockConfig+0xbc>
 8003fbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fce:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fd8:	4b62      	ldr	r3, [pc, #392]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003fe0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fe4:	fa92 f2a2 	rbit	r2, r2
 8003fe8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003fea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fec:	fab2 f282 	clz	r2, r2
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	f042 0220 	orr.w	r2, r2, #32
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	f002 021f 	and.w	r2, r2, #31
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d171      	bne.n	80040ec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0ea      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d137      	bne.n	8004084 <HAL_RCC_ClockConfig+0x164>
 8004014:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004018:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004024:	fab3 f383 	clz	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b3f      	cmp	r3, #63	@ 0x3f
 800402c:	d802      	bhi.n	8004034 <HAL_RCC_ClockConfig+0x114>
 800402e:	4b4d      	ldr	r3, [pc, #308]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	e00f      	b.n	8004054 <HAL_RCC_ClockConfig+0x134>
 8004034:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004038:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800403c:	fa93 f3a3 	rbit	r3, r3
 8004040:	647b      	str	r3, [r7, #68]	@ 0x44
 8004042:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004046:	643b      	str	r3, [r7, #64]	@ 0x40
 8004048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004050:	4b44      	ldr	r3, [pc, #272]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004058:	63ba      	str	r2, [r7, #56]	@ 0x38
 800405a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800405c:	fa92 f2a2 	rbit	r2, r2
 8004060:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004062:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004064:	fab2 f282 	clz	r2, r2
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	f042 0220 	orr.w	r2, r2, #32
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	f002 021f 	and.w	r2, r2, #31
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f202 	lsl.w	r2, r1, r2
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d135      	bne.n	80040ec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0ae      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2c2>
 8004084:	2302      	movs	r3, #2
 8004086:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b3f      	cmp	r3, #63	@ 0x3f
 800409a:	d802      	bhi.n	80040a2 <HAL_RCC_ClockConfig+0x182>
 800409c:	4b31      	ldr	r3, [pc, #196]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	e00d      	b.n	80040be <HAL_RCC_ClockConfig+0x19e>
 80040a2:	2302      	movs	r3, #2
 80040a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	fa93 f3a3 	rbit	r3, r3
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ae:	2302      	movs	r3, #2
 80040b0:	623b      	str	r3, [r7, #32]
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	2202      	movs	r2, #2
 80040c0:	61ba      	str	r2, [r7, #24]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	fa92 f2a2 	rbit	r2, r2
 80040c8:	617a      	str	r2, [r7, #20]
  return result;
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	f002 021f 	and.w	r2, r2, #31
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f202 	lsl.w	r2, r1, r2
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e07a      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f023 0203 	bic.w	r2, r3, #3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	491a      	ldr	r1, [pc, #104]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040fe:	f7fd fdfb 	bl	8001cf8 <HAL_GetTick>
 8004102:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004104:	e00a      	b.n	800411c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004106:	f7fd fdf7 	bl	8001cf8 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e062      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411c:	4b11      	ldr	r3, [pc, #68]	@ (8004164 <HAL_RCC_ClockConfig+0x244>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 020c 	and.w	r2, r3, #12
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	429a      	cmp	r2, r3
 800412c:	d1eb      	bne.n	8004106 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800412e:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <HAL_RCC_ClockConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d215      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413c:	4b08      	ldr	r3, [pc, #32]	@ (8004160 <HAL_RCC_ClockConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 0207 	bic.w	r2, r3, #7
 8004144:	4906      	ldr	r1, [pc, #24]	@ (8004160 <HAL_RCC_ClockConfig+0x240>)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	4313      	orrs	r3, r2
 800414a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414c:	4b04      	ldr	r3, [pc, #16]	@ (8004160 <HAL_RCC_ClockConfig+0x240>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d006      	beq.n	8004168 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e041      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2c2>
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000
 8004164:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004174:	4b1d      	ldr	r3, [pc, #116]	@ (80041ec <HAL_RCC_ClockConfig+0x2cc>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	491a      	ldr	r1, [pc, #104]	@ (80041ec <HAL_RCC_ClockConfig+0x2cc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004192:	4b16      	ldr	r3, [pc, #88]	@ (80041ec <HAL_RCC_ClockConfig+0x2cc>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4912      	ldr	r1, [pc, #72]	@ (80041ec <HAL_RCC_ClockConfig+0x2cc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80041a6:	f000 f829 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041aa:	4601      	mov	r1, r0
 80041ac:	4b0f      	ldr	r3, [pc, #60]	@ (80041ec <HAL_RCC_ClockConfig+0x2cc>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b4:	22f0      	movs	r2, #240	@ 0xf0
 80041b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	fa92 f2a2 	rbit	r2, r2
 80041be:	60fa      	str	r2, [r7, #12]
  return result;
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	fab2 f282 	clz	r2, r2
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	40d3      	lsrs	r3, r2
 80041ca:	4a09      	ldr	r2, [pc, #36]	@ (80041f0 <HAL_RCC_ClockConfig+0x2d0>)
 80041cc:	5cd3      	ldrb	r3, [r2, r3]
 80041ce:	fa21 f303 	lsr.w	r3, r1, r3
 80041d2:	4a08      	ldr	r2, [pc, #32]	@ (80041f4 <HAL_RCC_ClockConfig+0x2d4>)
 80041d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80041d6:	4b08      	ldr	r3, [pc, #32]	@ (80041f8 <HAL_RCC_ClockConfig+0x2d8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fd fd48 	bl	8001c70 <HAL_InitTick>
  
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3778      	adds	r7, #120	@ 0x78
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	08007460 	.word	0x08007460
 80041f4:	20000000 	.word	0x20000000
 80041f8:	20000468 	.word	0x20000468

080041fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004216:	4b1e      	ldr	r3, [pc, #120]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x94>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b04      	cmp	r3, #4
 8004224:	d002      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x30>
 8004226:	2b08      	cmp	r3, #8
 8004228:	d003      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x36>
 800422a:	e026      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800422c:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800422e:	613b      	str	r3, [r7, #16]
      break;
 8004230:	e026      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	0c9b      	lsrs	r3, r3, #18
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	4a17      	ldr	r2, [pc, #92]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x9c>)
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004240:	4b13      	ldr	r3, [pc, #76]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x94>)
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	4a14      	ldr	r2, [pc, #80]	@ (800429c <HAL_RCC_GetSysClockFreq+0xa0>)
 800424a:	5cd3      	ldrb	r3, [r2, r3]
 800424c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004258:	4a0e      	ldr	r2, [pc, #56]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	e004      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a0c      	ldr	r2, [pc, #48]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	613b      	str	r3, [r7, #16]
      break;
 8004278:	e002      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800427a:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800427c:	613b      	str	r3, [r7, #16]
      break;
 800427e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004280:	693b      	ldr	r3, [r7, #16]
}
 8004282:	4618      	mov	r0, r3
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	007a1200 	.word	0x007a1200
 8004298:	08007478 	.word	0x08007478
 800429c:	08007488 	.word	0x08007488
 80042a0:	003d0900 	.word	0x003d0900

080042a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a8:	4b03      	ldr	r3, [pc, #12]	@ (80042b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042aa:	681b      	ldr	r3, [r3, #0]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000000 	.word	0x20000000

080042bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80042c2:	f7ff ffef 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042c6:	4601      	mov	r1, r0
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042d0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80042d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	fa92 f2a2 	rbit	r2, r2
 80042dc:	603a      	str	r2, [r7, #0]
  return result;
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	fab2 f282 	clz	r2, r2
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	40d3      	lsrs	r3, r2
 80042e8:	4a04      	ldr	r2, [pc, #16]	@ (80042fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000
 80042fc:	08007470 	.word	0x08007470

08004300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004306:	f7ff ffcd 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 800430a:	4601      	mov	r1, r0
 800430c:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004314:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004318:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	fa92 f2a2 	rbit	r2, r2
 8004320:	603a      	str	r2, [r7, #0]
  return result;
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	fab2 f282 	clz	r2, r2
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	40d3      	lsrs	r3, r2
 800432c:	4a04      	ldr	r2, [pc, #16]	@ (8004340 <HAL_RCC_GetPCLK2Freq+0x40>)
 800432e:	5cd3      	ldrb	r3, [r2, r3]
 8004330:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	08007470 	.word	0x08007470

08004344 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b092      	sub	sp, #72	@ 0x48
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004354:	2300      	movs	r3, #0
 8004356:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80d2 	beq.w	800450c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004368:	4b4d      	ldr	r3, [pc, #308]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10e      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004374:	4b4a      	ldr	r3, [pc, #296]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	4a49      	ldr	r2, [pc, #292]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800437a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800437e:	61d3      	str	r3, [r2, #28]
 8004380:	4b47      	ldr	r3, [pc, #284]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004392:	4b44      	ldr	r3, [pc, #272]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d118      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800439e:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a40      	ldr	r2, [pc, #256]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043aa:	f7fd fca5 	bl	8001cf8 <HAL_GetTick>
 80043ae:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b0:	e008      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b2:	f7fd fca1 	bl	8001cf8 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b64      	cmp	r3, #100	@ 0x64
 80043be:	d901      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e167      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c4:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043d0:	4b33      	ldr	r3, [pc, #204]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8082 	beq.w	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d07a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043f0:	4b2b      	ldr	r3, [pc, #172]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	fa93 f3a3 	rbit	r3, r3
 8004406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	4b25      	ldr	r3, [pc, #148]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	461a      	mov	r2, r3
 800441a:	2301      	movs	r3, #1
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004422:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800442c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	4b1c      	ldr	r3, [pc, #112]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	461a      	mov	r2, r3
 800443e:	2300      	movs	r3, #0
 8004440:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004442:	4a17      	ldr	r2, [pc, #92]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004446:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d049      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fd fc51 	bl	8001cf8 <HAL_GetTick>
 8004456:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004458:	e00a      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445a:	f7fd fc4d 	bl	8001cf8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004468:	4293      	cmp	r3, r2
 800446a:	d901      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e111      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004470:	2302      	movs	r3, #2
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	627b      	str	r3, [r7, #36]	@ 0x24
 800447c:	2302      	movs	r3, #2
 800447e:	623b      	str	r3, [r7, #32]
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	61fb      	str	r3, [r7, #28]
  return result;
 8004488:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d108      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x168>
 800449a:	4b01      	ldr	r3, [pc, #4]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	e00d      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80044a0:	40021000 	.word	0x40021000
 80044a4:	40007000 	.word	0x40007000
 80044a8:	10908100 	.word	0x10908100
 80044ac:	2302      	movs	r3, #2
 80044ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	4b78      	ldr	r3, [pc, #480]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	2202      	movs	r2, #2
 80044be:	613a      	str	r2, [r7, #16]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	fa92 f2a2 	rbit	r2, r2
 80044c6:	60fa      	str	r2, [r7, #12]
  return result;
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	fab2 f282 	clz	r2, r2
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	f002 021f 	and.w	r2, r2, #31
 80044da:	2101      	movs	r1, #1
 80044dc:	fa01 f202 	lsl.w	r2, r1, r2
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0b9      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80044e6:	4b6d      	ldr	r3, [pc, #436]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	496a      	ldr	r1, [pc, #424]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004500:	4b66      	ldr	r3, [pc, #408]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	4a65      	ldr	r2, [pc, #404]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004518:	4b60      	ldr	r3, [pc, #384]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451c:	f023 0203 	bic.w	r2, r3, #3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	495d      	ldr	r1, [pc, #372]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004526:	4313      	orrs	r3, r2
 8004528:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004536:	4b59      	ldr	r3, [pc, #356]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4956      	ldr	r1, [pc, #344]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004544:	4313      	orrs	r3, r2
 8004546:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004554:	4b51      	ldr	r3, [pc, #324]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	494e      	ldr	r1, [pc, #312]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004562:	4313      	orrs	r3, r2
 8004564:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004572:	4b4a      	ldr	r3, [pc, #296]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	f023 0210 	bic.w	r2, r3, #16
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	4947      	ldr	r1, [pc, #284]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004580:	4313      	orrs	r3, r2
 8004582:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004590:	4b42      	ldr	r3, [pc, #264]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459c:	493f      	ldr	r1, [pc, #252]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045ae:	4b3b      	ldr	r3, [pc, #236]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b2:	f023 0220 	bic.w	r2, r3, #32
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4938      	ldr	r1, [pc, #224]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045cc:	4b33      	ldr	r3, [pc, #204]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	4930      	ldr	r1, [pc, #192]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045ea:	4b2c      	ldr	r3, [pc, #176]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	4929      	ldr	r1, [pc, #164]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004608:	4b24      	ldr	r3, [pc, #144]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	4921      	ldr	r1, [pc, #132]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004616:	4313      	orrs	r3, r2
 8004618:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004626:	4b1d      	ldr	r3, [pc, #116]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	491a      	ldr	r1, [pc, #104]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004634:	4313      	orrs	r3, r2
 8004636:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004644:	4b15      	ldr	r3, [pc, #84]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	4912      	ldr	r1, [pc, #72]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004652:	4313      	orrs	r3, r2
 8004654:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004662:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	490b      	ldr	r1, [pc, #44]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004670:	4313      	orrs	r3, r2
 8004672:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800468c:	4903      	ldr	r1, [pc, #12]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800468e:	4313      	orrs	r3, r2
 8004690:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3748      	adds	r7, #72	@ 0x48
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000

080046a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e09d      	b.n	80047ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046c2:	d009      	beq.n	80046d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	61da      	str	r2, [r3, #28]
 80046ca:	e005      	b.n	80046d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fd f834 	bl	8001760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800470e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004718:	d902      	bls.n	8004720 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e002      	b.n	8004726 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004724:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800472e:	d007      	beq.n	8004740 <HAL_SPI_Init+0xa0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004738:	d002      	beq.n	8004740 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004782:	ea42 0103 	orr.w	r1, r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	0c1b      	lsrs	r3, r3, #16
 800479c:	f003 0204 	and.w	r2, r3, #4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80047bc:	ea42 0103 	orr.w	r1, r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b08a      	sub	sp, #40	@ 0x28
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004804:	2301      	movs	r3, #1
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_SPI_TransmitReceive+0x26>
 8004818:	2302      	movs	r3, #2
 800481a:	e20a      	b.n	8004c32 <HAL_SPI_TransmitReceive+0x43c>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004824:	f7fd fa68 	bl	8001cf8 <HAL_GetTick>
 8004828:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004830:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004838:	887b      	ldrh	r3, [r7, #2]
 800483a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800483c:	887b      	ldrh	r3, [r7, #2]
 800483e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004840:	7efb      	ldrb	r3, [r7, #27]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d00e      	beq.n	8004864 <HAL_SPI_TransmitReceive+0x6e>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800484c:	d106      	bne.n	800485c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <HAL_SPI_TransmitReceive+0x66>
 8004856:	7efb      	ldrb	r3, [r7, #27]
 8004858:	2b04      	cmp	r3, #4
 800485a:	d003      	beq.n	8004864 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800485c:	2302      	movs	r3, #2
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004862:	e1e0      	b.n	8004c26 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <HAL_SPI_TransmitReceive+0x80>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_SPI_TransmitReceive+0x80>
 8004870:	887b      	ldrh	r3, [r7, #2]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800487c:	e1d3      	b.n	8004c26 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b04      	cmp	r3, #4
 8004888:	d003      	beq.n	8004892 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2205      	movs	r2, #5
 800488e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	887a      	ldrh	r2, [r7, #2]
 80048a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	887a      	ldrh	r2, [r7, #2]
 80048aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	887a      	ldrh	r2, [r7, #2]
 80048be:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048d4:	d802      	bhi.n	80048dc <HAL_SPI_TransmitReceive+0xe6>
 80048d6:	8a3b      	ldrh	r3, [r7, #16]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d908      	bls.n	80048ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	e007      	b.n	80048fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004908:	2b40      	cmp	r3, #64	@ 0x40
 800490a:	d007      	beq.n	800491c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800491a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004924:	f240 8081 	bls.w	8004a2a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_SPI_TransmitReceive+0x140>
 8004930:	8a7b      	ldrh	r3, [r7, #18]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d16d      	bne.n	8004a12 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	881a      	ldrh	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004946:	1c9a      	adds	r2, r3, #2
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495a:	e05a      	b.n	8004a12 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b02      	cmp	r3, #2
 8004968:	d11b      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x1ac>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d016      	beq.n	80049a2 <HAL_SPI_TransmitReceive+0x1ac>
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	2b01      	cmp	r3, #1
 8004978:	d113      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	881a      	ldrh	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498a:	1c9a      	adds	r2, r3, #2
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d11c      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x1f4>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d016      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	b292      	uxth	r2, r2
 80049c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	1c9a      	adds	r2, r3, #2
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049e6:	2301      	movs	r3, #1
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049ea:	f7fd f985 	bl	8001cf8 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d80b      	bhi.n	8004a12 <HAL_SPI_TransmitReceive+0x21c>
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d007      	beq.n	8004a12 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004a10:	e109      	b.n	8004c26 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d19f      	bne.n	800495c <HAL_SPI_TransmitReceive+0x166>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d199      	bne.n	800495c <HAL_SPI_TransmitReceive+0x166>
 8004a28:	e0e3      	b.n	8004bf2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_SPI_TransmitReceive+0x244>
 8004a32:	8a7b      	ldrh	r3, [r7, #18]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	f040 80cf 	bne.w	8004bd8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d912      	bls.n	8004a6a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a48:	881a      	ldrh	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a54:	1c9a      	adds	r2, r3, #2
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b02      	subs	r3, #2
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a68:	e0b6      	b.n	8004bd8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a90:	e0a2      	b.n	8004bd8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d134      	bne.n	8004b0a <HAL_SPI_TransmitReceive+0x314>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d02f      	beq.n	8004b0a <HAL_SPI_TransmitReceive+0x314>
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d12c      	bne.n	8004b0a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d912      	bls.n	8004ae0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aca:	1c9a      	adds	r2, r3, #2
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b02      	subs	r3, #2
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ade:	e012      	b.n	8004b06 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d148      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x3b4>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d042      	beq.n	8004baa <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d923      	bls.n	8004b78 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	b292      	uxth	r2, r2
 8004b3c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	1c9a      	adds	r2, r3, #2
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b02      	subs	r3, #2
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d81f      	bhi.n	8004ba6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	e016      	b.n	8004ba6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f103 020c 	add.w	r2, r3, #12
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004baa:	f7fd f8a5 	bl	8001cf8 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d803      	bhi.n	8004bc2 <HAL_SPI_TransmitReceive+0x3cc>
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d102      	bne.n	8004bc8 <HAL_SPI_TransmitReceive+0x3d2>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d107      	bne.n	8004bd8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004bd6:	e026      	b.n	8004c26 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f47f af57 	bne.w	8004a92 <HAL_SPI_TransmitReceive+0x29c>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f47f af50 	bne.w	8004a92 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f93e 	bl	8004e78 <SPI_EndRxTxTransaction>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1c:	e003      	b.n	8004c26 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3728      	adds	r7, #40	@ 0x28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c4c:	f7fd f854 	bl	8001cf8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	4413      	add	r3, r2
 8004c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c5c:	f7fd f84c 	bl	8001cf8 <HAL_GetTick>
 8004c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c62:	4b39      	ldr	r3, [pc, #228]	@ (8004d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	015b      	lsls	r3, r3, #5
 8004c68:	0d1b      	lsrs	r3, r3, #20
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c72:	e054      	b.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d050      	beq.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c7c:	f7fd f83c 	bl	8001cf8 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d902      	bls.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d13d      	bne.n	8004d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004caa:	d111      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb4:	d004      	beq.n	8004cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cbe:	d107      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd8:	d10f      	bne.n	8004cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e017      	b.n	8004d3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2301      	moveq	r3, #1
 8004d30:	2300      	movne	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d19b      	bne.n	8004c74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000000 	.word	0x20000000

08004d4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	@ 0x28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d5e:	f7fc ffcb 	bl	8001cf8 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004d6e:	f7fc ffc3 	bl	8001cf8 <HAL_GetTick>
 8004d72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	00da      	lsls	r2, r3, #3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	0d1b      	lsrs	r3, r3, #20
 8004d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d94:	e060      	b.n	8004e58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d9c:	d107      	bne.n	8004dae <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d050      	beq.n	8004e58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004db6:	f7fc ff9f 	bl	8001cf8 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d902      	bls.n	8004dcc <SPI_WaitFifoStateUntilTimeout+0x80>
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d13d      	bne.n	8004e48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004de4:	d111      	bne.n	8004e0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dee:	d004      	beq.n	8004dfa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df8:	d107      	bne.n	8004e0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e12:	d10f      	bne.n	8004e34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e010      	b.n	8004e6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d196      	bne.n	8004d96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3728      	adds	r7, #40	@ 0x28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000000 	.word	0x20000000

08004e78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7ff ff5b 	bl	8004d4c <SPI_WaitFifoStateUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea0:	f043 0220 	orr.w	r2, r3, #32
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e027      	b.n	8004efc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2180      	movs	r1, #128	@ 0x80
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f7ff fec0 	bl	8004c3c <SPI_WaitFlagStateUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e014      	b.n	8004efc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff ff34 	bl	8004d4c <SPI_WaitFifoStateUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eee:	f043 0220 	orr.w	r2, r3, #32
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e000      	b.n	8004efc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e049      	b.n	8004faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc fc5a 	bl	80017e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f000 fdc4 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d001      	beq.n	8004fcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e042      	b.n	8005052 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a21      	ldr	r2, [pc, #132]	@ (8005060 <HAL_TIM_Base_Start+0xac>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d018      	beq.n	8005010 <HAL_TIM_Base_Start+0x5c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe6:	d013      	beq.n	8005010 <HAL_TIM_Base_Start+0x5c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1d      	ldr	r2, [pc, #116]	@ (8005064 <HAL_TIM_Base_Start+0xb0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00e      	beq.n	8005010 <HAL_TIM_Base_Start+0x5c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8005068 <HAL_TIM_Base_Start+0xb4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_TIM_Base_Start+0x5c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1a      	ldr	r2, [pc, #104]	@ (800506c <HAL_TIM_Base_Start+0xb8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIM_Base_Start+0x5c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a19      	ldr	r2, [pc, #100]	@ (8005070 <HAL_TIM_Base_Start+0xbc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d115      	bne.n	800503c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	4b17      	ldr	r3, [pc, #92]	@ (8005074 <HAL_TIM_Base_Start+0xc0>)
 8005018:	4013      	ands	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b06      	cmp	r3, #6
 8005020:	d015      	beq.n	800504e <HAL_TIM_Base_Start+0x9a>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005028:	d011      	beq.n	800504e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503a:	e008      	b.n	800504e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e000      	b.n	8005050 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40013400 	.word	0x40013400
 8005070:	40014000 	.word	0x40014000
 8005074:	00010007 	.word	0x00010007

08005078 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e049      	b.n	800511e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc fbc0 	bl	8001824 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4619      	mov	r1, r3
 80050b6:	4610      	mov	r0, r2
 80050b8:	f000 fd0a 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <HAL_TIM_IC_Start_IT+0x1e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005142:	b2db      	uxtb	r3, r3
 8005144:	e023      	b.n	800518e <HAL_TIM_IC_Start_IT+0x66>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_IT+0x2e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005152:	b2db      	uxtb	r3, r3
 8005154:	e01b      	b.n	800518e <HAL_TIM_IC_Start_IT+0x66>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d104      	bne.n	8005166 <HAL_TIM_IC_Start_IT+0x3e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005162:	b2db      	uxtb	r3, r3
 8005164:	e013      	b.n	800518e <HAL_TIM_IC_Start_IT+0x66>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d104      	bne.n	8005176 <HAL_TIM_IC_Start_IT+0x4e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005172:	b2db      	uxtb	r3, r3
 8005174:	e00b      	b.n	800518e <HAL_TIM_IC_Start_IT+0x66>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b10      	cmp	r3, #16
 800517a:	d104      	bne.n	8005186 <HAL_TIM_IC_Start_IT+0x5e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005182:	b2db      	uxtb	r3, r3
 8005184:	e003      	b.n	800518e <HAL_TIM_IC_Start_IT+0x66>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800518c:	b2db      	uxtb	r3, r3
 800518e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <HAL_TIM_IC_Start_IT+0x78>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800519c:	b2db      	uxtb	r3, r3
 800519e:	e013      	b.n	80051c8 <HAL_TIM_IC_Start_IT+0xa0>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d104      	bne.n	80051b0 <HAL_TIM_IC_Start_IT+0x88>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e00b      	b.n	80051c8 <HAL_TIM_IC_Start_IT+0xa0>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d104      	bne.n	80051c0 <HAL_TIM_IC_Start_IT+0x98>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e003      	b.n	80051c8 <HAL_TIM_IC_Start_IT+0xa0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80051ca:	7bbb      	ldrb	r3, [r7, #14]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d102      	bne.n	80051d6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80051d0:	7b7b      	ldrb	r3, [r7, #13]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d001      	beq.n	80051da <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e0d8      	b.n	800538c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <HAL_TIM_IC_Start_IT+0xc2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e8:	e023      	b.n	8005232 <HAL_TIM_IC_Start_IT+0x10a>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_IC_Start_IT+0xd2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f8:	e01b      	b.n	8005232 <HAL_TIM_IC_Start_IT+0x10a>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d104      	bne.n	800520a <HAL_TIM_IC_Start_IT+0xe2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005208:	e013      	b.n	8005232 <HAL_TIM_IC_Start_IT+0x10a>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b0c      	cmp	r3, #12
 800520e:	d104      	bne.n	800521a <HAL_TIM_IC_Start_IT+0xf2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005218:	e00b      	b.n	8005232 <HAL_TIM_IC_Start_IT+0x10a>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b10      	cmp	r3, #16
 800521e:	d104      	bne.n	800522a <HAL_TIM_IC_Start_IT+0x102>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005228:	e003      	b.n	8005232 <HAL_TIM_IC_Start_IT+0x10a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <HAL_TIM_IC_Start_IT+0x11a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005240:	e013      	b.n	800526a <HAL_TIM_IC_Start_IT+0x142>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b04      	cmp	r3, #4
 8005246:	d104      	bne.n	8005252 <HAL_TIM_IC_Start_IT+0x12a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005250:	e00b      	b.n	800526a <HAL_TIM_IC_Start_IT+0x142>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b08      	cmp	r3, #8
 8005256:	d104      	bne.n	8005262 <HAL_TIM_IC_Start_IT+0x13a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005260:	e003      	b.n	800526a <HAL_TIM_IC_Start_IT+0x142>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b0c      	cmp	r3, #12
 800526e:	d841      	bhi.n	80052f4 <HAL_TIM_IC_Start_IT+0x1cc>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <HAL_TIM_IC_Start_IT+0x150>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	080052ad 	.word	0x080052ad
 800527c:	080052f5 	.word	0x080052f5
 8005280:	080052f5 	.word	0x080052f5
 8005284:	080052f5 	.word	0x080052f5
 8005288:	080052bf 	.word	0x080052bf
 800528c:	080052f5 	.word	0x080052f5
 8005290:	080052f5 	.word	0x080052f5
 8005294:	080052f5 	.word	0x080052f5
 8005298:	080052d1 	.word	0x080052d1
 800529c:	080052f5 	.word	0x080052f5
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	080052f5 	.word	0x080052f5
 80052a8:	080052e3 	.word	0x080052e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0202 	orr.w	r2, r2, #2
 80052ba:	60da      	str	r2, [r3, #12]
      break;
 80052bc:	e01d      	b.n	80052fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0204 	orr.w	r2, r2, #4
 80052cc:	60da      	str	r2, [r3, #12]
      break;
 80052ce:	e014      	b.n	80052fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0208 	orr.w	r2, r2, #8
 80052de:	60da      	str	r2, [r3, #12]
      break;
 80052e0:	e00b      	b.n	80052fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0210 	orr.w	r2, r2, #16
 80052f0:	60da      	str	r2, [r3, #12]
      break;
 80052f2:	e002      	b.n	80052fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
      break;
 80052f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d144      	bne.n	800538a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2201      	movs	r2, #1
 8005306:	6839      	ldr	r1, [r7, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fe35 	bl	8005f78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a20      	ldr	r2, [pc, #128]	@ (8005394 <HAL_TIM_IC_Start_IT+0x26c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_TIM_IC_Start_IT+0x222>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005320:	d013      	beq.n	800534a <HAL_TIM_IC_Start_IT+0x222>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1c      	ldr	r2, [pc, #112]	@ (8005398 <HAL_TIM_IC_Start_IT+0x270>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_TIM_IC_Start_IT+0x222>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1a      	ldr	r2, [pc, #104]	@ (800539c <HAL_TIM_IC_Start_IT+0x274>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_TIM_IC_Start_IT+0x222>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a19      	ldr	r2, [pc, #100]	@ (80053a0 <HAL_TIM_IC_Start_IT+0x278>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIM_IC_Start_IT+0x222>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <HAL_TIM_IC_Start_IT+0x27c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d115      	bne.n	8005376 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	4b15      	ldr	r3, [pc, #84]	@ (80053a8 <HAL_TIM_IC_Start_IT+0x280>)
 8005352:	4013      	ands	r3, r2
 8005354:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b06      	cmp	r3, #6
 800535a:	d015      	beq.n	8005388 <HAL_TIM_IC_Start_IT+0x260>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005362:	d011      	beq.n	8005388 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005374:	e008      	b.n	8005388 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e000      	b.n	800538a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005388:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800538a:	7bfb      	ldrb	r3, [r7, #15]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40012c00 	.word	0x40012c00
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40013400 	.word	0x40013400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	00010007 	.word	0x00010007

080053ac <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b0c      	cmp	r3, #12
 80053be:	d841      	bhi.n	8005444 <HAL_TIM_IC_Stop_IT+0x98>
 80053c0:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <HAL_TIM_IC_Stop_IT+0x1c>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053fd 	.word	0x080053fd
 80053cc:	08005445 	.word	0x08005445
 80053d0:	08005445 	.word	0x08005445
 80053d4:	08005445 	.word	0x08005445
 80053d8:	0800540f 	.word	0x0800540f
 80053dc:	08005445 	.word	0x08005445
 80053e0:	08005445 	.word	0x08005445
 80053e4:	08005445 	.word	0x08005445
 80053e8:	08005421 	.word	0x08005421
 80053ec:	08005445 	.word	0x08005445
 80053f0:	08005445 	.word	0x08005445
 80053f4:	08005445 	.word	0x08005445
 80053f8:	08005433 	.word	0x08005433
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0202 	bic.w	r2, r2, #2
 800540a:	60da      	str	r2, [r3, #12]
      break;
 800540c:	e01d      	b.n	800544a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0204 	bic.w	r2, r2, #4
 800541c:	60da      	str	r2, [r3, #12]
      break;
 800541e:	e014      	b.n	800544a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0208 	bic.w	r2, r2, #8
 800542e:	60da      	str	r2, [r3, #12]
      break;
 8005430:	e00b      	b.n	800544a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0210 	bic.w	r2, r2, #16
 8005440:	60da      	str	r2, [r3, #12]
      break;
 8005442:	e002      	b.n	800544a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	73fb      	strb	r3, [r7, #15]
      break;
 8005448:	bf00      	nop
  }

  if (status == HAL_OK)
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d166      	bne.n	800551e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fd8d 	bl	8005f78 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a1a      	ldr	r2, [r3, #32]
 8005464:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <HAL_TIM_IC_Stop_IT+0xe2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	f240 4344 	movw	r3, #1092	@ 0x444
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d107      	bne.n	800548e <HAL_TIM_IC_Stop_IT+0xe2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0201 	bic.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d104      	bne.n	800549e <HAL_TIM_IC_Stop_IT+0xf2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800549c:	e023      	b.n	80054e6 <HAL_TIM_IC_Stop_IT+0x13a>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_IC_Stop_IT+0x102>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ac:	e01b      	b.n	80054e6 <HAL_TIM_IC_Stop_IT+0x13a>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d104      	bne.n	80054be <HAL_TIM_IC_Stop_IT+0x112>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054bc:	e013      	b.n	80054e6 <HAL_TIM_IC_Stop_IT+0x13a>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b0c      	cmp	r3, #12
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_IC_Stop_IT+0x122>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054cc:	e00b      	b.n	80054e6 <HAL_TIM_IC_Stop_IT+0x13a>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d104      	bne.n	80054de <HAL_TIM_IC_Stop_IT+0x132>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054dc:	e003      	b.n	80054e6 <HAL_TIM_IC_Stop_IT+0x13a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d104      	bne.n	80054f6 <HAL_TIM_IC_Stop_IT+0x14a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f4:	e013      	b.n	800551e <HAL_TIM_IC_Stop_IT+0x172>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d104      	bne.n	8005506 <HAL_TIM_IC_Stop_IT+0x15a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005504:	e00b      	b.n	800551e <HAL_TIM_IC_Stop_IT+0x172>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b08      	cmp	r3, #8
 800550a:	d104      	bne.n	8005516 <HAL_TIM_IC_Stop_IT+0x16a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005514:	e003      	b.n	800551e <HAL_TIM_IC_Stop_IT+0x172>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d020      	beq.n	800558c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01b      	beq.n	800558c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0202 	mvn.w	r2, #2
 800555c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fb fdd0 	bl	8001118 <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fa8a 	bl	8005a94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fa91 	bl	8005aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d020      	beq.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01b      	beq.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0204 	mvn.w	r2, #4
 80055a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fb fdaa 	bl	8001118 <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fa64 	bl	8005a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fa6b 	bl	8005aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d020      	beq.n	8005624 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01b      	beq.n	8005624 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0208 	mvn.w	r2, #8
 80055f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2204      	movs	r2, #4
 80055fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fb fd84 	bl	8001118 <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fa3e 	bl	8005a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa45 	bl	8005aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	d020      	beq.n	8005670 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01b      	beq.n	8005670 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0210 	mvn.w	r2, #16
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2208      	movs	r2, #8
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fb fd5e 	bl	8001118 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa18 	bl	8005a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa1f 	bl	8005aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00c      	beq.n	8005694 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d007      	beq.n	8005694 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0201 	mvn.w	r2, #1
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9f6 	bl	8005a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00c      	beq.n	80056b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d007      	beq.n	80056b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fd10 	bl	80060d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00c      	beq.n	80056dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d007      	beq.n	80056dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80056d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fd08 	bl	80060ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00c      	beq.n	8005700 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f9de 	bl	8005abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00c      	beq.n	8005724 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0220 	mvn.w	r2, #32
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fcd0 	bl	80060c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005746:	2302      	movs	r3, #2
 8005748:	e088      	b.n	800585c <HAL_TIM_IC_ConfigChannel+0x130>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11b      	bne.n	8005790 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005768:	f000 fa4e 	bl	8005c08 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 020c 	bic.w	r2, r2, #12
 800577a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6999      	ldr	r1, [r3, #24]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	619a      	str	r2, [r3, #24]
 800578e:	e060      	b.n	8005852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d11c      	bne.n	80057d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80057a6:	f000 fac6 	bl	8005d36 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6999      	ldr	r1, [r3, #24]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	021a      	lsls	r2, r3, #8
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	619a      	str	r2, [r3, #24]
 80057ce:	e040      	b.n	8005852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d11b      	bne.n	800580e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80057e6:	f000 fb13 	bl	8005e10 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 020c 	bic.w	r2, r2, #12
 80057f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69d9      	ldr	r1, [r3, #28]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	61da      	str	r2, [r3, #28]
 800580c:	e021      	b.n	8005852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b0c      	cmp	r3, #12
 8005812:	d11c      	bne.n	800584e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005824:	f000 fb30 	bl	8005e88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005836:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69d9      	ldr	r1, [r3, #28]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	021a      	lsls	r2, r3, #8
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	61da      	str	r2, [r3, #28]
 800584c:	e001      	b.n	8005852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800585a:	7dfb      	ldrb	r3, [r7, #23]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_TIM_ConfigClockSource+0x1c>
 800587c:	2302      	movs	r3, #2
 800587e:	e0b6      	b.n	80059ee <HAL_TIM_ConfigClockSource+0x18a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800589e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058bc:	d03e      	beq.n	800593c <HAL_TIM_ConfigClockSource+0xd8>
 80058be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c2:	f200 8087 	bhi.w	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ca:	f000 8086 	beq.w	80059da <HAL_TIM_ConfigClockSource+0x176>
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d2:	d87f      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058d4:	2b70      	cmp	r3, #112	@ 0x70
 80058d6:	d01a      	beq.n	800590e <HAL_TIM_ConfigClockSource+0xaa>
 80058d8:	2b70      	cmp	r3, #112	@ 0x70
 80058da:	d87b      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058dc:	2b60      	cmp	r3, #96	@ 0x60
 80058de:	d050      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x11e>
 80058e0:	2b60      	cmp	r3, #96	@ 0x60
 80058e2:	d877      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058e4:	2b50      	cmp	r3, #80	@ 0x50
 80058e6:	d03c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0xfe>
 80058e8:	2b50      	cmp	r3, #80	@ 0x50
 80058ea:	d873      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058ec:	2b40      	cmp	r3, #64	@ 0x40
 80058ee:	d058      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x13e>
 80058f0:	2b40      	cmp	r3, #64	@ 0x40
 80058f2:	d86f      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058f4:	2b30      	cmp	r3, #48	@ 0x30
 80058f6:	d064      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x15e>
 80058f8:	2b30      	cmp	r3, #48	@ 0x30
 80058fa:	d86b      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d060      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x15e>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d867      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d05c      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x15e>
 8005908:	2b10      	cmp	r3, #16
 800590a:	d05a      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x15e>
 800590c:	e062      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800591e:	f000 fb0b 	bl	8005f38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	609a      	str	r2, [r3, #8]
      break;
 800593a:	e04f      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800594c:	f000 faf4 	bl	8005f38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800595e:	609a      	str	r2, [r3, #8]
      break;
 8005960:	e03c      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596e:	461a      	mov	r2, r3
 8005970:	f000 f9b2 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2150      	movs	r1, #80	@ 0x50
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fac1 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 8005980:	e02c      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800598e:	461a      	mov	r2, r3
 8005990:	f000 fa0e 	bl	8005db0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2160      	movs	r1, #96	@ 0x60
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fab1 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 80059a0:	e01c      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	461a      	mov	r2, r3
 80059b0:	f000 f992 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2140      	movs	r1, #64	@ 0x40
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 faa1 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 80059c0:	e00c      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4619      	mov	r1, r3
 80059cc:	4610      	mov	r0, r2
 80059ce:	f000 fa98 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 80059d2:	e003      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
      break;
 80059d8:	e000      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b0c      	cmp	r3, #12
 8005a0a:	d831      	bhi.n	8005a70 <HAL_TIM_ReadCapturedValue+0x78>
 8005a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a49 	.word	0x08005a49
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a71 	.word	0x08005a71
 8005a20:	08005a71 	.word	0x08005a71
 8005a24:	08005a53 	.word	0x08005a53
 8005a28:	08005a71 	.word	0x08005a71
 8005a2c:	08005a71 	.word	0x08005a71
 8005a30:	08005a71 	.word	0x08005a71
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a71 	.word	0x08005a71
 8005a3c:	08005a71 	.word	0x08005a71
 8005a40:	08005a71 	.word	0x08005a71
 8005a44:	08005a67 	.word	0x08005a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4e:	60fb      	str	r3, [r7, #12]

      break;
 8005a50:	e00f      	b.n	8005a72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a58:	60fb      	str	r3, [r7, #12]

      break;
 8005a5a:	e00a      	b.n	8005a72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a62:	60fb      	str	r3, [r7, #12]

      break;
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	60fb      	str	r3, [r7, #12]

      break;
 8005a6e:	e000      	b.n	8005a72 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005a70:	bf00      	nop
  }

  return tmpreg;
 8005a72:	68fb      	ldr	r3, [r7, #12]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a42      	ldr	r2, [pc, #264]	@ (8005bec <TIM_Base_SetConfig+0x11c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00f      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aee:	d00b      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a3f      	ldr	r2, [pc, #252]	@ (8005bf0 <TIM_Base_SetConfig+0x120>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d007      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a3e      	ldr	r2, [pc, #248]	@ (8005bf4 <TIM_Base_SetConfig+0x124>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a3d      	ldr	r2, [pc, #244]	@ (8005bf8 <TIM_Base_SetConfig+0x128>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d108      	bne.n	8005b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a33      	ldr	r2, [pc, #204]	@ (8005bec <TIM_Base_SetConfig+0x11c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d01b      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b28:	d017      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a30      	ldr	r2, [pc, #192]	@ (8005bf0 <TIM_Base_SetConfig+0x120>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf4 <TIM_Base_SetConfig+0x124>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00f      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8005bf8 <TIM_Base_SetConfig+0x128>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00b      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2d      	ldr	r2, [pc, #180]	@ (8005bfc <TIM_Base_SetConfig+0x12c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005c00 <TIM_Base_SetConfig+0x130>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2b      	ldr	r2, [pc, #172]	@ (8005c04 <TIM_Base_SetConfig+0x134>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d108      	bne.n	8005b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a16      	ldr	r2, [pc, #88]	@ (8005bec <TIM_Base_SetConfig+0x11c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00f      	beq.n	8005bb8 <TIM_Base_SetConfig+0xe8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a17      	ldr	r2, [pc, #92]	@ (8005bf8 <TIM_Base_SetConfig+0x128>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <TIM_Base_SetConfig+0xe8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a16      	ldr	r2, [pc, #88]	@ (8005bfc <TIM_Base_SetConfig+0x12c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_Base_SetConfig+0xe8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <TIM_Base_SetConfig+0x130>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_Base_SetConfig+0xe8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a14      	ldr	r2, [pc, #80]	@ (8005c04 <TIM_Base_SetConfig+0x134>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d103      	bne.n	8005bc0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d105      	bne.n	8005bde <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f023 0201 	bic.w	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	611a      	str	r2, [r3, #16]
  }
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40000800 	.word	0x40000800
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	40014000 	.word	0x40014000
 8005c00:	40014400 	.word	0x40014400
 8005c04:	40014800 	.word	0x40014800

08005c08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f023 0201 	bic.w	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4a24      	ldr	r2, [pc, #144]	@ (8005cc4 <TIM_TI1_SetConfig+0xbc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <TIM_TI1_SetConfig+0x56>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3c:	d00f      	beq.n	8005c5e <TIM_TI1_SetConfig+0x56>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a21      	ldr	r2, [pc, #132]	@ (8005cc8 <TIM_TI1_SetConfig+0xc0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <TIM_TI1_SetConfig+0x56>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a20      	ldr	r2, [pc, #128]	@ (8005ccc <TIM_TI1_SetConfig+0xc4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <TIM_TI1_SetConfig+0x56>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd0 <TIM_TI1_SetConfig+0xc8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_TI1_SetConfig+0x56>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd4 <TIM_TI1_SetConfig+0xcc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d101      	bne.n	8005c62 <TIM_TI1_SetConfig+0x5a>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <TIM_TI1_SetConfig+0x5c>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	e003      	b.n	8005c82 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f023 030a 	bic.w	r3, r3, #10
 8005c9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f003 030a 	and.w	r3, r3, #10
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800
 8005cd0:	40013400 	.word	0x40013400
 8005cd4:	40014000 	.word	0x40014000

08005cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f023 0201 	bic.w	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f023 030a 	bic.w	r3, r3, #10
 8005d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b087      	sub	sp, #28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f023 0210 	bic.w	r2, r3, #16
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	031b      	lsls	r3, r3, #12
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	621a      	str	r2, [r3, #32]
}
 8005da4:	bf00      	nop
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0210 	bic.w	r2, r3, #16
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	031b      	lsls	r3, r3, #12
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	621a      	str	r2, [r3, #32]
}
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f023 0303 	bic.w	r3, r3, #3
 8005e3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005e60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	621a      	str	r2, [r3, #32]
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ec6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	031b      	lsls	r3, r3, #12
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005eda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	031b      	lsls	r3, r3, #12
 8005ee0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f043 0307 	orr.w	r3, r3, #7
 8005f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	609a      	str	r2, [r3, #8]
}
 8005f2c:	bf00      	nop
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	021a      	lsls	r2, r3, #8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	609a      	str	r2, [r3, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1a      	ldr	r2, [r3, #32]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	401a      	ands	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a1a      	ldr	r2, [r3, #32]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e063      	b.n	80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a2b      	ldr	r2, [pc, #172]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a2a      	ldr	r2, [pc, #168]	@ (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006028:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1b      	ldr	r2, [pc, #108]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604e:	d013      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a18      	ldr	r2, [pc, #96]	@ (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a17      	ldr	r2, [pc, #92]	@ (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a12      	ldr	r2, [pc, #72]	@ (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a13      	ldr	r2, [pc, #76]	@ (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d10c      	bne.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800607e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40013400 	.word	0x40013400
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40014000 	.word	0x40014000

080060c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e040      	b.n	8006194 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb fbc8 	bl	80018b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2224      	movs	r2, #36	@ 0x24
 800612c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f9fc 	bl	8006544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f825 	bl	800619c <UART_SetConfig>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e01b      	b.n	8006194 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800616a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800617a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fa7b 	bl	8006688 <UART_CheckIdleState>
 8006192:	4603      	mov	r3, r0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80061ca:	f023 030c 	bic.w	r3, r3, #12
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	6979      	ldr	r1, [r7, #20]
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	430a      	orrs	r2, r1
 8006210:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4aa7      	ldr	r2, [pc, #668]	@ (80064b4 <UART_SetConfig+0x318>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d120      	bne.n	800625e <UART_SetConfig+0xc2>
 800621c:	4ba6      	ldr	r3, [pc, #664]	@ (80064b8 <UART_SetConfig+0x31c>)
 800621e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b03      	cmp	r3, #3
 8006226:	d817      	bhi.n	8006258 <UART_SetConfig+0xbc>
 8006228:	a201      	add	r2, pc, #4	@ (adr r2, 8006230 <UART_SetConfig+0x94>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	08006241 	.word	0x08006241
 8006234:	0800624d 	.word	0x0800624d
 8006238:	08006253 	.word	0x08006253
 800623c:	08006247 	.word	0x08006247
 8006240:	2301      	movs	r3, #1
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e0b5      	b.n	80063b2 <UART_SetConfig+0x216>
 8006246:	2302      	movs	r3, #2
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e0b2      	b.n	80063b2 <UART_SetConfig+0x216>
 800624c:	2304      	movs	r3, #4
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e0af      	b.n	80063b2 <UART_SetConfig+0x216>
 8006252:	2308      	movs	r3, #8
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e0ac      	b.n	80063b2 <UART_SetConfig+0x216>
 8006258:	2310      	movs	r3, #16
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e0a9      	b.n	80063b2 <UART_SetConfig+0x216>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a96      	ldr	r2, [pc, #600]	@ (80064bc <UART_SetConfig+0x320>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d124      	bne.n	80062b2 <UART_SetConfig+0x116>
 8006268:	4b93      	ldr	r3, [pc, #588]	@ (80064b8 <UART_SetConfig+0x31c>)
 800626a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006270:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006274:	d011      	beq.n	800629a <UART_SetConfig+0xfe>
 8006276:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800627a:	d817      	bhi.n	80062ac <UART_SetConfig+0x110>
 800627c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006280:	d011      	beq.n	80062a6 <UART_SetConfig+0x10a>
 8006282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006286:	d811      	bhi.n	80062ac <UART_SetConfig+0x110>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <UART_SetConfig+0xf8>
 800628c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006290:	d006      	beq.n	80062a0 <UART_SetConfig+0x104>
 8006292:	e00b      	b.n	80062ac <UART_SetConfig+0x110>
 8006294:	2300      	movs	r3, #0
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e08b      	b.n	80063b2 <UART_SetConfig+0x216>
 800629a:	2302      	movs	r3, #2
 800629c:	77fb      	strb	r3, [r7, #31]
 800629e:	e088      	b.n	80063b2 <UART_SetConfig+0x216>
 80062a0:	2304      	movs	r3, #4
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e085      	b.n	80063b2 <UART_SetConfig+0x216>
 80062a6:	2308      	movs	r3, #8
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e082      	b.n	80063b2 <UART_SetConfig+0x216>
 80062ac:	2310      	movs	r3, #16
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e07f      	b.n	80063b2 <UART_SetConfig+0x216>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a82      	ldr	r2, [pc, #520]	@ (80064c0 <UART_SetConfig+0x324>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d124      	bne.n	8006306 <UART_SetConfig+0x16a>
 80062bc:	4b7e      	ldr	r3, [pc, #504]	@ (80064b8 <UART_SetConfig+0x31c>)
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80062c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80062c8:	d011      	beq.n	80062ee <UART_SetConfig+0x152>
 80062ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80062ce:	d817      	bhi.n	8006300 <UART_SetConfig+0x164>
 80062d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80062d4:	d011      	beq.n	80062fa <UART_SetConfig+0x15e>
 80062d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80062da:	d811      	bhi.n	8006300 <UART_SetConfig+0x164>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <UART_SetConfig+0x14c>
 80062e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062e4:	d006      	beq.n	80062f4 <UART_SetConfig+0x158>
 80062e6:	e00b      	b.n	8006300 <UART_SetConfig+0x164>
 80062e8:	2300      	movs	r3, #0
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e061      	b.n	80063b2 <UART_SetConfig+0x216>
 80062ee:	2302      	movs	r3, #2
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e05e      	b.n	80063b2 <UART_SetConfig+0x216>
 80062f4:	2304      	movs	r3, #4
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e05b      	b.n	80063b2 <UART_SetConfig+0x216>
 80062fa:	2308      	movs	r3, #8
 80062fc:	77fb      	strb	r3, [r7, #31]
 80062fe:	e058      	b.n	80063b2 <UART_SetConfig+0x216>
 8006300:	2310      	movs	r3, #16
 8006302:	77fb      	strb	r3, [r7, #31]
 8006304:	e055      	b.n	80063b2 <UART_SetConfig+0x216>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a6e      	ldr	r2, [pc, #440]	@ (80064c4 <UART_SetConfig+0x328>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d124      	bne.n	800635a <UART_SetConfig+0x1be>
 8006310:	4b69      	ldr	r3, [pc, #420]	@ (80064b8 <UART_SetConfig+0x31c>)
 8006312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006314:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006318:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800631c:	d011      	beq.n	8006342 <UART_SetConfig+0x1a6>
 800631e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006322:	d817      	bhi.n	8006354 <UART_SetConfig+0x1b8>
 8006324:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006328:	d011      	beq.n	800634e <UART_SetConfig+0x1b2>
 800632a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800632e:	d811      	bhi.n	8006354 <UART_SetConfig+0x1b8>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <UART_SetConfig+0x1a0>
 8006334:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006338:	d006      	beq.n	8006348 <UART_SetConfig+0x1ac>
 800633a:	e00b      	b.n	8006354 <UART_SetConfig+0x1b8>
 800633c:	2300      	movs	r3, #0
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e037      	b.n	80063b2 <UART_SetConfig+0x216>
 8006342:	2302      	movs	r3, #2
 8006344:	77fb      	strb	r3, [r7, #31]
 8006346:	e034      	b.n	80063b2 <UART_SetConfig+0x216>
 8006348:	2304      	movs	r3, #4
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e031      	b.n	80063b2 <UART_SetConfig+0x216>
 800634e:	2308      	movs	r3, #8
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e02e      	b.n	80063b2 <UART_SetConfig+0x216>
 8006354:	2310      	movs	r3, #16
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e02b      	b.n	80063b2 <UART_SetConfig+0x216>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a5a      	ldr	r2, [pc, #360]	@ (80064c8 <UART_SetConfig+0x32c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d124      	bne.n	80063ae <UART_SetConfig+0x212>
 8006364:	4b54      	ldr	r3, [pc, #336]	@ (80064b8 <UART_SetConfig+0x31c>)
 8006366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006368:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800636c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006370:	d011      	beq.n	8006396 <UART_SetConfig+0x1fa>
 8006372:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006376:	d817      	bhi.n	80063a8 <UART_SetConfig+0x20c>
 8006378:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800637c:	d011      	beq.n	80063a2 <UART_SetConfig+0x206>
 800637e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006382:	d811      	bhi.n	80063a8 <UART_SetConfig+0x20c>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <UART_SetConfig+0x1f4>
 8006388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800638c:	d006      	beq.n	800639c <UART_SetConfig+0x200>
 800638e:	e00b      	b.n	80063a8 <UART_SetConfig+0x20c>
 8006390:	2300      	movs	r3, #0
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e00d      	b.n	80063b2 <UART_SetConfig+0x216>
 8006396:	2302      	movs	r3, #2
 8006398:	77fb      	strb	r3, [r7, #31]
 800639a:	e00a      	b.n	80063b2 <UART_SetConfig+0x216>
 800639c:	2304      	movs	r3, #4
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e007      	b.n	80063b2 <UART_SetConfig+0x216>
 80063a2:	2308      	movs	r3, #8
 80063a4:	77fb      	strb	r3, [r7, #31]
 80063a6:	e004      	b.n	80063b2 <UART_SetConfig+0x216>
 80063a8:	2310      	movs	r3, #16
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e001      	b.n	80063b2 <UART_SetConfig+0x216>
 80063ae:	2310      	movs	r3, #16
 80063b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ba:	d15b      	bne.n	8006474 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80063bc:	7ffb      	ldrb	r3, [r7, #31]
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d827      	bhi.n	8006412 <UART_SetConfig+0x276>
 80063c2:	a201      	add	r2, pc, #4	@ (adr r2, 80063c8 <UART_SetConfig+0x22c>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	08006413 	.word	0x08006413
 80063d8:	08006403 	.word	0x08006403
 80063dc:	08006413 	.word	0x08006413
 80063e0:	08006413 	.word	0x08006413
 80063e4:	08006413 	.word	0x08006413
 80063e8:	0800640b 	.word	0x0800640b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ec:	f7fd ff66 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 80063f0:	61b8      	str	r0, [r7, #24]
        break;
 80063f2:	e013      	b.n	800641c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f4:	f7fd ff84 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 80063f8:	61b8      	str	r0, [r7, #24]
        break;
 80063fa:	e00f      	b.n	800641c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b33      	ldr	r3, [pc, #204]	@ (80064cc <UART_SetConfig+0x330>)
 80063fe:	61bb      	str	r3, [r7, #24]
        break;
 8006400:	e00c      	b.n	800641c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7fd fefb 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8006406:	61b8      	str	r0, [r7, #24]
        break;
 8006408:	e008      	b.n	800641c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800640e:	61bb      	str	r3, [r7, #24]
        break;
 8006410:	e004      	b.n	800641c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	77bb      	strb	r3, [r7, #30]
        break;
 800641a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 8082 	beq.w	8006528 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	005a      	lsls	r2, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	441a      	add	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	fbb2 f3f3 	udiv	r3, r2, r3
 8006438:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b0f      	cmp	r3, #15
 800643e:	d916      	bls.n	800646e <UART_SetConfig+0x2d2>
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006446:	d212      	bcs.n	800646e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f023 030f 	bic.w	r3, r3, #15
 8006450:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	085b      	lsrs	r3, r3, #1
 8006456:	b29b      	uxth	r3, r3
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	b29a      	uxth	r2, r3
 800645e:	89fb      	ldrh	r3, [r7, #14]
 8006460:	4313      	orrs	r3, r2
 8006462:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	89fa      	ldrh	r2, [r7, #14]
 800646a:	60da      	str	r2, [r3, #12]
 800646c:	e05c      	b.n	8006528 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	77bb      	strb	r3, [r7, #30]
 8006472:	e059      	b.n	8006528 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006474:	7ffb      	ldrb	r3, [r7, #31]
 8006476:	2b08      	cmp	r3, #8
 8006478:	d835      	bhi.n	80064e6 <UART_SetConfig+0x34a>
 800647a:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <UART_SetConfig+0x2e4>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	080064a5 	.word	0x080064a5
 8006484:	080064ad 	.word	0x080064ad
 8006488:	080064d1 	.word	0x080064d1
 800648c:	080064e7 	.word	0x080064e7
 8006490:	080064d7 	.word	0x080064d7
 8006494:	080064e7 	.word	0x080064e7
 8006498:	080064e7 	.word	0x080064e7
 800649c:	080064e7 	.word	0x080064e7
 80064a0:	080064df 	.word	0x080064df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a4:	f7fd ff0a 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 80064a8:	61b8      	str	r0, [r7, #24]
        break;
 80064aa:	e021      	b.n	80064f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ac:	f7fd ff28 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 80064b0:	61b8      	str	r0, [r7, #24]
        break;
 80064b2:	e01d      	b.n	80064f0 <UART_SetConfig+0x354>
 80064b4:	40013800 	.word	0x40013800
 80064b8:	40021000 	.word	0x40021000
 80064bc:	40004400 	.word	0x40004400
 80064c0:	40004800 	.word	0x40004800
 80064c4:	40004c00 	.word	0x40004c00
 80064c8:	40005000 	.word	0x40005000
 80064cc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006540 <UART_SetConfig+0x3a4>)
 80064d2:	61bb      	str	r3, [r7, #24]
        break;
 80064d4:	e00c      	b.n	80064f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d6:	f7fd fe91 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80064da:	61b8      	str	r0, [r7, #24]
        break;
 80064dc:	e008      	b.n	80064f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064e2:	61bb      	str	r3, [r7, #24]
        break;
 80064e4:	e004      	b.n	80064f0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	77bb      	strb	r3, [r7, #30]
        break;
 80064ee:	bf00      	nop
    }

    if (pclk != 0U)
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d018      	beq.n	8006528 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	085a      	lsrs	r2, r3, #1
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	441a      	add	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b0f      	cmp	r3, #15
 800650e:	d909      	bls.n	8006524 <UART_SetConfig+0x388>
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006516:	d205      	bcs.n	8006524 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	b29a      	uxth	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60da      	str	r2, [r3, #12]
 8006522:	e001      	b.n	8006528 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006534:	7fbb      	ldrb	r3, [r7, #30]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	007a1200 	.word	0x007a1200

08006544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01a      	beq.n	800665a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006642:	d10a      	bne.n	800665a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
  }
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b098      	sub	sp, #96	@ 0x60
 800668c:	af02      	add	r7, sp, #8
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006698:	f7fb fb2e 	bl	8001cf8 <HAL_GetTick>
 800669c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d12e      	bne.n	800670a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b4:	2200      	movs	r2, #0
 80066b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f88c 	bl	80067d8 <UART_WaitOnFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d021      	beq.n	800670a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066da:	653b      	str	r3, [r7, #80]	@ 0x50
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e6      	bne.n	80066c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e062      	b.n	80067d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b04      	cmp	r3, #4
 8006716:	d149      	bne.n	80067ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006718:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006720:	2200      	movs	r2, #0
 8006722:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f856 	bl	80067d8 <UART_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d03c      	beq.n	80067ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	623b      	str	r3, [r7, #32]
   return(result);
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006750:	633b      	str	r3, [r7, #48]	@ 0x30
 8006752:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800675e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e6      	bne.n	8006732 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3308      	adds	r3, #8
 800676a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	60fb      	str	r3, [r7, #12]
   return(result);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3308      	adds	r3, #8
 8006782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006784:	61fa      	str	r2, [r7, #28]
 8006786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	69b9      	ldr	r1, [r7, #24]
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	617b      	str	r3, [r7, #20]
   return(result);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e5      	bne.n	8006764 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e011      	b.n	80067d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3758      	adds	r7, #88	@ 0x58
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	4613      	mov	r3, r2
 80067e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e8:	e04f      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d04b      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f2:	f7fb fa81 	bl	8001cf8 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d302      	bcc.n	8006808 <UART_WaitOnFlagUntilTimeout+0x30>
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e04e      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	d037      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b80      	cmp	r3, #128	@ 0x80
 800681e:	d034      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b40      	cmp	r3, #64	@ 0x40
 8006824:	d031      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b08      	cmp	r3, #8
 8006832:	d110      	bne.n	8006856 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2208      	movs	r2, #8
 800683a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f838 	bl	80068b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2208      	movs	r2, #8
 8006846:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e029      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006864:	d111      	bne.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800686e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f81e 	bl	80068b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e00f      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4013      	ands	r3, r2
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	bf0c      	ite	eq
 800689a:	2301      	moveq	r3, #1
 800689c:	2300      	movne	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d0a0      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b095      	sub	sp, #84	@ 0x54
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80068da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800690c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800690e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e5      	bne.n	80068ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006924:	2b01      	cmp	r3, #1
 8006926:	d118      	bne.n	800695a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	60bb      	str	r3, [r7, #8]
   return(result);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f023 0310 	bic.w	r3, r3, #16
 800693c:	647b      	str	r3, [r7, #68]	@ 0x44
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6979      	ldr	r1, [r7, #20]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	613b      	str	r3, [r7, #16]
   return(result);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800696e:	bf00      	nop
 8006970:	3754      	adds	r7, #84	@ 0x54
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006982:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006986:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	b29b      	uxth	r3, r3
 8006994:	43db      	mvns	r3, r3
 8006996:	b29b      	uxth	r3, r3
 8006998:	4013      	ands	r3, r2
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	1d3b      	adds	r3, r7, #4
 80069ba:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <sbrk_aligned>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	4e0f      	ldr	r6, [pc, #60]	@ (8006a2c <sbrk_aligned+0x40>)
 80069f0:	460c      	mov	r4, r1
 80069f2:	6831      	ldr	r1, [r6, #0]
 80069f4:	4605      	mov	r5, r0
 80069f6:	b911      	cbnz	r1, 80069fe <sbrk_aligned+0x12>
 80069f8:	f000 f8f4 	bl	8006be4 <_sbrk_r>
 80069fc:	6030      	str	r0, [r6, #0]
 80069fe:	4621      	mov	r1, r4
 8006a00:	4628      	mov	r0, r5
 8006a02:	f000 f8ef 	bl	8006be4 <_sbrk_r>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	d103      	bne.n	8006a12 <sbrk_aligned+0x26>
 8006a0a:	f04f 34ff 	mov.w	r4, #4294967295
 8006a0e:	4620      	mov	r0, r4
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	1cc4      	adds	r4, r0, #3
 8006a14:	f024 0403 	bic.w	r4, r4, #3
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d0f8      	beq.n	8006a0e <sbrk_aligned+0x22>
 8006a1c:	1a21      	subs	r1, r4, r0
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 f8e0 	bl	8006be4 <_sbrk_r>
 8006a24:	3001      	adds	r0, #1
 8006a26:	d1f2      	bne.n	8006a0e <sbrk_aligned+0x22>
 8006a28:	e7ef      	b.n	8006a0a <sbrk_aligned+0x1e>
 8006a2a:	bf00      	nop
 8006a2c:	200009a0 	.word	0x200009a0

08006a30 <_malloc_r>:
 8006a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a34:	1ccd      	adds	r5, r1, #3
 8006a36:	f025 0503 	bic.w	r5, r5, #3
 8006a3a:	3508      	adds	r5, #8
 8006a3c:	2d0c      	cmp	r5, #12
 8006a3e:	bf38      	it	cc
 8006a40:	250c      	movcc	r5, #12
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	4606      	mov	r6, r0
 8006a46:	db01      	blt.n	8006a4c <_malloc_r+0x1c>
 8006a48:	42a9      	cmp	r1, r5
 8006a4a:	d904      	bls.n	8006a56 <_malloc_r+0x26>
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	6033      	str	r3, [r6, #0]
 8006a50:	2000      	movs	r0, #0
 8006a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b2c <_malloc_r+0xfc>
 8006a5a:	f000 f869 	bl	8006b30 <__malloc_lock>
 8006a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a62:	461c      	mov	r4, r3
 8006a64:	bb44      	cbnz	r4, 8006ab8 <_malloc_r+0x88>
 8006a66:	4629      	mov	r1, r5
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f7ff ffbf 	bl	80069ec <sbrk_aligned>
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	4604      	mov	r4, r0
 8006a72:	d158      	bne.n	8006b26 <_malloc_r+0xf6>
 8006a74:	f8d8 4000 	ldr.w	r4, [r8]
 8006a78:	4627      	mov	r7, r4
 8006a7a:	2f00      	cmp	r7, #0
 8006a7c:	d143      	bne.n	8006b06 <_malloc_r+0xd6>
 8006a7e:	2c00      	cmp	r4, #0
 8006a80:	d04b      	beq.n	8006b1a <_malloc_r+0xea>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	4639      	mov	r1, r7
 8006a86:	4630      	mov	r0, r6
 8006a88:	eb04 0903 	add.w	r9, r4, r3
 8006a8c:	f000 f8aa 	bl	8006be4 <_sbrk_r>
 8006a90:	4581      	cmp	r9, r0
 8006a92:	d142      	bne.n	8006b1a <_malloc_r+0xea>
 8006a94:	6821      	ldr	r1, [r4, #0]
 8006a96:	1a6d      	subs	r5, r5, r1
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff ffa6 	bl	80069ec <sbrk_aligned>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d03a      	beq.n	8006b1a <_malloc_r+0xea>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	442b      	add	r3, r5
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	bb62      	cbnz	r2, 8006b0c <_malloc_r+0xdc>
 8006ab2:	f8c8 7000 	str.w	r7, [r8]
 8006ab6:	e00f      	b.n	8006ad8 <_malloc_r+0xa8>
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	1b52      	subs	r2, r2, r5
 8006abc:	d420      	bmi.n	8006b00 <_malloc_r+0xd0>
 8006abe:	2a0b      	cmp	r2, #11
 8006ac0:	d917      	bls.n	8006af2 <_malloc_r+0xc2>
 8006ac2:	1961      	adds	r1, r4, r5
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	6025      	str	r5, [r4, #0]
 8006ac8:	bf18      	it	ne
 8006aca:	6059      	strne	r1, [r3, #4]
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	bf08      	it	eq
 8006ad0:	f8c8 1000 	streq.w	r1, [r8]
 8006ad4:	5162      	str	r2, [r4, r5]
 8006ad6:	604b      	str	r3, [r1, #4]
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f000 f82f 	bl	8006b3c <__malloc_unlock>
 8006ade:	f104 000b 	add.w	r0, r4, #11
 8006ae2:	1d23      	adds	r3, r4, #4
 8006ae4:	f020 0007 	bic.w	r0, r0, #7
 8006ae8:	1ac2      	subs	r2, r0, r3
 8006aea:	bf1c      	itt	ne
 8006aec:	1a1b      	subne	r3, r3, r0
 8006aee:	50a3      	strne	r3, [r4, r2]
 8006af0:	e7af      	b.n	8006a52 <_malloc_r+0x22>
 8006af2:	6862      	ldr	r2, [r4, #4]
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	bf0c      	ite	eq
 8006af8:	f8c8 2000 	streq.w	r2, [r8]
 8006afc:	605a      	strne	r2, [r3, #4]
 8006afe:	e7eb      	b.n	8006ad8 <_malloc_r+0xa8>
 8006b00:	4623      	mov	r3, r4
 8006b02:	6864      	ldr	r4, [r4, #4]
 8006b04:	e7ae      	b.n	8006a64 <_malloc_r+0x34>
 8006b06:	463c      	mov	r4, r7
 8006b08:	687f      	ldr	r7, [r7, #4]
 8006b0a:	e7b6      	b.n	8006a7a <_malloc_r+0x4a>
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d1fb      	bne.n	8006b0c <_malloc_r+0xdc>
 8006b14:	2300      	movs	r3, #0
 8006b16:	6053      	str	r3, [r2, #4]
 8006b18:	e7de      	b.n	8006ad8 <_malloc_r+0xa8>
 8006b1a:	230c      	movs	r3, #12
 8006b1c:	6033      	str	r3, [r6, #0]
 8006b1e:	4630      	mov	r0, r6
 8006b20:	f000 f80c 	bl	8006b3c <__malloc_unlock>
 8006b24:	e794      	b.n	8006a50 <_malloc_r+0x20>
 8006b26:	6005      	str	r5, [r0, #0]
 8006b28:	e7d6      	b.n	8006ad8 <_malloc_r+0xa8>
 8006b2a:	bf00      	nop
 8006b2c:	200009a4 	.word	0x200009a4

08006b30 <__malloc_lock>:
 8006b30:	4801      	ldr	r0, [pc, #4]	@ (8006b38 <__malloc_lock+0x8>)
 8006b32:	f000 b891 	b.w	8006c58 <__retarget_lock_acquire_recursive>
 8006b36:	bf00      	nop
 8006b38:	20000ae4 	.word	0x20000ae4

08006b3c <__malloc_unlock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	@ (8006b44 <__malloc_unlock+0x8>)
 8006b3e:	f000 b88c 	b.w	8006c5a <__retarget_lock_release_recursive>
 8006b42:	bf00      	nop
 8006b44:	20000ae4 	.word	0x20000ae4

08006b48 <siprintf>:
 8006b48:	b40e      	push	{r1, r2, r3}
 8006b4a:	b510      	push	{r4, lr}
 8006b4c:	b09d      	sub	sp, #116	@ 0x74
 8006b4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006b50:	9002      	str	r0, [sp, #8]
 8006b52:	9006      	str	r0, [sp, #24]
 8006b54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b58:	480a      	ldr	r0, [pc, #40]	@ (8006b84 <siprintf+0x3c>)
 8006b5a:	9107      	str	r1, [sp, #28]
 8006b5c:	9104      	str	r1, [sp, #16]
 8006b5e:	490a      	ldr	r1, [pc, #40]	@ (8006b88 <siprintf+0x40>)
 8006b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b64:	9105      	str	r1, [sp, #20]
 8006b66:	2400      	movs	r4, #0
 8006b68:	a902      	add	r1, sp, #8
 8006b6a:	6800      	ldr	r0, [r0, #0]
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006b70:	f000 f928 	bl	8006dc4 <_svfiprintf_r>
 8006b74:	9b02      	ldr	r3, [sp, #8]
 8006b76:	701c      	strb	r4, [r3, #0]
 8006b78:	b01d      	add	sp, #116	@ 0x74
 8006b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b7e:	b003      	add	sp, #12
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000470 	.word	0x20000470
 8006b88:	ffff0208 	.word	0xffff0208

08006b8c <memcmp>:
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	3901      	subs	r1, #1
 8006b90:	4402      	add	r2, r0
 8006b92:	4290      	cmp	r0, r2
 8006b94:	d101      	bne.n	8006b9a <memcmp+0xe>
 8006b96:	2000      	movs	r0, #0
 8006b98:	e005      	b.n	8006ba6 <memcmp+0x1a>
 8006b9a:	7803      	ldrb	r3, [r0, #0]
 8006b9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	d001      	beq.n	8006ba8 <memcmp+0x1c>
 8006ba4:	1b18      	subs	r0, r3, r4
 8006ba6:	bd10      	pop	{r4, pc}
 8006ba8:	3001      	adds	r0, #1
 8006baa:	e7f2      	b.n	8006b92 <memcmp+0x6>

08006bac <memset>:
 8006bac:	4402      	add	r2, r0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d100      	bne.n	8006bb6 <memset+0xa>
 8006bb4:	4770      	bx	lr
 8006bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bba:	e7f9      	b.n	8006bb0 <memset+0x4>

08006bbc <strncpy>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	3901      	subs	r1, #1
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	b132      	cbz	r2, 8006bd2 <strncpy+0x16>
 8006bc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006bc8:	f803 4b01 	strb.w	r4, [r3], #1
 8006bcc:	3a01      	subs	r2, #1
 8006bce:	2c00      	cmp	r4, #0
 8006bd0:	d1f7      	bne.n	8006bc2 <strncpy+0x6>
 8006bd2:	441a      	add	r2, r3
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d100      	bne.n	8006bdc <strncpy+0x20>
 8006bda:	bd10      	pop	{r4, pc}
 8006bdc:	f803 1b01 	strb.w	r1, [r3], #1
 8006be0:	e7f9      	b.n	8006bd6 <strncpy+0x1a>
	...

08006be4 <_sbrk_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d06      	ldr	r5, [pc, #24]	@ (8006c00 <_sbrk_r+0x1c>)
 8006be8:	2300      	movs	r3, #0
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	f7fa ff24 	bl	8001a3c <_sbrk>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_sbrk_r+0x1a>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_sbrk_r+0x1a>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	20000ae0 	.word	0x20000ae0

08006c04 <__errno>:
 8006c04:	4b01      	ldr	r3, [pc, #4]	@ (8006c0c <__errno+0x8>)
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20000470 	.word	0x20000470

08006c10 <__libc_init_array>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4d0d      	ldr	r5, [pc, #52]	@ (8006c48 <__libc_init_array+0x38>)
 8006c14:	4c0d      	ldr	r4, [pc, #52]	@ (8006c4c <__libc_init_array+0x3c>)
 8006c16:	1b64      	subs	r4, r4, r5
 8006c18:	10a4      	asrs	r4, r4, #2
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	d109      	bne.n	8006c34 <__libc_init_array+0x24>
 8006c20:	4d0b      	ldr	r5, [pc, #44]	@ (8006c50 <__libc_init_array+0x40>)
 8006c22:	4c0c      	ldr	r4, [pc, #48]	@ (8006c54 <__libc_init_array+0x44>)
 8006c24:	f000 fba6 	bl	8007374 <_init>
 8006c28:	1b64      	subs	r4, r4, r5
 8006c2a:	10a4      	asrs	r4, r4, #2
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	42a6      	cmp	r6, r4
 8006c30:	d105      	bne.n	8006c3e <__libc_init_array+0x2e>
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c38:	4798      	blx	r3
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7ee      	b.n	8006c1c <__libc_init_array+0xc>
 8006c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c42:	4798      	blx	r3
 8006c44:	3601      	adds	r6, #1
 8006c46:	e7f2      	b.n	8006c2e <__libc_init_array+0x1e>
 8006c48:	080074d4 	.word	0x080074d4
 8006c4c:	080074d4 	.word	0x080074d4
 8006c50:	080074d4 	.word	0x080074d4
 8006c54:	080074d8 	.word	0x080074d8

08006c58 <__retarget_lock_acquire_recursive>:
 8006c58:	4770      	bx	lr

08006c5a <__retarget_lock_release_recursive>:
 8006c5a:	4770      	bx	lr

08006c5c <memcpy>:
 8006c5c:	440a      	add	r2, r1
 8006c5e:	4291      	cmp	r1, r2
 8006c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c64:	d100      	bne.n	8006c68 <memcpy+0xc>
 8006c66:	4770      	bx	lr
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c72:	4291      	cmp	r1, r2
 8006c74:	d1f9      	bne.n	8006c6a <memcpy+0xe>
 8006c76:	bd10      	pop	{r4, pc}

08006c78 <_free_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	2900      	cmp	r1, #0
 8006c7e:	d041      	beq.n	8006d04 <_free_r+0x8c>
 8006c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c84:	1f0c      	subs	r4, r1, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bfb8      	it	lt
 8006c8a:	18e4      	addlt	r4, r4, r3
 8006c8c:	f7ff ff50 	bl	8006b30 <__malloc_lock>
 8006c90:	4a1d      	ldr	r2, [pc, #116]	@ (8006d08 <_free_r+0x90>)
 8006c92:	6813      	ldr	r3, [r2, #0]
 8006c94:	b933      	cbnz	r3, 8006ca4 <_free_r+0x2c>
 8006c96:	6063      	str	r3, [r4, #4]
 8006c98:	6014      	str	r4, [r2, #0]
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca0:	f7ff bf4c 	b.w	8006b3c <__malloc_unlock>
 8006ca4:	42a3      	cmp	r3, r4
 8006ca6:	d908      	bls.n	8006cba <_free_r+0x42>
 8006ca8:	6820      	ldr	r0, [r4, #0]
 8006caa:	1821      	adds	r1, r4, r0
 8006cac:	428b      	cmp	r3, r1
 8006cae:	bf01      	itttt	eq
 8006cb0:	6819      	ldreq	r1, [r3, #0]
 8006cb2:	685b      	ldreq	r3, [r3, #4]
 8006cb4:	1809      	addeq	r1, r1, r0
 8006cb6:	6021      	streq	r1, [r4, #0]
 8006cb8:	e7ed      	b.n	8006c96 <_free_r+0x1e>
 8006cba:	461a      	mov	r2, r3
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	b10b      	cbz	r3, 8006cc4 <_free_r+0x4c>
 8006cc0:	42a3      	cmp	r3, r4
 8006cc2:	d9fa      	bls.n	8006cba <_free_r+0x42>
 8006cc4:	6811      	ldr	r1, [r2, #0]
 8006cc6:	1850      	adds	r0, r2, r1
 8006cc8:	42a0      	cmp	r0, r4
 8006cca:	d10b      	bne.n	8006ce4 <_free_r+0x6c>
 8006ccc:	6820      	ldr	r0, [r4, #0]
 8006cce:	4401      	add	r1, r0
 8006cd0:	1850      	adds	r0, r2, r1
 8006cd2:	4283      	cmp	r3, r0
 8006cd4:	6011      	str	r1, [r2, #0]
 8006cd6:	d1e0      	bne.n	8006c9a <_free_r+0x22>
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	6053      	str	r3, [r2, #4]
 8006cde:	4408      	add	r0, r1
 8006ce0:	6010      	str	r0, [r2, #0]
 8006ce2:	e7da      	b.n	8006c9a <_free_r+0x22>
 8006ce4:	d902      	bls.n	8006cec <_free_r+0x74>
 8006ce6:	230c      	movs	r3, #12
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	e7d6      	b.n	8006c9a <_free_r+0x22>
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	1821      	adds	r1, r4, r0
 8006cf0:	428b      	cmp	r3, r1
 8006cf2:	bf04      	itt	eq
 8006cf4:	6819      	ldreq	r1, [r3, #0]
 8006cf6:	685b      	ldreq	r3, [r3, #4]
 8006cf8:	6063      	str	r3, [r4, #4]
 8006cfa:	bf04      	itt	eq
 8006cfc:	1809      	addeq	r1, r1, r0
 8006cfe:	6021      	streq	r1, [r4, #0]
 8006d00:	6054      	str	r4, [r2, #4]
 8006d02:	e7ca      	b.n	8006c9a <_free_r+0x22>
 8006d04:	bd38      	pop	{r3, r4, r5, pc}
 8006d06:	bf00      	nop
 8006d08:	200009a4 	.word	0x200009a4

08006d0c <__ssputs_r>:
 8006d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d10:	688e      	ldr	r6, [r1, #8]
 8006d12:	461f      	mov	r7, r3
 8006d14:	42be      	cmp	r6, r7
 8006d16:	680b      	ldr	r3, [r1, #0]
 8006d18:	4682      	mov	sl, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4690      	mov	r8, r2
 8006d1e:	d82d      	bhi.n	8006d7c <__ssputs_r+0x70>
 8006d20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d28:	d026      	beq.n	8006d78 <__ssputs_r+0x6c>
 8006d2a:	6965      	ldr	r5, [r4, #20]
 8006d2c:	6909      	ldr	r1, [r1, #16]
 8006d2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d32:	eba3 0901 	sub.w	r9, r3, r1
 8006d36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d3a:	1c7b      	adds	r3, r7, #1
 8006d3c:	444b      	add	r3, r9
 8006d3e:	106d      	asrs	r5, r5, #1
 8006d40:	429d      	cmp	r5, r3
 8006d42:	bf38      	it	cc
 8006d44:	461d      	movcc	r5, r3
 8006d46:	0553      	lsls	r3, r2, #21
 8006d48:	d527      	bpl.n	8006d9a <__ssputs_r+0x8e>
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	f7ff fe70 	bl	8006a30 <_malloc_r>
 8006d50:	4606      	mov	r6, r0
 8006d52:	b360      	cbz	r0, 8006dae <__ssputs_r+0xa2>
 8006d54:	6921      	ldr	r1, [r4, #16]
 8006d56:	464a      	mov	r2, r9
 8006d58:	f7ff ff80 	bl	8006c5c <memcpy>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	6126      	str	r6, [r4, #16]
 8006d6a:	6165      	str	r5, [r4, #20]
 8006d6c:	444e      	add	r6, r9
 8006d6e:	eba5 0509 	sub.w	r5, r5, r9
 8006d72:	6026      	str	r6, [r4, #0]
 8006d74:	60a5      	str	r5, [r4, #8]
 8006d76:	463e      	mov	r6, r7
 8006d78:	42be      	cmp	r6, r7
 8006d7a:	d900      	bls.n	8006d7e <__ssputs_r+0x72>
 8006d7c:	463e      	mov	r6, r7
 8006d7e:	6820      	ldr	r0, [r4, #0]
 8006d80:	4632      	mov	r2, r6
 8006d82:	4641      	mov	r1, r8
 8006d84:	f000 faa6 	bl	80072d4 <memmove>
 8006d88:	68a3      	ldr	r3, [r4, #8]
 8006d8a:	1b9b      	subs	r3, r3, r6
 8006d8c:	60a3      	str	r3, [r4, #8]
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	4433      	add	r3, r6
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	2000      	movs	r0, #0
 8006d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9a:	462a      	mov	r2, r5
 8006d9c:	f000 fab4 	bl	8007308 <_realloc_r>
 8006da0:	4606      	mov	r6, r0
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d1e0      	bne.n	8006d68 <__ssputs_r+0x5c>
 8006da6:	6921      	ldr	r1, [r4, #16]
 8006da8:	4650      	mov	r0, sl
 8006daa:	f7ff ff65 	bl	8006c78 <_free_r>
 8006dae:	230c      	movs	r3, #12
 8006db0:	f8ca 3000 	str.w	r3, [sl]
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc0:	e7e9      	b.n	8006d96 <__ssputs_r+0x8a>
	...

08006dc4 <_svfiprintf_r>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	4698      	mov	r8, r3
 8006dca:	898b      	ldrh	r3, [r1, #12]
 8006dcc:	061b      	lsls	r3, r3, #24
 8006dce:	b09d      	sub	sp, #116	@ 0x74
 8006dd0:	4607      	mov	r7, r0
 8006dd2:	460d      	mov	r5, r1
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	d510      	bpl.n	8006dfa <_svfiprintf_r+0x36>
 8006dd8:	690b      	ldr	r3, [r1, #16]
 8006dda:	b973      	cbnz	r3, 8006dfa <_svfiprintf_r+0x36>
 8006ddc:	2140      	movs	r1, #64	@ 0x40
 8006dde:	f7ff fe27 	bl	8006a30 <_malloc_r>
 8006de2:	6028      	str	r0, [r5, #0]
 8006de4:	6128      	str	r0, [r5, #16]
 8006de6:	b930      	cbnz	r0, 8006df6 <_svfiprintf_r+0x32>
 8006de8:	230c      	movs	r3, #12
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295
 8006df0:	b01d      	add	sp, #116	@ 0x74
 8006df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df6:	2340      	movs	r3, #64	@ 0x40
 8006df8:	616b      	str	r3, [r5, #20]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dfe:	2320      	movs	r3, #32
 8006e00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e08:	2330      	movs	r3, #48	@ 0x30
 8006e0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006fa8 <_svfiprintf_r+0x1e4>
 8006e0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e12:	f04f 0901 	mov.w	r9, #1
 8006e16:	4623      	mov	r3, r4
 8006e18:	469a      	mov	sl, r3
 8006e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e1e:	b10a      	cbz	r2, 8006e24 <_svfiprintf_r+0x60>
 8006e20:	2a25      	cmp	r2, #37	@ 0x25
 8006e22:	d1f9      	bne.n	8006e18 <_svfiprintf_r+0x54>
 8006e24:	ebba 0b04 	subs.w	fp, sl, r4
 8006e28:	d00b      	beq.n	8006e42 <_svfiprintf_r+0x7e>
 8006e2a:	465b      	mov	r3, fp
 8006e2c:	4622      	mov	r2, r4
 8006e2e:	4629      	mov	r1, r5
 8006e30:	4638      	mov	r0, r7
 8006e32:	f7ff ff6b 	bl	8006d0c <__ssputs_r>
 8006e36:	3001      	adds	r0, #1
 8006e38:	f000 80a7 	beq.w	8006f8a <_svfiprintf_r+0x1c6>
 8006e3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e3e:	445a      	add	r2, fp
 8006e40:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e42:	f89a 3000 	ldrb.w	r3, [sl]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 809f 	beq.w	8006f8a <_svfiprintf_r+0x1c6>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e56:	f10a 0a01 	add.w	sl, sl, #1
 8006e5a:	9304      	str	r3, [sp, #16]
 8006e5c:	9307      	str	r3, [sp, #28]
 8006e5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e62:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e64:	4654      	mov	r4, sl
 8006e66:	2205      	movs	r2, #5
 8006e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6c:	484e      	ldr	r0, [pc, #312]	@ (8006fa8 <_svfiprintf_r+0x1e4>)
 8006e6e:	f7f9 f9af 	bl	80001d0 <memchr>
 8006e72:	9a04      	ldr	r2, [sp, #16]
 8006e74:	b9d8      	cbnz	r0, 8006eae <_svfiprintf_r+0xea>
 8006e76:	06d0      	lsls	r0, r2, #27
 8006e78:	bf44      	itt	mi
 8006e7a:	2320      	movmi	r3, #32
 8006e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e80:	0711      	lsls	r1, r2, #28
 8006e82:	bf44      	itt	mi
 8006e84:	232b      	movmi	r3, #43	@ 0x2b
 8006e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e90:	d015      	beq.n	8006ebe <_svfiprintf_r+0xfa>
 8006e92:	9a07      	ldr	r2, [sp, #28]
 8006e94:	4654      	mov	r4, sl
 8006e96:	2000      	movs	r0, #0
 8006e98:	f04f 0c0a 	mov.w	ip, #10
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ea2:	3b30      	subs	r3, #48	@ 0x30
 8006ea4:	2b09      	cmp	r3, #9
 8006ea6:	d94b      	bls.n	8006f40 <_svfiprintf_r+0x17c>
 8006ea8:	b1b0      	cbz	r0, 8006ed8 <_svfiprintf_r+0x114>
 8006eaa:	9207      	str	r2, [sp, #28]
 8006eac:	e014      	b.n	8006ed8 <_svfiprintf_r+0x114>
 8006eae:	eba0 0308 	sub.w	r3, r0, r8
 8006eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	46a2      	mov	sl, r4
 8006ebc:	e7d2      	b.n	8006e64 <_svfiprintf_r+0xa0>
 8006ebe:	9b03      	ldr	r3, [sp, #12]
 8006ec0:	1d19      	adds	r1, r3, #4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	9103      	str	r1, [sp, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfbb      	ittet	lt
 8006eca:	425b      	neglt	r3, r3
 8006ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8006ed0:	9307      	strge	r3, [sp, #28]
 8006ed2:	9307      	strlt	r3, [sp, #28]
 8006ed4:	bfb8      	it	lt
 8006ed6:	9204      	strlt	r2, [sp, #16]
 8006ed8:	7823      	ldrb	r3, [r4, #0]
 8006eda:	2b2e      	cmp	r3, #46	@ 0x2e
 8006edc:	d10a      	bne.n	8006ef4 <_svfiprintf_r+0x130>
 8006ede:	7863      	ldrb	r3, [r4, #1]
 8006ee0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee2:	d132      	bne.n	8006f4a <_svfiprintf_r+0x186>
 8006ee4:	9b03      	ldr	r3, [sp, #12]
 8006ee6:	1d1a      	adds	r2, r3, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	9203      	str	r2, [sp, #12]
 8006eec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ef0:	3402      	adds	r4, #2
 8006ef2:	9305      	str	r3, [sp, #20]
 8006ef4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006fb8 <_svfiprintf_r+0x1f4>
 8006ef8:	7821      	ldrb	r1, [r4, #0]
 8006efa:	2203      	movs	r2, #3
 8006efc:	4650      	mov	r0, sl
 8006efe:	f7f9 f967 	bl	80001d0 <memchr>
 8006f02:	b138      	cbz	r0, 8006f14 <_svfiprintf_r+0x150>
 8006f04:	9b04      	ldr	r3, [sp, #16]
 8006f06:	eba0 000a 	sub.w	r0, r0, sl
 8006f0a:	2240      	movs	r2, #64	@ 0x40
 8006f0c:	4082      	lsls	r2, r0
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	3401      	adds	r4, #1
 8006f12:	9304      	str	r3, [sp, #16]
 8006f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f18:	4824      	ldr	r0, [pc, #144]	@ (8006fac <_svfiprintf_r+0x1e8>)
 8006f1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f1e:	2206      	movs	r2, #6
 8006f20:	f7f9 f956 	bl	80001d0 <memchr>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d036      	beq.n	8006f96 <_svfiprintf_r+0x1d2>
 8006f28:	4b21      	ldr	r3, [pc, #132]	@ (8006fb0 <_svfiprintf_r+0x1ec>)
 8006f2a:	bb1b      	cbnz	r3, 8006f74 <_svfiprintf_r+0x1b0>
 8006f2c:	9b03      	ldr	r3, [sp, #12]
 8006f2e:	3307      	adds	r3, #7
 8006f30:	f023 0307 	bic.w	r3, r3, #7
 8006f34:	3308      	adds	r3, #8
 8006f36:	9303      	str	r3, [sp, #12]
 8006f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f3a:	4433      	add	r3, r6
 8006f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f3e:	e76a      	b.n	8006e16 <_svfiprintf_r+0x52>
 8006f40:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f44:	460c      	mov	r4, r1
 8006f46:	2001      	movs	r0, #1
 8006f48:	e7a8      	b.n	8006e9c <_svfiprintf_r+0xd8>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	3401      	adds	r4, #1
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	4619      	mov	r1, r3
 8006f52:	f04f 0c0a 	mov.w	ip, #10
 8006f56:	4620      	mov	r0, r4
 8006f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f5c:	3a30      	subs	r2, #48	@ 0x30
 8006f5e:	2a09      	cmp	r2, #9
 8006f60:	d903      	bls.n	8006f6a <_svfiprintf_r+0x1a6>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0c6      	beq.n	8006ef4 <_svfiprintf_r+0x130>
 8006f66:	9105      	str	r1, [sp, #20]
 8006f68:	e7c4      	b.n	8006ef4 <_svfiprintf_r+0x130>
 8006f6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f6e:	4604      	mov	r4, r0
 8006f70:	2301      	movs	r3, #1
 8006f72:	e7f0      	b.n	8006f56 <_svfiprintf_r+0x192>
 8006f74:	ab03      	add	r3, sp, #12
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	462a      	mov	r2, r5
 8006f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb4 <_svfiprintf_r+0x1f0>)
 8006f7c:	a904      	add	r1, sp, #16
 8006f7e:	4638      	mov	r0, r7
 8006f80:	f3af 8000 	nop.w
 8006f84:	1c42      	adds	r2, r0, #1
 8006f86:	4606      	mov	r6, r0
 8006f88:	d1d6      	bne.n	8006f38 <_svfiprintf_r+0x174>
 8006f8a:	89ab      	ldrh	r3, [r5, #12]
 8006f8c:	065b      	lsls	r3, r3, #25
 8006f8e:	f53f af2d 	bmi.w	8006dec <_svfiprintf_r+0x28>
 8006f92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f94:	e72c      	b.n	8006df0 <_svfiprintf_r+0x2c>
 8006f96:	ab03      	add	r3, sp, #12
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	462a      	mov	r2, r5
 8006f9c:	4b05      	ldr	r3, [pc, #20]	@ (8006fb4 <_svfiprintf_r+0x1f0>)
 8006f9e:	a904      	add	r1, sp, #16
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f000 f879 	bl	8007098 <_printf_i>
 8006fa6:	e7ed      	b.n	8006f84 <_svfiprintf_r+0x1c0>
 8006fa8:	08007498 	.word	0x08007498
 8006fac:	080074a2 	.word	0x080074a2
 8006fb0:	00000000 	.word	0x00000000
 8006fb4:	08006d0d 	.word	0x08006d0d
 8006fb8:	0800749e 	.word	0x0800749e

08006fbc <_printf_common>:
 8006fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc0:	4616      	mov	r6, r2
 8006fc2:	4698      	mov	r8, r3
 8006fc4:	688a      	ldr	r2, [r1, #8]
 8006fc6:	690b      	ldr	r3, [r1, #16]
 8006fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	bfb8      	it	lt
 8006fd0:	4613      	movlt	r3, r2
 8006fd2:	6033      	str	r3, [r6, #0]
 8006fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fd8:	4607      	mov	r7, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	b10a      	cbz	r2, 8006fe2 <_printf_common+0x26>
 8006fde:	3301      	adds	r3, #1
 8006fe0:	6033      	str	r3, [r6, #0]
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	0699      	lsls	r1, r3, #26
 8006fe6:	bf42      	ittt	mi
 8006fe8:	6833      	ldrmi	r3, [r6, #0]
 8006fea:	3302      	addmi	r3, #2
 8006fec:	6033      	strmi	r3, [r6, #0]
 8006fee:	6825      	ldr	r5, [r4, #0]
 8006ff0:	f015 0506 	ands.w	r5, r5, #6
 8006ff4:	d106      	bne.n	8007004 <_printf_common+0x48>
 8006ff6:	f104 0a19 	add.w	sl, r4, #25
 8006ffa:	68e3      	ldr	r3, [r4, #12]
 8006ffc:	6832      	ldr	r2, [r6, #0]
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	42ab      	cmp	r3, r5
 8007002:	dc26      	bgt.n	8007052 <_printf_common+0x96>
 8007004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007008:	6822      	ldr	r2, [r4, #0]
 800700a:	3b00      	subs	r3, #0
 800700c:	bf18      	it	ne
 800700e:	2301      	movne	r3, #1
 8007010:	0692      	lsls	r2, r2, #26
 8007012:	d42b      	bmi.n	800706c <_printf_common+0xb0>
 8007014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007018:	4641      	mov	r1, r8
 800701a:	4638      	mov	r0, r7
 800701c:	47c8      	blx	r9
 800701e:	3001      	adds	r0, #1
 8007020:	d01e      	beq.n	8007060 <_printf_common+0xa4>
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	6922      	ldr	r2, [r4, #16]
 8007026:	f003 0306 	and.w	r3, r3, #6
 800702a:	2b04      	cmp	r3, #4
 800702c:	bf02      	ittt	eq
 800702e:	68e5      	ldreq	r5, [r4, #12]
 8007030:	6833      	ldreq	r3, [r6, #0]
 8007032:	1aed      	subeq	r5, r5, r3
 8007034:	68a3      	ldr	r3, [r4, #8]
 8007036:	bf0c      	ite	eq
 8007038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800703c:	2500      	movne	r5, #0
 800703e:	4293      	cmp	r3, r2
 8007040:	bfc4      	itt	gt
 8007042:	1a9b      	subgt	r3, r3, r2
 8007044:	18ed      	addgt	r5, r5, r3
 8007046:	2600      	movs	r6, #0
 8007048:	341a      	adds	r4, #26
 800704a:	42b5      	cmp	r5, r6
 800704c:	d11a      	bne.n	8007084 <_printf_common+0xc8>
 800704e:	2000      	movs	r0, #0
 8007050:	e008      	b.n	8007064 <_printf_common+0xa8>
 8007052:	2301      	movs	r3, #1
 8007054:	4652      	mov	r2, sl
 8007056:	4641      	mov	r1, r8
 8007058:	4638      	mov	r0, r7
 800705a:	47c8      	blx	r9
 800705c:	3001      	adds	r0, #1
 800705e:	d103      	bne.n	8007068 <_printf_common+0xac>
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007068:	3501      	adds	r5, #1
 800706a:	e7c6      	b.n	8006ffa <_printf_common+0x3e>
 800706c:	18e1      	adds	r1, r4, r3
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	2030      	movs	r0, #48	@ 0x30
 8007072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007076:	4422      	add	r2, r4
 8007078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800707c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007080:	3302      	adds	r3, #2
 8007082:	e7c7      	b.n	8007014 <_printf_common+0x58>
 8007084:	2301      	movs	r3, #1
 8007086:	4622      	mov	r2, r4
 8007088:	4641      	mov	r1, r8
 800708a:	4638      	mov	r0, r7
 800708c:	47c8      	blx	r9
 800708e:	3001      	adds	r0, #1
 8007090:	d0e6      	beq.n	8007060 <_printf_common+0xa4>
 8007092:	3601      	adds	r6, #1
 8007094:	e7d9      	b.n	800704a <_printf_common+0x8e>
	...

08007098 <_printf_i>:
 8007098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800709c:	7e0f      	ldrb	r7, [r1, #24]
 800709e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070a0:	2f78      	cmp	r7, #120	@ 0x78
 80070a2:	4691      	mov	r9, r2
 80070a4:	4680      	mov	r8, r0
 80070a6:	460c      	mov	r4, r1
 80070a8:	469a      	mov	sl, r3
 80070aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070ae:	d807      	bhi.n	80070c0 <_printf_i+0x28>
 80070b0:	2f62      	cmp	r7, #98	@ 0x62
 80070b2:	d80a      	bhi.n	80070ca <_printf_i+0x32>
 80070b4:	2f00      	cmp	r7, #0
 80070b6:	f000 80d1 	beq.w	800725c <_printf_i+0x1c4>
 80070ba:	2f58      	cmp	r7, #88	@ 0x58
 80070bc:	f000 80b8 	beq.w	8007230 <_printf_i+0x198>
 80070c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070c8:	e03a      	b.n	8007140 <_printf_i+0xa8>
 80070ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070ce:	2b15      	cmp	r3, #21
 80070d0:	d8f6      	bhi.n	80070c0 <_printf_i+0x28>
 80070d2:	a101      	add	r1, pc, #4	@ (adr r1, 80070d8 <_printf_i+0x40>)
 80070d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070d8:	08007131 	.word	0x08007131
 80070dc:	08007145 	.word	0x08007145
 80070e0:	080070c1 	.word	0x080070c1
 80070e4:	080070c1 	.word	0x080070c1
 80070e8:	080070c1 	.word	0x080070c1
 80070ec:	080070c1 	.word	0x080070c1
 80070f0:	08007145 	.word	0x08007145
 80070f4:	080070c1 	.word	0x080070c1
 80070f8:	080070c1 	.word	0x080070c1
 80070fc:	080070c1 	.word	0x080070c1
 8007100:	080070c1 	.word	0x080070c1
 8007104:	08007243 	.word	0x08007243
 8007108:	0800716f 	.word	0x0800716f
 800710c:	080071fd 	.word	0x080071fd
 8007110:	080070c1 	.word	0x080070c1
 8007114:	080070c1 	.word	0x080070c1
 8007118:	08007265 	.word	0x08007265
 800711c:	080070c1 	.word	0x080070c1
 8007120:	0800716f 	.word	0x0800716f
 8007124:	080070c1 	.word	0x080070c1
 8007128:	080070c1 	.word	0x080070c1
 800712c:	08007205 	.word	0x08007205
 8007130:	6833      	ldr	r3, [r6, #0]
 8007132:	1d1a      	adds	r2, r3, #4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6032      	str	r2, [r6, #0]
 8007138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800713c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007140:	2301      	movs	r3, #1
 8007142:	e09c      	b.n	800727e <_printf_i+0x1e6>
 8007144:	6833      	ldr	r3, [r6, #0]
 8007146:	6820      	ldr	r0, [r4, #0]
 8007148:	1d19      	adds	r1, r3, #4
 800714a:	6031      	str	r1, [r6, #0]
 800714c:	0606      	lsls	r6, r0, #24
 800714e:	d501      	bpl.n	8007154 <_printf_i+0xbc>
 8007150:	681d      	ldr	r5, [r3, #0]
 8007152:	e003      	b.n	800715c <_printf_i+0xc4>
 8007154:	0645      	lsls	r5, r0, #25
 8007156:	d5fb      	bpl.n	8007150 <_printf_i+0xb8>
 8007158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800715c:	2d00      	cmp	r5, #0
 800715e:	da03      	bge.n	8007168 <_printf_i+0xd0>
 8007160:	232d      	movs	r3, #45	@ 0x2d
 8007162:	426d      	negs	r5, r5
 8007164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007168:	4858      	ldr	r0, [pc, #352]	@ (80072cc <_printf_i+0x234>)
 800716a:	230a      	movs	r3, #10
 800716c:	e011      	b.n	8007192 <_printf_i+0xfa>
 800716e:	6821      	ldr	r1, [r4, #0]
 8007170:	6833      	ldr	r3, [r6, #0]
 8007172:	0608      	lsls	r0, r1, #24
 8007174:	f853 5b04 	ldr.w	r5, [r3], #4
 8007178:	d402      	bmi.n	8007180 <_printf_i+0xe8>
 800717a:	0649      	lsls	r1, r1, #25
 800717c:	bf48      	it	mi
 800717e:	b2ad      	uxthmi	r5, r5
 8007180:	2f6f      	cmp	r7, #111	@ 0x6f
 8007182:	4852      	ldr	r0, [pc, #328]	@ (80072cc <_printf_i+0x234>)
 8007184:	6033      	str	r3, [r6, #0]
 8007186:	bf14      	ite	ne
 8007188:	230a      	movne	r3, #10
 800718a:	2308      	moveq	r3, #8
 800718c:	2100      	movs	r1, #0
 800718e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007192:	6866      	ldr	r6, [r4, #4]
 8007194:	60a6      	str	r6, [r4, #8]
 8007196:	2e00      	cmp	r6, #0
 8007198:	db05      	blt.n	80071a6 <_printf_i+0x10e>
 800719a:	6821      	ldr	r1, [r4, #0]
 800719c:	432e      	orrs	r6, r5
 800719e:	f021 0104 	bic.w	r1, r1, #4
 80071a2:	6021      	str	r1, [r4, #0]
 80071a4:	d04b      	beq.n	800723e <_printf_i+0x1a6>
 80071a6:	4616      	mov	r6, r2
 80071a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80071ac:	fb03 5711 	mls	r7, r3, r1, r5
 80071b0:	5dc7      	ldrb	r7, [r0, r7]
 80071b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071b6:	462f      	mov	r7, r5
 80071b8:	42bb      	cmp	r3, r7
 80071ba:	460d      	mov	r5, r1
 80071bc:	d9f4      	bls.n	80071a8 <_printf_i+0x110>
 80071be:	2b08      	cmp	r3, #8
 80071c0:	d10b      	bne.n	80071da <_printf_i+0x142>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	07df      	lsls	r7, r3, #31
 80071c6:	d508      	bpl.n	80071da <_printf_i+0x142>
 80071c8:	6923      	ldr	r3, [r4, #16]
 80071ca:	6861      	ldr	r1, [r4, #4]
 80071cc:	4299      	cmp	r1, r3
 80071ce:	bfde      	ittt	le
 80071d0:	2330      	movle	r3, #48	@ 0x30
 80071d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071da:	1b92      	subs	r2, r2, r6
 80071dc:	6122      	str	r2, [r4, #16]
 80071de:	f8cd a000 	str.w	sl, [sp]
 80071e2:	464b      	mov	r3, r9
 80071e4:	aa03      	add	r2, sp, #12
 80071e6:	4621      	mov	r1, r4
 80071e8:	4640      	mov	r0, r8
 80071ea:	f7ff fee7 	bl	8006fbc <_printf_common>
 80071ee:	3001      	adds	r0, #1
 80071f0:	d14a      	bne.n	8007288 <_printf_i+0x1f0>
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
 80071f6:	b004      	add	sp, #16
 80071f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	f043 0320 	orr.w	r3, r3, #32
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	4832      	ldr	r0, [pc, #200]	@ (80072d0 <_printf_i+0x238>)
 8007206:	2778      	movs	r7, #120	@ 0x78
 8007208:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	6831      	ldr	r1, [r6, #0]
 8007210:	061f      	lsls	r7, r3, #24
 8007212:	f851 5b04 	ldr.w	r5, [r1], #4
 8007216:	d402      	bmi.n	800721e <_printf_i+0x186>
 8007218:	065f      	lsls	r7, r3, #25
 800721a:	bf48      	it	mi
 800721c:	b2ad      	uxthmi	r5, r5
 800721e:	6031      	str	r1, [r6, #0]
 8007220:	07d9      	lsls	r1, r3, #31
 8007222:	bf44      	itt	mi
 8007224:	f043 0320 	orrmi.w	r3, r3, #32
 8007228:	6023      	strmi	r3, [r4, #0]
 800722a:	b11d      	cbz	r5, 8007234 <_printf_i+0x19c>
 800722c:	2310      	movs	r3, #16
 800722e:	e7ad      	b.n	800718c <_printf_i+0xf4>
 8007230:	4826      	ldr	r0, [pc, #152]	@ (80072cc <_printf_i+0x234>)
 8007232:	e7e9      	b.n	8007208 <_printf_i+0x170>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	f023 0320 	bic.w	r3, r3, #32
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	e7f6      	b.n	800722c <_printf_i+0x194>
 800723e:	4616      	mov	r6, r2
 8007240:	e7bd      	b.n	80071be <_printf_i+0x126>
 8007242:	6833      	ldr	r3, [r6, #0]
 8007244:	6825      	ldr	r5, [r4, #0]
 8007246:	6961      	ldr	r1, [r4, #20]
 8007248:	1d18      	adds	r0, r3, #4
 800724a:	6030      	str	r0, [r6, #0]
 800724c:	062e      	lsls	r6, r5, #24
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	d501      	bpl.n	8007256 <_printf_i+0x1be>
 8007252:	6019      	str	r1, [r3, #0]
 8007254:	e002      	b.n	800725c <_printf_i+0x1c4>
 8007256:	0668      	lsls	r0, r5, #25
 8007258:	d5fb      	bpl.n	8007252 <_printf_i+0x1ba>
 800725a:	8019      	strh	r1, [r3, #0]
 800725c:	2300      	movs	r3, #0
 800725e:	6123      	str	r3, [r4, #16]
 8007260:	4616      	mov	r6, r2
 8007262:	e7bc      	b.n	80071de <_printf_i+0x146>
 8007264:	6833      	ldr	r3, [r6, #0]
 8007266:	1d1a      	adds	r2, r3, #4
 8007268:	6032      	str	r2, [r6, #0]
 800726a:	681e      	ldr	r6, [r3, #0]
 800726c:	6862      	ldr	r2, [r4, #4]
 800726e:	2100      	movs	r1, #0
 8007270:	4630      	mov	r0, r6
 8007272:	f7f8 ffad 	bl	80001d0 <memchr>
 8007276:	b108      	cbz	r0, 800727c <_printf_i+0x1e4>
 8007278:	1b80      	subs	r0, r0, r6
 800727a:	6060      	str	r0, [r4, #4]
 800727c:	6863      	ldr	r3, [r4, #4]
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	2300      	movs	r3, #0
 8007282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007286:	e7aa      	b.n	80071de <_printf_i+0x146>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	4632      	mov	r2, r6
 800728c:	4649      	mov	r1, r9
 800728e:	4640      	mov	r0, r8
 8007290:	47d0      	blx	sl
 8007292:	3001      	adds	r0, #1
 8007294:	d0ad      	beq.n	80071f2 <_printf_i+0x15a>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	079b      	lsls	r3, r3, #30
 800729a:	d413      	bmi.n	80072c4 <_printf_i+0x22c>
 800729c:	68e0      	ldr	r0, [r4, #12]
 800729e:	9b03      	ldr	r3, [sp, #12]
 80072a0:	4298      	cmp	r0, r3
 80072a2:	bfb8      	it	lt
 80072a4:	4618      	movlt	r0, r3
 80072a6:	e7a6      	b.n	80071f6 <_printf_i+0x15e>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4632      	mov	r2, r6
 80072ac:	4649      	mov	r1, r9
 80072ae:	4640      	mov	r0, r8
 80072b0:	47d0      	blx	sl
 80072b2:	3001      	adds	r0, #1
 80072b4:	d09d      	beq.n	80071f2 <_printf_i+0x15a>
 80072b6:	3501      	adds	r5, #1
 80072b8:	68e3      	ldr	r3, [r4, #12]
 80072ba:	9903      	ldr	r1, [sp, #12]
 80072bc:	1a5b      	subs	r3, r3, r1
 80072be:	42ab      	cmp	r3, r5
 80072c0:	dcf2      	bgt.n	80072a8 <_printf_i+0x210>
 80072c2:	e7eb      	b.n	800729c <_printf_i+0x204>
 80072c4:	2500      	movs	r5, #0
 80072c6:	f104 0619 	add.w	r6, r4, #25
 80072ca:	e7f5      	b.n	80072b8 <_printf_i+0x220>
 80072cc:	080074a9 	.word	0x080074a9
 80072d0:	080074ba 	.word	0x080074ba

080072d4 <memmove>:
 80072d4:	4288      	cmp	r0, r1
 80072d6:	b510      	push	{r4, lr}
 80072d8:	eb01 0402 	add.w	r4, r1, r2
 80072dc:	d902      	bls.n	80072e4 <memmove+0x10>
 80072de:	4284      	cmp	r4, r0
 80072e0:	4623      	mov	r3, r4
 80072e2:	d807      	bhi.n	80072f4 <memmove+0x20>
 80072e4:	1e43      	subs	r3, r0, #1
 80072e6:	42a1      	cmp	r1, r4
 80072e8:	d008      	beq.n	80072fc <memmove+0x28>
 80072ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072f2:	e7f8      	b.n	80072e6 <memmove+0x12>
 80072f4:	4402      	add	r2, r0
 80072f6:	4601      	mov	r1, r0
 80072f8:	428a      	cmp	r2, r1
 80072fa:	d100      	bne.n	80072fe <memmove+0x2a>
 80072fc:	bd10      	pop	{r4, pc}
 80072fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007306:	e7f7      	b.n	80072f8 <memmove+0x24>

08007308 <_realloc_r>:
 8007308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730c:	4607      	mov	r7, r0
 800730e:	4614      	mov	r4, r2
 8007310:	460d      	mov	r5, r1
 8007312:	b921      	cbnz	r1, 800731e <_realloc_r+0x16>
 8007314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007318:	4611      	mov	r1, r2
 800731a:	f7ff bb89 	b.w	8006a30 <_malloc_r>
 800731e:	b92a      	cbnz	r2, 800732c <_realloc_r+0x24>
 8007320:	f7ff fcaa 	bl	8006c78 <_free_r>
 8007324:	4625      	mov	r5, r4
 8007326:	4628      	mov	r0, r5
 8007328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732c:	f000 f81a 	bl	8007364 <_malloc_usable_size_r>
 8007330:	4284      	cmp	r4, r0
 8007332:	4606      	mov	r6, r0
 8007334:	d802      	bhi.n	800733c <_realloc_r+0x34>
 8007336:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800733a:	d8f4      	bhi.n	8007326 <_realloc_r+0x1e>
 800733c:	4621      	mov	r1, r4
 800733e:	4638      	mov	r0, r7
 8007340:	f7ff fb76 	bl	8006a30 <_malloc_r>
 8007344:	4680      	mov	r8, r0
 8007346:	b908      	cbnz	r0, 800734c <_realloc_r+0x44>
 8007348:	4645      	mov	r5, r8
 800734a:	e7ec      	b.n	8007326 <_realloc_r+0x1e>
 800734c:	42b4      	cmp	r4, r6
 800734e:	4622      	mov	r2, r4
 8007350:	4629      	mov	r1, r5
 8007352:	bf28      	it	cs
 8007354:	4632      	movcs	r2, r6
 8007356:	f7ff fc81 	bl	8006c5c <memcpy>
 800735a:	4629      	mov	r1, r5
 800735c:	4638      	mov	r0, r7
 800735e:	f7ff fc8b 	bl	8006c78 <_free_r>
 8007362:	e7f1      	b.n	8007348 <_realloc_r+0x40>

08007364 <_malloc_usable_size_r>:
 8007364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007368:	1f18      	subs	r0, r3, #4
 800736a:	2b00      	cmp	r3, #0
 800736c:	bfbc      	itt	lt
 800736e:	580b      	ldrlt	r3, [r1, r0]
 8007370:	18c0      	addlt	r0, r0, r3
 8007372:	4770      	bx	lr

08007374 <_init>:
 8007374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007376:	bf00      	nop
 8007378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737a:	bc08      	pop	{r3}
 800737c:	469e      	mov	lr, r3
 800737e:	4770      	bx	lr

08007380 <_fini>:
 8007380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007382:	bf00      	nop
 8007384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007386:	bc08      	pop	{r3}
 8007388:	469e      	mov	lr, r3
 800738a:	4770      	bx	lr
