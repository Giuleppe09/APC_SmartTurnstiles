
new_turnstiles.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007824  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080079b4  080079b4  000089b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c04  08007c04  000096c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c04  08007c04  00008c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c0c  08007c0c  000096c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c0c  08007c0c  00008c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c10  08007c10  00008c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006c8  20000000  08007c14  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000096c8  2**0
                  CONTENTS
 10 .bss          00000628  200006c8  200006c8  000096c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000cf0  20000cf0  000096c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000096c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f97  00000000  00000000  000096f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f51  00000000  00000000  0002168f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  000245e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001053  00000000  00000000  00025aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff8b  00000000  00000000  00026afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab20  00000000  00000000  00046a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bebe3  00000000  00000000  000615a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120189  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e70  00000000  00000000  001201cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0012603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006c8 	.word	0x200006c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800799c 	.word	0x0800799c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006cc 	.word	0x200006cc
 80001cc:	0800799c 	.word	0x0800799c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <i2c_pcf8574_write>:
#define RS_DATA         0x01
#define LCD_BACKLIGHT   0x08 // Backlight bit on PCF8574

// Function to send a byte to the PCF8574
void i2c_pcf8574_write(uint8_t data)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af02      	add	r7, sp, #8
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, &data, 1, 100);
 80002aa:	1dfa      	adds	r2, r7, #7
 80002ac:	2364      	movs	r3, #100	@ 0x64
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	2301      	movs	r3, #1
 80002b2:	214e      	movs	r1, #78	@ 0x4e
 80002b4:	4803      	ldr	r0, [pc, #12]	@ (80002c4 <i2c_pcf8574_write+0x24>)
 80002b6:	f002 fba9 	bl	8002a0c <HAL_I2C_Master_Transmit>
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	200006e4 	.word	0x200006e4

080002c8 <lcd_send_nibble>:

// Function to send a command or data nibble to the LCD
void lcd_send_nibble(uint8_t nibble, uint8_t rs)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	460a      	mov	r2, r1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	4613      	mov	r3, r2
 80002d6:	71bb      	strb	r3, [r7, #6]
    uint8_t data_t;

    // Construct the byte for PCF8574:
    // D7 D6 D5 D4 BL EN RW RS
    // nibble (high 4 bits) + Backlight + Enable + Read/Write (Write=0) + Register Select
    data_t = (nibble & 0xF0) | LCD_BACKLIGHT | rs;
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	f023 030f 	bic.w	r3, r3, #15
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	4313      	orrs	r3, r2
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	73fb      	strb	r3, [r7, #15]

    // Send high nibble with Enable high, then Enable low
    i2c_pcf8574_write(data_t | 0x04);  // EN = 1 (0x04)
 80002ec:	7bfb      	ldrb	r3, [r7, #15]
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ffd3 	bl	80002a0 <i2c_pcf8574_write>
    HAL_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f002 f808 	bl	8002310 <HAL_Delay>
    i2c_pcf8574_write(data_t & ~0x04); // EN = 0 (~0x04)
 8000300:	7bfb      	ldrb	r3, [r7, #15]
 8000302:	f023 0304 	bic.w	r3, r3, #4
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ffc9 	bl	80002a0 <i2c_pcf8574_write>
    HAL_Delay(1);
 800030e:	2001      	movs	r0, #1
 8000310:	f001 fffe 	bl	8002310 <HAL_Delay>
}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <lcd_send_cmd>:

// Function to send a command to the LCD
void lcd_send_cmd(char cmd)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    // Send high nibble
    lcd_send_nibble(cmd & 0xF0, RS_COMMAND);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ffc9 	bl	80002c8 <lcd_send_nibble>
    // Send low nibble
    lcd_send_nibble((cmd & 0x0F) << 4, RS_COMMAND);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	011b      	lsls	r3, r3, #4
 800033a:	b2db      	uxtb	r3, r3
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ffc2 	bl	80002c8 <lcd_send_nibble>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <lcd_send_data>:

// Function to send data to the LCD
void lcd_send_data(char data)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
    // Send high nibble
    lcd_send_nibble(data & 0xF0, RS_DATA);
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f023 030f 	bic.w	r3, r3, #15
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2101      	movs	r1, #1
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ffb1 	bl	80002c8 <lcd_send_nibble>
    // Send low nibble
    lcd_send_nibble((data & 0x0F) << 4, RS_DATA);
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	011b      	lsls	r3, r3, #4
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2101      	movs	r1, #1
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ffaa 	bl	80002c8 <lcd_send_nibble>
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <lcd_init>:

// Function to initialize the LCD
void lcd_init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
    // 4-bit mode initialization sequence (datasheet dependent, common for HD44780)
    HAL_Delay(50);  // Power-on delay
 8000380:	2032      	movs	r0, #50	@ 0x32
 8000382:	f001 ffc5 	bl	8002310 <HAL_Delay>
    lcd_send_nibble(0x30, RS_COMMAND); // Function Set: 8-bit interface
 8000386:	2100      	movs	r1, #0
 8000388:	2030      	movs	r0, #48	@ 0x30
 800038a:	f7ff ff9d 	bl	80002c8 <lcd_send_nibble>
    HAL_Delay(5);   // Wait for more than 4.1ms
 800038e:	2005      	movs	r0, #5
 8000390:	f001 ffbe 	bl	8002310 <HAL_Delay>
    lcd_send_nibble(0x30, RS_COMMAND); // Function Set: 8-bit interface
 8000394:	2100      	movs	r1, #0
 8000396:	2030      	movs	r0, #48	@ 0x30
 8000398:	f7ff ff96 	bl	80002c8 <lcd_send_nibble>
    HAL_Delay(1);   // Wait for more than 100us
 800039c:	2001      	movs	r0, #1
 800039e:	f001 ffb7 	bl	8002310 <HAL_Delay>
    lcd_send_nibble(0x30, RS_COMMAND); // Function Set: 8-bit interface
 80003a2:	2100      	movs	r1, #0
 80003a4:	2030      	movs	r0, #48	@ 0x30
 80003a6:	f7ff ff8f 	bl	80002c8 <lcd_send_nibble>
    HAL_Delay(10);
 80003aa:	200a      	movs	r0, #10
 80003ac:	f001 ffb0 	bl	8002310 <HAL_Delay>

    lcd_send_nibble(0x20, RS_COMMAND); // Function Set: 4-bit interface
 80003b0:	2100      	movs	r1, #0
 80003b2:	2020      	movs	r0, #32
 80003b4:	f7ff ff88 	bl	80002c8 <lcd_send_nibble>
    HAL_Delay(10);
 80003b8:	200a      	movs	r0, #10
 80003ba:	f001 ffa9 	bl	8002310 <HAL_Delay>

    // Now in 4-bit mode
    lcd_send_cmd(0x28); // Function Set: 4-bit, 2 lines, 5x8 dots
 80003be:	2028      	movs	r0, #40	@ 0x28
 80003c0:	f7ff ffac 	bl	800031c <lcd_send_cmd>
    HAL_Delay(1);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f001 ffa3 	bl	8002310 <HAL_Delay>
    lcd_send_cmd(0x08); // Display OFF
 80003ca:	2008      	movs	r0, #8
 80003cc:	f7ff ffa6 	bl	800031c <lcd_send_cmd>
    HAL_Delay(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f001 ff9d 	bl	8002310 <HAL_Delay>
    lcd_send_cmd(0x01); // Clear Display
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff ffa0 	bl	800031c <lcd_send_cmd>
    HAL_Delay(2);   // Clear display takes longer
 80003dc:	2002      	movs	r0, #2
 80003de:	f001 ff97 	bl	8002310 <HAL_Delay>
    lcd_send_cmd(0x06); // Entry Mode Set: Increment cursor, no display shift
 80003e2:	2006      	movs	r0, #6
 80003e4:	f7ff ff9a 	bl	800031c <lcd_send_cmd>
    HAL_Delay(1);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f001 ff91 	bl	8002310 <HAL_Delay>
    lcd_send_cmd(0x0C); // Display ON, Cursor OFF, Blink OFF
 80003ee:	200c      	movs	r0, #12
 80003f0:	f7ff ff94 	bl	800031c <lcd_send_cmd>
    HAL_Delay(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f001 ff8b 	bl	8002310 <HAL_Delay>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}

080003fe <lcd_clear>:

// Function to clear the LCD
void lcd_clear(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01); // Clear display
 8000402:	2001      	movs	r0, #1
 8000404:	f7ff ff8a 	bl	800031c <lcd_send_cmd>
    HAL_Delay(2);       // Delay for clear operation
 8000408:	2002      	movs	r0, #2
 800040a:	f001 ff81 	bl	8002310 <HAL_Delay>
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}

08000412 <lcd_put_cur>:

// Function to set cursor position
void lcd_put_cur(int row, int col)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b084      	sub	sp, #16
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]
    uint8_t address;
    switch(row)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d003      	beq.n	800042a <lcd_put_cur+0x18>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d005      	beq.n	8000434 <lcd_put_cur+0x22>
            break;
        case 1:
            address = 0xC0 + col; // 0xC0 is DDRAM address for line 2
            break;
        default:
            return; // Invalid row
 8000428:	e00d      	b.n	8000446 <lcd_put_cur+0x34>
            address = 0x80 + col; // 0x80 is DDRAM address for line 1
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	3b80      	subs	r3, #128	@ 0x80
 8000430:	73fb      	strb	r3, [r7, #15]
            break;
 8000432:	e004      	b.n	800043e <lcd_put_cur+0x2c>
            address = 0xC0 + col; // 0xC0 is DDRAM address for line 2
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	3b40      	subs	r3, #64	@ 0x40
 800043a:	73fb      	strb	r3, [r7, #15]
            break;
 800043c:	bf00      	nop
    }
    lcd_send_cmd(address);
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff6b 	bl	800031c <lcd_send_cmd>
}
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <lcd_send_string>:

// Function to send a string to the LCD
void lcd_send_string(char *str)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
    while (*str)
 8000454:	e006      	b.n	8000464 <lcd_send_string+0x18>
    {
        lcd_send_data(*str++);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	1c5a      	adds	r2, r3, #1
 800045a:	607a      	str	r2, [r7, #4]
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff74 	bl	800034c <lcd_send_data>
    while (*str)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d1f4      	bne.n	8000456 <lcd_send_string+0xa>
    }
}
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <lcd_display_message_lines>:

// Funzione per visualizzare due linee di testo sull'LCD
void lcd_display_message_lines(const char* line1, const char* line2)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b082      	sub	sp, #8
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
    lcd_clear();
 8000480:	f7ff ffbd 	bl	80003fe <lcd_clear>

    if (line1 != NULL) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d006      	beq.n	8000498 <lcd_display_message_lines+0x22>
        lcd_put_cur(0, 0);
 800048a:	2100      	movs	r1, #0
 800048c:	2000      	movs	r0, #0
 800048e:	f7ff ffc0 	bl	8000412 <lcd_put_cur>
        // lcd_send_string invia l'intera stringa fino al null terminator
        // Per 16x2, assicurati che le stringhe passate non superino 16 caratteri per riga.
        lcd_send_string((char*)line1); // Cast a char* necessario per lcd_send_string
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f7ff ffda 	bl	800044c <lcd_send_string>
    }

    if (line2 != NULL) {
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d006      	beq.n	80004ac <lcd_display_message_lines+0x36>
        lcd_put_cur(1, 0);
 800049e:	2100      	movs	r1, #0
 80004a0:	2001      	movs	r0, #1
 80004a2:	f7ff ffb6 	bl	8000412 <lcd_put_cur>
        lcd_send_string((char*)line2); // Cast a char* necessario per lcd_send_string
 80004a6:	6838      	ldr	r0, [r7, #0]
 80004a8:	f7ff ffd0 	bl	800044c <lcd_send_string>
    }
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <i2c_scanner>:
/* USER CODE BEGIN 0 */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void i2c_scanner(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
    uint8_t i;
    HAL_StatusTypeDef ret;
    char buffer[20];
    uint8_t found_devices = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	75bb      	strb	r3, [r7, #22]
    // Optional: if you have a serial port/UART configured, you can print messages there
    // Otherwise, you can use a breakpoint in debugger to check the output
    // For now, let's assume you'll use a debugger or just count LEDs

    // Toggle a LED to indicate scanning started
    HAL_GPIO_TogglePin(GPIOE, LD3_Pin); // Use one of your LEDs on GPIOE
 80004be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004c2:	4817      	ldr	r0, [pc, #92]	@ (8000520 <i2c_scanner+0x6c>)
 80004c4:	f002 f9ec 	bl	80028a0 <HAL_GPIO_TogglePin>

    for(i = 1; i < 128; i++) // I2C addresses are 7-bit, from 0x01 to 0x77
 80004c8:	2301      	movs	r3, #1
 80004ca:	75fb      	strb	r3, [r7, #23]
 80004cc:	e01b      	b.n	8000506 <i2c_scanner+0x52>
    {
        // Try to transmit 1 byte to the current address
        // The last parameter (1) is the number of bytes to transmit, doesn't matter what
        // The timeout (5) is short to quickly check for ACK
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 2, 5); // Shift address for 8-bit format
 80004ce:	7dfb      	ldrb	r3, [r7, #23]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	b299      	uxth	r1, r3
 80004d6:	2305      	movs	r3, #5
 80004d8:	2202      	movs	r2, #2
 80004da:	4812      	ldr	r0, [pc, #72]	@ (8000524 <i2c_scanner+0x70>)
 80004dc:	f002 fbae 	bl	8002c3c <HAL_I2C_IsDeviceReady>
 80004e0:	4603      	mov	r3, r0
 80004e2:	757b      	strb	r3, [r7, #21]

        if (ret == HAL_OK) // Device responded (ACK received)
 80004e4:	7d7b      	ldrb	r3, [r7, #21]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d10a      	bne.n	8000500 <i2c_scanner+0x4c>
        {
            // Device found!
            found_devices++;
 80004ea:	7dbb      	ldrb	r3, [r7, #22]
 80004ec:	3301      	adds	r3, #1
 80004ee:	75bb      	strb	r3, [r7, #22]
            // If you have a UART setup, you could print the address:
            // sprintf(buffer, "Found I2C device at 0x%X\r\n", i);
            // HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);

            // You can also blink a specific LED or set a breakpoint here
            HAL_GPIO_TogglePin(GPIOE, LD4_Pin); // Blink another LED to confirm detection
 80004f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004f4:	480a      	ldr	r0, [pc, #40]	@ (8000520 <i2c_scanner+0x6c>)
 80004f6:	f002 f9d3 	bl	80028a0 <HAL_GPIO_TogglePin>
            HAL_Delay(100); // Small delay to make LED blink visible
 80004fa:	2064      	movs	r0, #100	@ 0x64
 80004fc:	f001 ff08 	bl	8002310 <HAL_Delay>
    for(i = 1; i < 128; i++) // I2C addresses are 7-bit, from 0x01 to 0x77
 8000500:	7dfb      	ldrb	r3, [r7, #23]
 8000502:	3301      	adds	r3, #1
 8000504:	75fb      	strb	r3, [r7, #23]
 8000506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800050a:	2b00      	cmp	r3, #0
 800050c:	dadf      	bge.n	80004ce <i2c_scanner+0x1a>
        }
    }

    // Toggle LED again to indicate scanning finished
    HAL_GPIO_TogglePin(GPIOE, LD3_Pin);
 800050e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000512:	4803      	ldr	r0, [pc, #12]	@ (8000520 <i2c_scanner+0x6c>)
 8000514:	f002 f9c4 	bl	80028a0 <HAL_GPIO_TogglePin>

    // If you're debugging, you can check 'found_devices' variable here.
    // If found_devices > 0, it means at least one device responded.
    // If found_devices == 1 and you only have the LCD, then 'i' in the loop
    // when ret == HAL_OK will be your LCD address.
}
 8000518:	bf00      	nop
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	48001000 	.word	0x48001000
 8000524:	200006e4 	.word	0x200006e4

08000528 <truncateString>:

// Funzione per tagliare una stringa a una lunghezza massima
void truncateString(char* str, size_t maxLength) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
    if (strlen(str) > maxLength) {
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff fe56 	bl	80001e4 <strlen>
 8000538:	4602      	mov	r2, r0
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	4293      	cmp	r3, r2
 800053e:	d204      	bcs.n	800054a <truncateString+0x22>
        str[maxLength] = '\0';
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	4413      	add	r3, r2
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
    }
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <delay>:

void delay (uint16_t us)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <delay+0x30>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000566:	bf00      	nop
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <delay+0x30>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	429a      	cmp	r2, r3
 8000572:	d3f9      	bcc.n	8000568 <delay+0x14>
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	2000079c 	.word	0x2000079c

08000588 <stepper_set_rpm>:

void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 8000590:	f643 1238 	movw	r2, #14648	@ 0x3938
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	fb92 f3f3 	sdiv	r3, r2, r3
 800059a:	b29b      	uxth	r3, r3
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffd9 	bl	8000554 <delay>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <stepper_half_drive>:

void stepper_half_drive (int step)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	switch (step){
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b07      	cmp	r3, #7
 80005b8:	f200 80d4 	bhi.w	8000764 <stepper_half_drive+0x1b8>
 80005bc:	a201      	add	r2, pc, #4	@ (adr r2, 80005c4 <stepper_half_drive+0x18>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	080005e5 	.word	0x080005e5
 80005c8:	08000615 	.word	0x08000615
 80005cc:	08000645 	.word	0x08000645
 80005d0:	08000675 	.word	0x08000675
 80005d4:	080006a5 	.word	0x080006a5
 80005d8:	080006d5 	.word	0x080006d5
 80005dc:	08000705 	.word	0x08000705
 80005e0:	08000735 	.word	0x08000735
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 80005e4:	2201      	movs	r2, #1
 80005e6:	2102      	movs	r1, #2
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ec:	f002 f940 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 80005f0:	2200      	movs	r2, #0
 80005f2:	2104      	movs	r1, #4
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f8:	f002 f93a 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80005fc:	2200      	movs	r2, #0
 80005fe:	2108      	movs	r1, #8
 8000600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000604:	f002 f934 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8000608:	2200      	movs	r2, #0
 800060a:	2110      	movs	r1, #16
 800060c:	4857      	ldr	r0, [pc, #348]	@ (800076c <stepper_half_drive+0x1c0>)
 800060e:	f002 f92f 	bl	8002870 <HAL_GPIO_WritePin>
			break;
 8000612:	e0a7      	b.n	8000764 <stepper_half_drive+0x1b8>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 8000614:	2201      	movs	r2, #1
 8000616:	2102      	movs	r1, #2
 8000618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061c:	f002 f928 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 8000620:	2201      	movs	r2, #1
 8000622:	2104      	movs	r1, #4
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f002 f922 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 800062c:	2200      	movs	r2, #0
 800062e:	2108      	movs	r1, #8
 8000630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000634:	f002 f91c 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	484b      	ldr	r0, [pc, #300]	@ (800076c <stepper_half_drive+0x1c0>)
 800063e:	f002 f917 	bl	8002870 <HAL_GPIO_WritePin>
			break;
 8000642:	e08f      	b.n	8000764 <stepper_half_drive+0x1b8>
		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8000644:	2200      	movs	r2, #0
 8000646:	2102      	movs	r1, #2
 8000648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064c:	f002 f910 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 8000650:	2201      	movs	r2, #1
 8000652:	2104      	movs	r1, #4
 8000654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000658:	f002 f90a 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 800065c:	2200      	movs	r2, #0
 800065e:	2108      	movs	r1, #8
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f002 f904 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8000668:	2200      	movs	r2, #0
 800066a:	2110      	movs	r1, #16
 800066c:	483f      	ldr	r0, [pc, #252]	@ (800076c <stepper_half_drive+0x1c0>)
 800066e:	f002 f8ff 	bl	8002870 <HAL_GPIO_WritePin>
			break;
 8000672:	e077      	b.n	8000764 <stepper_half_drive+0x1b8>
		case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8000674:	2200      	movs	r2, #0
 8000676:	2102      	movs	r1, #2
 8000678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067c:	f002 f8f8 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 8000680:	2201      	movs	r2, #1
 8000682:	2104      	movs	r1, #4
 8000684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000688:	f002 f8f2 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 800068c:	2201      	movs	r2, #1
 800068e:	2108      	movs	r1, #8
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f002 f8ec 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	4833      	ldr	r0, [pc, #204]	@ (800076c <stepper_half_drive+0x1c0>)
 800069e:	f002 f8e7 	bl	8002870 <HAL_GPIO_WritePin>
			break;
 80006a2:	e05f      	b.n	8000764 <stepper_half_drive+0x1b8>
		case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 80006a4:	2200      	movs	r2, #0
 80006a6:	2102      	movs	r1, #2
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ac:	f002 f8e0 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 80006b0:	2200      	movs	r2, #0
 80006b2:	2104      	movs	r1, #4
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b8:	f002 f8da 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 80006bc:	2201      	movs	r2, #1
 80006be:	2108      	movs	r1, #8
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c4:	f002 f8d4 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 80006c8:	2200      	movs	r2, #0
 80006ca:	2110      	movs	r1, #16
 80006cc:	4827      	ldr	r0, [pc, #156]	@ (800076c <stepper_half_drive+0x1c0>)
 80006ce:	f002 f8cf 	bl	8002870 <HAL_GPIO_WritePin>
			break;
 80006d2:	e047      	b.n	8000764 <stepper_half_drive+0x1b8>
		case 5:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 80006d4:	2200      	movs	r2, #0
 80006d6:	2102      	movs	r1, #2
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006dc:	f002 f8c8 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 80006e0:	2200      	movs	r2, #0
 80006e2:	2104      	movs	r1, #4
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e8:	f002 f8c2 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 80006ec:	2201      	movs	r2, #1
 80006ee:	2108      	movs	r1, #8
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f4:	f002 f8bc 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 80006f8:	2201      	movs	r2, #1
 80006fa:	2110      	movs	r1, #16
 80006fc:	481b      	ldr	r0, [pc, #108]	@ (800076c <stepper_half_drive+0x1c0>)
 80006fe:	f002 f8b7 	bl	8002870 <HAL_GPIO_WritePin>
			break;
 8000702:	e02f      	b.n	8000764 <stepper_half_drive+0x1b8>
		case 6:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8000704:	2200      	movs	r2, #0
 8000706:	2102      	movs	r1, #2
 8000708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070c:	f002 f8b0 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 8000710:	2200      	movs	r2, #0
 8000712:	2104      	movs	r1, #4
 8000714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000718:	f002 f8aa 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 800071c:	2200      	movs	r2, #0
 800071e:	2108      	movs	r1, #8
 8000720:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000724:	f002 f8a4 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 8000728:	2201      	movs	r2, #1
 800072a:	2110      	movs	r1, #16
 800072c:	480f      	ldr	r0, [pc, #60]	@ (800076c <stepper_half_drive+0x1c0>)
 800072e:	f002 f89f 	bl	8002870 <HAL_GPIO_WritePin>
			break;
 8000732:	e017      	b.n	8000764 <stepper_half_drive+0x1b8>
		case 7:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 8000734:	2201      	movs	r2, #1
 8000736:	2102      	movs	r1, #2
 8000738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073c:	f002 f898 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 8000740:	2200      	movs	r2, #0
 8000742:	2104      	movs	r1, #4
 8000744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000748:	f002 f892 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 800074c:	2200      	movs	r2, #0
 800074e:	2108      	movs	r1, #8
 8000750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000754:	f002 f88c 	bl	8002870 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 8000758:	2201      	movs	r2, #1
 800075a:	2110      	movs	r1, #16
 800075c:	4803      	ldr	r0, [pc, #12]	@ (800076c <stepper_half_drive+0x1c0>)
 800075e:	f002 f887 	bl	8002870 <HAL_GPIO_WritePin>
			break;
 8000762:	bf00      	nop
	}
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	48001400 	.word	0x48001400

08000770 <stepper_step_angle>:

void stepper_step_angle (float angle, int direction, int rpm) //direction-> 0 for CK, 1 for CCK
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	ed87 0a03 	vstr	s0, [r7, #12]
 800077a:	60b8      	str	r0, [r7, #8]
 800077c:	6079      	str	r1, [r7, #4]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <stepper_step_angle+0x90>)
 8000780:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle/anglepersequence);
 8000782:	edd7 6a03 	vldr	s13, [r7, #12]
 8000786:	ed97 7a06 	vldr	s14, [r7, #24]
 800078a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800078e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000792:	ee17 3a90 	vmov	r3, s15
 8000796:	617b      	str	r3, [r7, #20]
	for (int seq=0; seq<numberofsequences; seq++)
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
 800079c:	e027      	b.n	80007ee <stepper_step_angle+0x7e>
	{
		if (direction == 0)  // for clockwise
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d10f      	bne.n	80007c4 <stepper_step_angle+0x54>
		{
			for (int step=7; step>=0; step--)
 80007a4:	2307      	movs	r3, #7
 80007a6:	623b      	str	r3, [r7, #32]
 80007a8:	e008      	b.n	80007bc <stepper_step_angle+0x4c>
				{
				stepper_half_drive(step);
 80007aa:	6a38      	ldr	r0, [r7, #32]
 80007ac:	f7ff fefe 	bl	80005ac <stepper_half_drive>
				stepper_set_rpm(rpm);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fee9 	bl	8000588 <stepper_set_rpm>
			for (int step=7; step>=0; step--)
 80007b6:	6a3b      	ldr	r3, [r7, #32]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	daf3      	bge.n	80007aa <stepper_step_angle+0x3a>
 80007c2:	e011      	b.n	80007e8 <stepper_step_angle+0x78>
				}
		}
		else if (direction == 1)  // for anti-clockwise
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d10e      	bne.n	80007e8 <stepper_step_angle+0x78>
		{
			for (int step=0; step<=7; step++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	e008      	b.n	80007e2 <stepper_step_angle+0x72>
				{
				stepper_half_drive(step);
 80007d0:	69f8      	ldr	r0, [r7, #28]
 80007d2:	f7ff feeb 	bl	80005ac <stepper_half_drive>
				stepper_set_rpm(rpm);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fed6 	bl	8000588 <stepper_set_rpm>
			for (int step=0; step<=7; step++)
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	3301      	adds	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	2b07      	cmp	r3, #7
 80007e6:	ddf3      	ble.n	80007d0 <stepper_step_angle+0x60>
	for (int seq=0; seq<numberofsequences; seq++)
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	3301      	adds	r3, #1
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbd3      	blt.n	800079e <stepper_step_angle+0x2e>
				}
		}
	}
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	@ 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	3f340000 	.word	0x3f340000

08000804 <Stepper_rotate>:

float currentAngle = 0; // Questa va dichiarata come variabile globale, non locale a main.

void Stepper_rotate (float targetAngle, int rpm) // Accetta float per l'angolo target
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	ed87 0a01 	vstr	s0, [r7, #4]
 800080e:	6038      	str	r0, [r7, #0]
    float changeInAngle = targetAngle - currentAngle; // Calcola la differenza tra l'angolo target e l'attuale
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <Stepper_rotate+0x74>)
 8000812:	edd3 7a00 	vldr	s15, [r3]
 8000816:	ed97 7a01 	vldr	s14, [r7, #4]
 800081a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800081e:	edc7 7a03 	vstr	s15, [r7, #12]

    if (changeInAngle > 0.001f)  // Per rotazione in senso orario (valore > 0 con una piccola tolleranza)
 8000822:	edd7 7a03 	vldr	s15, [r7, #12]
 8000826:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800087c <Stepper_rotate+0x78>
 800082a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800082e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000832:	dd06      	ble.n	8000842 <Stepper_rotate+0x3e>
    {
        stepper_step_angle(changeInAngle, 0, rpm); // direction 0 per orario
 8000834:	6839      	ldr	r1, [r7, #0]
 8000836:	2000      	movs	r0, #0
 8000838:	ed97 0a03 	vldr	s0, [r7, #12]
 800083c:	f7ff ff98 	bl	8000770 <stepper_step_angle>
 8000840:	e012      	b.n	8000868 <Stepper_rotate+0x64>
    }
    else if (changeInAngle < -0.001f) // Per rotazione in senso antiorario (valore < 0 con una piccola tolleranza)
 8000842:	edd7 7a03 	vldr	s15, [r7, #12]
 8000846:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000880 <Stepper_rotate+0x7c>
 800084a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800084e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000852:	d509      	bpl.n	8000868 <Stepper_rotate+0x64>
    {
        stepper_step_angle(-changeInAngle, 1, rpm); // direction 1 per antiorario, passa il valore assoluto dell'angolo
 8000854:	edd7 7a03 	vldr	s15, [r7, #12]
 8000858:	eef1 7a67 	vneg.f32	s15, s15
 800085c:	6839      	ldr	r1, [r7, #0]
 800085e:	2001      	movs	r0, #1
 8000860:	eeb0 0a67 	vmov.f32	s0, s15
 8000864:	f7ff ff84 	bl	8000770 <stepper_step_angle>
    }
    currentAngle = targetAngle; // Aggiorna l'angolo corrente
 8000868:	4a03      	ldr	r2, [pc, #12]	@ (8000878 <Stepper_rotate+0x74>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000b9c 	.word	0x20000b9c
 800087c:	3a83126f 	.word	0x3a83126f
 8000880:	ba83126f 	.word	0xba83126f

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b0e0      	sub	sp, #384	@ 0x180
 8000888:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088a:	f001 fcdb 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 fa91 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 fc6b 	bl	800116c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000896:	f000 faf1 	bl	8000e7c <MX_I2C1_Init>
  MX_SPI1_Init();
 800089a:	f000 fb2f 	bl	8000efc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800089e:	f000 fc43 	bl	8001128 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80008a2:	f000 fb69 	bl	8000f78 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008a6:	f000 fbbb 	bl	8001020 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80008aa:	f000 fc0d 	bl	80010c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanner();
 80008ae:	f7ff fe01 	bl	80004b4 <i2c_scanner>

  HAL_TIM_Base_Start(&htim1); // Questo è il timer che usi per i tuoi ritardi, lascialo
 80008b2:	48d0      	ldr	r0, [pc, #832]	@ (8000bf4 <main+0x370>)
 80008b4:	f004 fe7e 	bl	80055b4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Avvia l'Input Capture con interruzioni
 80008b8:	2100      	movs	r1, #0
 80008ba:	48cf      	ldr	r0, [pc, #828]	@ (8000bf8 <main+0x374>)
 80008bc:	f004 ff34 	bl	8005728 <HAL_TIM_IC_Start_IT>


  uchar status_request=0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
  uchar TagType[2] = {0,0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
  uchar serNum[5]= {0,0,0,0,0};	//Per memorizzare il seriale del tag
 80008cc:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	711a      	strb	r2, [r3, #4]

  TagData* tag; // Puntatore a TagData, non allocazione qui
  MFRC522_Init(); // Inizializza il sensore RC522
 80008d6:	f000 fe51 	bl	800157c <MFRC522_Init>

  char displayBuffer[64];
  lcd_init(); // Initialize the LCD
 80008da:	f7ff fd4f 	bl	800037c <lcd_init>
  lcd_display_message_lines("Inserire card"," o biglietto ");
 80008de:	49c7      	ldr	r1, [pc, #796]	@ (8000bfc <main+0x378>)
 80008e0:	48c7      	ldr	r0, [pc, #796]	@ (8000c00 <main+0x37c>)
 80008e2:	f7ff fdc8 	bl	8000476 <lcd_display_message_lines>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Controlla se 32 bit sono stati ricevuti (il flag bitCount lo indica)
	  if (32 <= bitCount) // Gestione sensore IR
 80008e6:	4bc7      	ldr	r3, [pc, #796]	@ (8000c04 <main+0x380>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b1f      	cmp	r3, #31
 80008ee:	d973      	bls.n	80009d8 <main+0x154>
	        {
	            char ir_buffer[17]; // Max 16 caratteri
	            snprintf(ir_buffer, 17, "IR DATA: 0x%lX", receivedData);
 80008f0:	4bc5      	ldr	r3, [pc, #788]	@ (8000c08 <main+0x384>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 80008f8:	4ac4      	ldr	r2, [pc, #784]	@ (8000c0c <main+0x388>)
 80008fa:	2111      	movs	r1, #17
 80008fc:	f006 fc24 	bl	8007148 <sniprintf>
	            lcd_display_message_lines("RICEVUTO IR:", ir_buffer);
 8000900:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8000904:	4619      	mov	r1, r3
 8000906:	48c2      	ldr	r0, [pc, #776]	@ (8000c10 <main+0x38c>)
 8000908:	f7ff fdb5 	bl	8000476 <lcd_display_message_lines>
	            HAL_Delay(2000);
 800090c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000910:	f001 fcfe 	bl	8002310 <HAL_Delay>

	            if (receivedData == receivedData) // Logica IR
 8000914:	4bbc      	ldr	r3, [pc, #752]	@ (8000c08 <main+0x384>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4bbb      	ldr	r3, [pc, #748]	@ (8000c08 <main+0x384>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d146      	bne.n	80009ae <main+0x12a>
	            {
	                lcd_display_message_lines("ACCESSO", "CONSENTITO!");
 8000920:	49bc      	ldr	r1, [pc, #752]	@ (8000c14 <main+0x390>)
 8000922:	48bd      	ldr	r0, [pc, #756]	@ (8000c18 <main+0x394>)
 8000924:	f7ff fda7 	bl	8000476 <lcd_display_message_lines>
	                HAL_Delay(1000);
 8000928:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800092c:	f001 fcf0 	bl	8002310 <HAL_Delay>
	                //APERTURA TORNELLO
					for (int i = 0; i <= 360; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8000936:	e00f      	b.n	8000958 <main+0xd4>
						Stepper_rotate((float)i, 10);
 8000938:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000944:	200a      	movs	r0, #10
 8000946:	eeb0 0a67 	vmov.f32	s0, s15
 800094a:	f7ff ff5b 	bl	8000804 <Stepper_rotate>
					for (int i = 0; i <= 360; i++) {
 800094e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8000952:	3301      	adds	r3, #1
 8000954:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8000958:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800095c:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000960:	ddea      	ble.n	8000938 <main+0xb4>
					}
					HAL_Delay(1000);
 8000962:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000966:	f001 fcd3 	bl	8002310 <HAL_Delay>
					//CHIUSURA TORNELLO
					for (int i = 360; i >= 0; i--) {
 800096a:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800096e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8000972:	e00f      	b.n	8000994 <main+0x110>
						Stepper_rotate((float)i, 10);
 8000974:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8000978:	ee07 3a90 	vmov	s15, r3
 800097c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000980:	200a      	movs	r0, #10
 8000982:	eeb0 0a67 	vmov.f32	s0, s15
 8000986:	f7ff ff3d 	bl	8000804 <Stepper_rotate>
					for (int i = 360; i >= 0; i--) {
 800098a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800098e:	3b01      	subs	r3, #1
 8000990:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8000994:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8000998:	2b00      	cmp	r3, #0
 800099a:	daeb      	bge.n	8000974 <main+0xf0>
					}

	                lcd_display_message_lines("ARRIVEDERCI", "da Pozzuoli");
 800099c:	499f      	ldr	r1, [pc, #636]	@ (8000c1c <main+0x398>)
 800099e:	48a0      	ldr	r0, [pc, #640]	@ (8000c20 <main+0x39c>)
 80009a0:	f7ff fd69 	bl	8000476 <lcd_display_message_lines>
	                HAL_Delay(1000);
 80009a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a8:	f001 fcb2 	bl	8002310 <HAL_Delay>
 80009ac:	e007      	b.n	80009be <main+0x13a>
	            }
	            else
	            {
	                lcd_display_message_lines("IR: CODICE", "SCONOSCIUTO!");
 80009ae:	499d      	ldr	r1, [pc, #628]	@ (8000c24 <main+0x3a0>)
 80009b0:	489d      	ldr	r0, [pc, #628]	@ (8000c28 <main+0x3a4>)
 80009b2:	f7ff fd60 	bl	8000476 <lcd_display_message_lines>
	                HAL_Delay(2000);
 80009b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ba:	f001 fca9 	bl	8002310 <HAL_Delay>
	            }

	            bitCount = 0;
 80009be:	4b91      	ldr	r3, [pc, #580]	@ (8000c04 <main+0x380>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
	            receivedData = 0;
 80009c4:	4b90      	ldr	r3, [pc, #576]	@ (8000c08 <main+0x384>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
	            isStartCaptured = 0;
 80009ca:	4b98      	ldr	r3, [pc, #608]	@ (8000c2c <main+0x3a8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
	            HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80009d0:	2100      	movs	r1, #0
 80009d2:	4889      	ldr	r0, [pc, #548]	@ (8000bf8 <main+0x374>)
 80009d4:	f004 fea8 	bl	8005728 <HAL_TIM_IC_Start_IT>
	        }

	        if (isSensorDetected()){
 80009d8:	f000 ff29 	bl	800182e <isSensorDetected>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d081      	beq.n	80008e6 <main+0x62>
	              HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e8:	4891      	ldr	r0, [pc, #580]	@ (8000c30 <main+0x3ac>)
 80009ea:	f001 ff41 	bl	8002870 <HAL_GPIO_WritePin>
	              HAL_Delay(10);
 80009ee:	200a      	movs	r0, #10
 80009f0:	f001 fc8e 	bl	8002310 <HAL_Delay>
	              status_request = MFRC522_Request(PICC_REQIDL, TagType);
 80009f4:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80009f8:	4619      	mov	r1, r3
 80009fa:	2026      	movs	r0, #38	@ 0x26
 80009fc:	f000 feb5 	bl	800176a <MFRC522_Request>
 8000a00:	4603      	mov	r3, r0
 8000a02:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f

	              if (status_request == MI_OK)
 8000a06:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f040 81b2 	bne.w	8000d74 <main+0x4f0>
	              {
	                HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a16:	4886      	ldr	r0, [pc, #536]	@ (8000c30 <main+0x3ac>)
 8000a18:	f001 ff2a 	bl	8002870 <HAL_GPIO_WritePin>
	                lcd_display_message_lines("TAG RFID", "RILEVATO!");
 8000a1c:	4985      	ldr	r1, [pc, #532]	@ (8000c34 <main+0x3b0>)
 8000a1e:	4886      	ldr	r0, [pc, #536]	@ (8000c38 <main+0x3b4>)
 8000a20:	f7ff fd29 	bl	8000476 <lcd_display_message_lines>
	                HAL_Delay(500);
 8000a24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a28:	f001 fc72 	bl	8002310 <HAL_Delay>

	                status_request = MFRC522_Anticoll(serNum);
 8000a2c:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 febf 	bl	80017b4 <MFRC522_Anticoll>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
	                if (status_request == MI_OK)
 8000a3c:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f040 8190 	bne.w	8000d66 <main+0x4e2>
	                {
	                   if(isTagRegistered(&serNum)){
 8000a46:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 f9a5 	bl	8001d9a <isTagRegistered>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 816b 	beq.w	8000d2e <main+0x4aa>
	                       tag = findTag(&serNum);
 8000a58:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 f91d 	bl	8001c9c <findTag>
 8000a62:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
	                       HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a6c:	4870      	ldr	r0, [pc, #448]	@ (8000c30 <main+0x3ac>)
 8000a6e:	f001 feff 	bl	8002870 <HAL_GPIO_WritePin>
	                       char tagName[MAX_STRING_LENGTH];
	                       char tagSurname[MAX_STRING_LENGTH];
	                       char dispLine1[17]; // Buffer per LCD linea 1
	                       char dispLine2[17]; // Buffer per LCD linea 2

	                       getNamesBySerial(serNum, tagName, sizeof(tagName), tagSurname, sizeof(tagSurname));
 8000a72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a76:	4639      	mov	r1, r7
 8000a78:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8000a7c:	2232      	movs	r2, #50	@ 0x32
 8000a7e:	9200      	str	r2, [sp, #0]
 8000a80:	2232      	movs	r2, #50	@ 0x32
 8000a82:	f001 f93b 	bl	8001cfc <getNamesBySerial>

	                       // Assicurati che nome e cognome non superino i 16 caratteri per la visualizzazione
	                       truncateString(tagName, 16);
 8000a86:	463b      	mov	r3, r7
 8000a88:	2110      	movs	r1, #16
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fd4c 	bl	8000528 <truncateString>
	                       truncateString(tagSurname, 16);
 8000a90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a94:	2110      	movs	r1, #16
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fd46 	bl	8000528 <truncateString>

	                       snprintf(dispLine1, 17, "Ciao %s", tagName);
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8000aa2:	4a66      	ldr	r2, [pc, #408]	@ (8000c3c <main+0x3b8>)
 8000aa4:	2111      	movs	r1, #17
 8000aa6:	f006 fb4f 	bl	8007148 <sniprintf>
	                       lcd_display_message_lines(dispLine1, tagSurname);
 8000aaa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000aae:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fcde 	bl	8000476 <lcd_display_message_lines>
	                       HAL_Delay(1000);
 8000aba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000abe:	f001 fc27 	bl	8002310 <HAL_Delay>
	                       // Visualizza la stazione di partenza attuale del tag
	                       snprintf(dispLine2, 17, "FROM: %s", tag->departureStation);
 8000ac2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000ac6:	3370      	adds	r3, #112	@ 0x70
 8000ac8:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8000acc:	4a5c      	ldr	r2, [pc, #368]	@ (8000c40 <main+0x3bc>)
 8000ace:	2111      	movs	r1, #17
 8000ad0:	f006 fb3a 	bl	8007148 <sniprintf>
	                       truncateString(dispLine2, 16); // Tronca se la stazione è troppo lunga
 8000ad4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000ad8:	2110      	movs	r1, #16
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fd24 	bl	8000528 <truncateString>
	                       lcd_display_message_lines(tagSurname, dispLine2);
 8000ae0:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8000ae4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fcc3 	bl	8000476 <lcd_display_message_lines>
	                       HAL_Delay(2000);
 8000af0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000af4:	f001 fc0c 	bl	8002310 <HAL_Delay>

	                       TicketProcessResult result = processTicketPayment(tag);
 8000af8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8000afc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b00:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 f999 	bl	8001e3c <processTicketPayment>

	                       switch (result.accessType) {
 8000b0a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8000b0e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d05a      	beq.n	8000bce <main+0x34a>
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	f300 80fa 	bgt.w	8000d12 <main+0x48e>
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 80cf 	beq.w	8000cc2 <main+0x43e>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	f040 80f4 	bne.w	8000d12 <main+0x48e>
	                           case ACCESS_ENTER:
	                               lcd_display_message_lines(result.messageLine1, result.messageLine2);
 8000b2a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b2e:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8000b32:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b36:	3301      	adds	r3, #1
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fc9b 	bl	8000476 <lcd_display_message_lines>
	                               HAL_Delay(1000);
 8000b40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b44:	f001 fbe4 	bl	8002310 <HAL_Delay>
	                               //APERTURA TORNELLO
									for (int i = 0; i <= 360; i++) {
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8000b4e:	e00f      	b.n	8000b70 <main+0x2ec>
										Stepper_rotate((float)i, 10);
 8000b50:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000b54:	ee07 3a90 	vmov	s15, r3
 8000b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b5c:	200a      	movs	r0, #10
 8000b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b62:	f7ff fe4f 	bl	8000804 <Stepper_rotate>
									for (int i = 0; i <= 360; i++) {
 8000b66:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8000b70:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000b74:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000b78:	ddea      	ble.n	8000b50 <main+0x2cc>
									}
									HAL_Delay(1000);
 8000b7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b7e:	f001 fbc7 	bl	8002310 <HAL_Delay>
									//CHIUSURA TORNELLO
									for (int i = 360; i >= 0; i--) {
 8000b82:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000b86:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8000b8a:	e00f      	b.n	8000bac <main+0x328>
										Stepper_rotate((float)i, 10);
 8000b8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000b90:	ee07 3a90 	vmov	s15, r3
 8000b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b98:	200a      	movs	r0, #10
 8000b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b9e:	f7ff fe31 	bl	8000804 <Stepper_rotate>
									for (int i = 360; i >= 0; i--) {
 8000ba2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8000bac:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	daeb      	bge.n	8000b8c <main+0x308>
									}
	                               HAL_Delay(1000);
 8000bb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bb8:	f001 fbaa 	bl	8002310 <HAL_Delay>
	                               lcd_display_message_lines("TORNELLO APERTO", "BENVENUTO!");
 8000bbc:	4921      	ldr	r1, [pc, #132]	@ (8000c44 <main+0x3c0>)
 8000bbe:	4822      	ldr	r0, [pc, #136]	@ (8000c48 <main+0x3c4>)
 8000bc0:	f7ff fc59 	bl	8000476 <lcd_display_message_lines>
	                               HAL_Delay(1000);
 8000bc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc8:	f001 fba2 	bl	8002310 <HAL_Delay>
	                               break;
 8000bcc:	e0a1      	b.n	8000d12 <main+0x48e>

	                           case ACCESS_EXIT:
	                               lcd_display_message_lines(result.messageLine1, result.messageLine2);
 8000bce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000bd2:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8000bd6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000bda:	3301      	adds	r3, #1
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fc49 	bl	8000476 <lcd_display_message_lines>
	                               HAL_Delay(1000);
 8000be4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000be8:	f001 fb92 	bl	8002310 <HAL_Delay>
	                               //APERTURA TORNELLO
									for (int i = 0; i <= 360; i++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8000bf2:	e03b      	b.n	8000c6c <main+0x3e8>
 8000bf4:	2000079c 	.word	0x2000079c
 8000bf8:	200007e8 	.word	0x200007e8
 8000bfc:	080079b4 	.word	0x080079b4
 8000c00:	080079c4 	.word	0x080079c4
 8000c04:	20000b90 	.word	0x20000b90
 8000c08:	20000b94 	.word	0x20000b94
 8000c0c:	080079d4 	.word	0x080079d4
 8000c10:	080079e4 	.word	0x080079e4
 8000c14:	080079f4 	.word	0x080079f4
 8000c18:	08007a00 	.word	0x08007a00
 8000c1c:	08007a08 	.word	0x08007a08
 8000c20:	08007a14 	.word	0x08007a14
 8000c24:	08007a20 	.word	0x08007a20
 8000c28:	08007a30 	.word	0x08007a30
 8000c2c:	20000b91 	.word	0x20000b91
 8000c30:	48001000 	.word	0x48001000
 8000c34:	08007a3c 	.word	0x08007a3c
 8000c38:	08007a48 	.word	0x08007a48
 8000c3c:	08007a54 	.word	0x08007a54
 8000c40:	08007a5c 	.word	0x08007a5c
 8000c44:	08007a68 	.word	0x08007a68
 8000c48:	08007a74 	.word	0x08007a74
										Stepper_rotate((float)i, 10);
 8000c4c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000c50:	ee07 3a90 	vmov	s15, r3
 8000c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c58:	200a      	movs	r0, #10
 8000c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c5e:	f7ff fdd1 	bl	8000804 <Stepper_rotate>
									for (int i = 0; i <= 360; i++) {
 8000c62:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000c66:	3301      	adds	r3, #1
 8000c68:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8000c6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000c70:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000c74:	ddea      	ble.n	8000c4c <main+0x3c8>
									}
									HAL_Delay(1000);
 8000c76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c7a:	f001 fb49 	bl	8002310 <HAL_Delay>
									//CHIUSURA TORNELLO
									for (int i = 360; i >= 0; i--) {
 8000c7e:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000c82:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8000c86:	e00f      	b.n	8000ca8 <main+0x424>
										Stepper_rotate((float)i, 10);
 8000c88:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c94:	200a      	movs	r0, #10
 8000c96:	eeb0 0a67 	vmov.f32	s0, s15
 8000c9a:	f7ff fdb3 	bl	8000804 <Stepper_rotate>
									for (int i = 360; i >= 0; i--) {
 8000c9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8000ca8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	daeb      	bge.n	8000c88 <main+0x404>
									}
	                               lcd_display_message_lines("TORNELLO CHIUSO", "ARRIVEDERCI!");
 8000cb0:	4939      	ldr	r1, [pc, #228]	@ (8000d98 <main+0x514>)
 8000cb2:	483a      	ldr	r0, [pc, #232]	@ (8000d9c <main+0x518>)
 8000cb4:	f7ff fbdf 	bl	8000476 <lcd_display_message_lines>
	                               HAL_Delay(1000);
 8000cb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cbc:	f001 fb28 	bl	8002310 <HAL_Delay>
	                               break;
 8000cc0:	e027      	b.n	8000d12 <main+0x48e>

	                           case ACCESS_DENIED:
	                               lcd_display_message_lines(result.messageLine1, result.messageLine2);
 8000cc2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000cc6:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8000cca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000cce:	3301      	adds	r3, #1
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fbcf 	bl	8000476 <lcd_display_message_lines>
	                               if (result.showRedLed) {
 8000cd8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8000cdc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000ce0:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00f      	beq.n	8000d08 <main+0x484>
	                                   HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cee:	482c      	ldr	r0, [pc, #176]	@ (8000da0 <main+0x51c>)
 8000cf0:	f001 fdbe 	bl	8002870 <HAL_GPIO_WritePin>
	                                   HAL_Delay(2000);
 8000cf4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cf8:	f001 fb0a 	bl	8002310 <HAL_Delay>
	                                   HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d02:	4827      	ldr	r0, [pc, #156]	@ (8000da0 <main+0x51c>)
 8000d04:	f001 fdb4 	bl	8002870 <HAL_GPIO_WritePin>
	                               }
	                               HAL_Delay(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d0c:	f001 fb00 	bl	8002310 <HAL_Delay>
	                               break;
 8000d10:	bf00      	nop
	                       }

	                       HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d18:	4821      	ldr	r0, [pc, #132]	@ (8000da0 <main+0x51c>)
 8000d1a:	f001 fda9 	bl	8002870 <HAL_GPIO_WritePin>
	                       HAL_Delay(50);
 8000d1e:	2032      	movs	r0, #50	@ 0x32
 8000d20:	f001 faf6 	bl	8002310 <HAL_Delay>
	                       lcd_display_message_lines("Inserire card"," o biglietto ");
 8000d24:	491f      	ldr	r1, [pc, #124]	@ (8000da4 <main+0x520>)
 8000d26:	4820      	ldr	r0, [pc, #128]	@ (8000da8 <main+0x524>)
 8000d28:	f7ff fba5 	bl	8000476 <lcd_display_message_lines>
 8000d2c:	e5db      	b.n	80008e6 <main+0x62>

	                   }else{
	                       // Tag NON Riconosciuto.
	                       HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d34:	481a      	ldr	r0, [pc, #104]	@ (8000da0 <main+0x51c>)
 8000d36:	f001 fd9b 	bl	8002870 <HAL_GPIO_WritePin>
	                       lcd_display_message_lines("ACCESSO", "NEGATO!");
 8000d3a:	491c      	ldr	r1, [pc, #112]	@ (8000dac <main+0x528>)
 8000d3c:	481c      	ldr	r0, [pc, #112]	@ (8000db0 <main+0x52c>)
 8000d3e:	f7ff fb9a 	bl	8000476 <lcd_display_message_lines>
	                       HAL_Delay(2000);
 8000d42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d46:	f001 fae3 	bl	8002310 <HAL_Delay>
	                       HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d50:	4813      	ldr	r0, [pc, #76]	@ (8000da0 <main+0x51c>)
 8000d52:	f001 fd8d 	bl	8002870 <HAL_GPIO_WritePin>
	                       HAL_Delay(50);
 8000d56:	2032      	movs	r0, #50	@ 0x32
 8000d58:	f001 fada 	bl	8002310 <HAL_Delay>
	                       lcd_display_message_lines("Inserire card"," o biglietto ");
 8000d5c:	4911      	ldr	r1, [pc, #68]	@ (8000da4 <main+0x520>)
 8000d5e:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <main+0x524>)
 8000d60:	f7ff fb89 	bl	8000476 <lcd_display_message_lines>
 8000d64:	e5bf      	b.n	80008e6 <main+0x62>
	                   }
	              }
	              else
	              {
	                HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <main+0x51c>)
 8000d6e:	f001 fd7f 	bl	8002870 <HAL_GPIO_WritePin>
 8000d72:	e5b8      	b.n	80008e6 <main+0x62>
	              }
	          }
	          else
	          {
	              HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7a:	4809      	ldr	r0, [pc, #36]	@ (8000da0 <main+0x51c>)
 8000d7c:	f001 fd78 	bl	8002870 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d86:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <main+0x51c>)
 8000d88:	f001 fd72 	bl	8002870 <HAL_GPIO_WritePin>
	              HAL_Delay(500);
 8000d8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d90:	f001 fabe 	bl	8002310 <HAL_Delay>
	  if (32 <= bitCount) // Gestione sensore IR
 8000d94:	e5a7      	b.n	80008e6 <main+0x62>
 8000d96:	bf00      	nop
 8000d98:	08007a84 	.word	0x08007a84
 8000d9c:	08007a94 	.word	0x08007a94
 8000da0:	48001000 	.word	0x48001000
 8000da4:	080079b4 	.word	0x080079b4
 8000da8:	080079c4 	.word	0x080079c4
 8000dac:	08007aa4 	.word	0x08007aa4
 8000db0:	08007a00 	.word	0x08007a00

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09e      	sub	sp, #120	@ 0x78
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000dbe:	2228      	movs	r2, #40	@ 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 fa06 	bl	80071d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	223c      	movs	r2, #60	@ 0x3c
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f006 f9f8 	bl	80071d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000de4:	2303      	movs	r3, #3
 8000de6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000de8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df2:	2301      	movs	r3, #1
 8000df4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df6:	2310      	movs	r3, #16
 8000df8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e02:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e04:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e08:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 fb78 	bl	8003504 <HAL_RCC_OscConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e1a:	f000 faf7 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	230f      	movs	r3, #15
 8000e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e22:	2302      	movs	r3, #2
 8000e24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e34:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fb70 	bl	8004520 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e46:	f000 fae1 	bl	800140c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <SystemClock_Config+0xc4>)
 8000e4c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fd6f 	bl	8004944 <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000e6c:	f000 face 	bl	800140c <Error_Handler>
  }
}
 8000e70:	bf00      	nop
 8000e72:	3778      	adds	r7, #120	@ 0x78
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	00021021 	.word	0x00021021

08000e7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000e82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef4 <MX_I2C1_Init+0x78>)
 8000e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000e88:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef8 <MX_I2C1_Init+0x7c>)
 8000e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb6:	480e      	ldr	r0, [pc, #56]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000eb8:	f001 fd0c 	bl	80028d4 <HAL_I2C_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ec2:	f000 faa3 	bl	800140c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4809      	ldr	r0, [pc, #36]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000eca:	f002 f9bd 	bl	8003248 <HAL_I2CEx_ConfigAnalogFilter>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed4:	f000 fa9a 	bl	800140c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_I2C1_Init+0x74>)
 8000edc:	f002 f9ff 	bl	80032de <HAL_I2CEx_ConfigDigitalFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 fa91 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200006e4 	.word	0x200006e4
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	00201d2b 	.word	0x00201d2b

08000efc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f02:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <MX_SPI1_Init+0x78>)
 8000f04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f22:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f32:	2220      	movs	r2, #32
 8000f34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f48:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f56:	2208      	movs	r2, #8
 8000f58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f5c:	f003 fea0 	bl	8004ca0 <HAL_SPI_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f66:	f000 fa51 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000738 	.word	0x20000738
 8000f74:	40013000 	.word	0x40013000

08000f78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000f98:	4a20      	ldr	r2, [pc, #128]	@ (800101c <MX_TIM1_Init+0xa4>)
 8000f9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000f9e:	2247      	movs	r2, #71	@ 0x47
 8000fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000faa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc2:	4815      	ldr	r0, [pc, #84]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fc4:	f004 fa9e 	bl	8005504 <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fce:	f000 fa1d 	bl	800140c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480e      	ldr	r0, [pc, #56]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fe0:	f004 ff40 	bl	8005e64 <HAL_TIM_ConfigClockSource>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000fea:	f000 fa0f 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8001000:	f005 fae0 	bl	80065c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800100a:	f000 f9ff 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000079c 	.word	0x2000079c
 800101c:	40012c00 	.word	0x40012c00

08001020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <MX_TIM2_Init+0xa4>)
 8001040:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001044:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001046:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <MX_TIM2_Init+0xa4>)
 8001048:	2247      	movs	r2, #71	@ 0x47
 800104a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <MX_TIM2_Init+0xa4>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <MX_TIM2_Init+0xa4>)
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <MX_TIM2_Init+0xa4>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_TIM2_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001066:	4817      	ldr	r0, [pc, #92]	@ (80010c4 <MX_TIM2_Init+0xa4>)
 8001068:	f004 fb06 	bl	8005678 <HAL_TIM_IC_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001072:	f000 f9cb 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	480f      	ldr	r0, [pc, #60]	@ (80010c4 <MX_TIM2_Init+0xa4>)
 8001086:	f005 fa9d 	bl	80065c4 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001090:	f000 f9bc 	bl	800140c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001098:	2301      	movs	r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <MX_TIM2_Init+0xa4>)
 80010ac:	f004 fe3e 	bl	8005d2c <HAL_TIM_IC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010b6:	f000 f9a9 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200007e8 	.word	0x200007e8

080010c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 80010ce:	4a15      	ldr	r2, [pc, #84]	@ (8001124 <MX_USART1_UART_Init+0x5c>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 80010d4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80010d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_USART1_UART_Init+0x58>)
 800110c:	f005 faf8 	bl	8006700 <HAL_UART_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001116:	f000 f979 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000834 	.word	0x20000834
 8001124:	40013800 	.word	0x40013800

08001128 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <MX_USB_PCD_Init+0x3c>)
 800112e:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <MX_USB_PCD_Init+0x40>)
 8001130:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_USB_PCD_Init+0x3c>)
 8001134:	2208      	movs	r2, #8
 8001136:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <MX_USB_PCD_Init+0x3c>)
 800113a:	2202      	movs	r2, #2
 800113c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_USB_PCD_Init+0x3c>)
 8001140:	2202      	movs	r2, #2
 8001142:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <MX_USB_PCD_Init+0x3c>)
 8001146:	2200      	movs	r2, #0
 8001148:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_USB_PCD_Init+0x3c>)
 800114c:	2200      	movs	r2, #0
 800114e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001150:	4804      	ldr	r0, [pc, #16]	@ (8001164 <MX_USB_PCD_Init+0x3c>)
 8001152:	f002 f910 	bl	8003376 <HAL_PCD_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800115c:	f000 f956 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200008bc 	.word	0x200008bc
 8001168:	40005c00 	.word	0x40005c00

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001182:	4b55      	ldr	r3, [pc, #340]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a54      	ldr	r2, [pc, #336]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b52      	ldr	r3, [pc, #328]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	4b4f      	ldr	r3, [pc, #316]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a4e      	ldr	r2, [pc, #312]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b4c      	ldr	r3, [pc, #304]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b2:	4b49      	ldr	r3, [pc, #292]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4a48      	ldr	r2, [pc, #288]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011bc:	6153      	str	r3, [r2, #20]
 80011be:	4b46      	ldr	r3, [pc, #280]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a42      	ldr	r2, [pc, #264]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b40      	ldr	r3, [pc, #256]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b3d      	ldr	r3, [pc, #244]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a3c      	ldr	r2, [pc, #240]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ec:	6153      	str	r3, [r2, #20]
 80011ee:	4b3a      	ldr	r3, [pc, #232]	@ (80012d8 <MX_GPIO_Init+0x16c>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80011fa:	2200      	movs	r2, #0
 80011fc:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001200:	4836      	ldr	r0, [pc, #216]	@ (80012dc <MX_GPIO_Init+0x170>)
 8001202:	f001 fb35 	bl	8002870 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|SPI_1SS_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	211e      	movs	r1, #30
 800120a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120e:	f001 fb2f 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2110      	movs	r1, #16
 8001216:	4832      	ldr	r0, [pc, #200]	@ (80012e0 <MX_GPIO_Init+0x174>)
 8001218:	f001 fb2a 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SP1_RST_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2103      	movs	r1, #3
 8001220:	4830      	ldr	r0, [pc, #192]	@ (80012e4 <MX_GPIO_Init+0x178>)
 8001222:	f001 fb25 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001226:	2337      	movs	r3, #55	@ 0x37
 8001228:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800122a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4828      	ldr	r0, [pc, #160]	@ (80012dc <MX_GPIO_Init+0x170>)
 800123c:	f001 f99e 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001240:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8001244:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4820      	ldr	r0, [pc, #128]	@ (80012dc <MX_GPIO_Init+0x170>)
 800125a:	f001 f98f 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800125e:	2301      	movs	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001274:	f001 f982 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 SPI_1SS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|SPI_1SS_Pin;
 8001278:	231e      	movs	r3, #30
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001292:	f001 f973 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001296:	2310      	movs	r3, #16
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <MX_GPIO_Init+0x174>)
 80012ae:	f001 f965 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : SP1_RST_Pin PB1 */
  GPIO_InitStruct.Pin = SP1_RST_Pin|GPIO_PIN_1;
 80012b2:	2303      	movs	r3, #3
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <MX_GPIO_Init+0x178>)
 80012ca:	f001 f957 	bl	800257c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	@ 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48001000 	.word	0x48001000
 80012e0:	48001400 	.word	0x48001400
 80012e4:	48000400 	.word	0x48000400

080012e8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Adatta TIM2 e TIM_CHANNEL_1 se usi un altro timer/canale
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f8:	d17b      	bne.n	80013f2 <HAL_TIM_IC_CaptureCallback+0x10a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7f1b      	ldrb	r3, [r3, #28]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d177      	bne.n	80013f2 <HAL_TIM_IC_CaptureCallback+0x10a>
    {
        if(0 == bitCount && 0 == isStartCaptured && 0 == receivedData)
 8001302:	4b3e      	ldr	r3, [pc, #248]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10c      	bne.n	8001326 <HAL_TIM_IC_CaptureCallback+0x3e>
 800130c:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x118>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d107      	bne.n	8001326 <HAL_TIM_IC_CaptureCallback+0x3e>
 8001316:	4b3b      	ldr	r3, [pc, #236]	@ (8001404 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d103      	bne.n	8001326 <HAL_TIM_IC_CaptureCallback+0x3e>
        {
            // Primo fronte di discesa del bit di start (9ms)
            isStartCaptured = 1;
 800131e:	4b38      	ldr	r3, [pc, #224]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e065      	b.n	80013f2 <HAL_TIM_IC_CaptureCallback+0x10a>
        }
        else if(0 == bitCount && 1 == isStartCaptured && 0 == receivedData)
 8001326:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d110      	bne.n	8001352 <HAL_TIM_IC_CaptureCallback+0x6a>
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10b      	bne.n	8001352 <HAL_TIM_IC_CaptureCallback+0x6a>
 800133a:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d107      	bne.n	8001352 <HAL_TIM_IC_CaptureCallback+0x6a>
        {
            // Secondo fronte di discesa del bit di start (dopo 4.5ms)
            // Resetta il contatore del timer per misurare la durata del primo bit di dati
            __HAL_TIM_SET_COUNTER(htim, 0);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24
            isStartCaptured = 2; // Passa allo stato di acquisizione dati
 800134a:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x118>)
 800134c:	2202      	movs	r2, #2
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e04f      	b.n	80013f2 <HAL_TIM_IC_CaptureCallback+0x10a>
        }
        else if(32 > bitCount) // Abbiamo ancora bit da ricevere (32 bit per il protocollo NEC)
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b1f      	cmp	r3, #31
 800135a:	d84a      	bhi.n	80013f2 <HAL_TIM_IC_CaptureCallback+0x10a>
        {
            IC_Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Legge il valore catturato
 800135c:	2100      	movs	r1, #0
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f004 fe4a 	bl	8005ff8 <HAL_TIM_ReadCapturedValue>
 8001364:	4603      	mov	r3, r0
 8001366:	4a28      	ldr	r2, [pc, #160]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001368:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0); // Resetta il contatore per la prossima misurazione
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	@ 0x24
            // Per un '1' ha una durata di ~2.25ms (562.5us MARK + 1.687ms SPACE)
            // I valori 1000-1300 e 2100-2400 us suggeriscono che il timer ha un tick di 1us.
            // Questi sono i "gap" tra i fronti di discesa, che rappresentano il "SPACE" del bit.

            // Received Logic '0'
            if(IC_Value > 1000 && IC_Value < 1300) // Questo è il tempo dello "SPACE" per un 0 (~1.125ms)
 8001372:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800137a:	d912      	bls.n	80013a2 <HAL_TIM_IC_CaptureCallback+0xba>
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x120>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f240 5213 	movw	r2, #1299	@ 0x513
 8001384:	4293      	cmp	r3, r2
 8001386:	d80c      	bhi.n	80013a2 <HAL_TIM_IC_CaptureCallback+0xba>
            {
                receivedData &= ~(1UL << bitCount); // Imposta il bit a 0
 8001388:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x114>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	2301      	movs	r3, #1
 8001392:	4093      	lsls	r3, r2
 8001394:	43da      	mvns	r2, r3
 8001396:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4013      	ands	r3, r2
 800139c:	4a19      	ldr	r2, [pc, #100]	@ (8001404 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e016      	b.n	80013d0 <HAL_TIM_IC_CaptureCallback+0xe8>
            }
            // Received Logic '1'
            else if(IC_Value > 2100 && IC_Value < 2400) // Questo è il tempo dello "SPACE" per un 1 (~2.25ms)
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x120>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f640 0234 	movw	r2, #2100	@ 0x834
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d910      	bls.n	80013d0 <HAL_TIM_IC_CaptureCallback+0xe8>
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x120>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 80013b6:	d20b      	bcs.n	80013d0 <HAL_TIM_IC_CaptureCallback+0xe8>
            {
                receivedData |= (1UL << bitCount); // Imposta il bit a 1
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x114>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	2301      	movs	r3, #1
 80013c2:	fa03 f202 	lsl.w	r2, r3, r2
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80013ce:	6013      	str	r3, [r2, #0]
            }
            // ELSE: se il valore non rientra in questi range, è un errore o una tempistica non NEC

            bitCount++; // Passa al bit successivo
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x114>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x114>)
 80013dc:	701a      	strb	r2, [r3, #0]
            if(bitCount == 32) // Tutti i 32 bit sono stati ricevuti
 80013de:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x114>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	d104      	bne.n	80013f2 <HAL_TIM_IC_CaptureCallback+0x10a>
            {
                // Ferma l'Input Capture per evitare ulteriori interruzioni finché non viene processato il dato
                HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1); // Ho cambiato &htim2 in htim
 80013e8:	2100      	movs	r1, #0
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f004 fade 	bl	80059ac <HAL_TIM_IC_Stop_IT>
            }
        }
    }
}
 80013f0:	e7ff      	b.n	80013f2 <HAL_TIM_IC_CaptureCallback+0x10a>
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000b90 	.word	0x20000b90
 8001400:	20000b91 	.word	0x20000b91
 8001404:	20000b94 	.word	0x20000b94
 8001408:	20000b98 	.word	0x20000b98

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <Error_Handler+0x8>

08001418 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af02      	add	r7, sp, #8
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001422:	f107 020f 	add.w	r2, r7, #15
 8001426:	1df9      	adds	r1, r7, #7
 8001428:	2364      	movs	r3, #100	@ 0x64
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	4804      	ldr	r0, [pc, #16]	@ (8001440 <RC522_SPI_Transfer+0x28>)
 8001430:	f003 fce1 	bl	8004df6 <HAL_SPI_TransmitReceive>

	return rx_data;
 8001434:	7bfb      	ldrb	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000738 	.word	0x20000738

08001444 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	4613      	mov	r3, r2
 8001452:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2110      	movs	r1, #16
 8001458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145c:	f001 fa08 	bl	8002870 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ffd3 	bl	8001418 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ffcf 	bl	8001418 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	2110      	movs	r1, #16
 800147e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001482:	f001 f9f5 	bl	8002870 <HAL_GPIO_WritePin>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2110      	movs	r1, #16
 800149c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a0:	f001 f9e6 	bl	8002870 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffac 	bl	8001418 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ffa9 	bl	8001418 <RC522_SPI_Transfer>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2110      	movs	r1, #16
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d2:	f001 f9cd 	bl	8002870 <HAL_GPIO_WritePin>

	return val;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]

}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	460a      	mov	r2, r1
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	4613      	mov	r3, r2
 80014ee:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ffcb 	bl	800148e <Read_MFRC522>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	4313      	orrs	r3, r2
 8001502:	b2da      	uxtb	r2, r3
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff9b 	bl	8001444 <Write_MFRC522>
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	460a      	mov	r2, r1
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	4613      	mov	r3, r2
 8001524:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ffb0 	bl	800148e <Read_MFRC522>
 800152e:	4603      	mov	r3, r0
 8001530:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001532:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001536:	43db      	mvns	r3, r3
 8001538:	b25a      	sxtb	r2, r3
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4013      	ands	r3, r2
 8001540:	b25b      	sxtb	r3, r3
 8001542:	b2da      	uxtb	r2, r3
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff7b 	bl	8001444 <Write_MFRC522>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800155a:	2014      	movs	r0, #20
 800155c:	f7ff ff97 	bl	800148e <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001560:	2103      	movs	r1, #3
 8001562:	2014      	movs	r0, #20
 8001564:	f7ff ffbc 	bl	80014e0 <SetBitMask>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001570:	210f      	movs	r1, #15
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff ff66 	bl	8001444 <Write_MFRC522>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	2110      	movs	r1, #16
 8001584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001588:	f001 f972 	bl	8002870 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2101      	movs	r1, #1
 8001590:	4810      	ldr	r0, [pc, #64]	@ (80015d4 <MFRC522_Init+0x58>)
 8001592:	f001 f96d 	bl	8002870 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001596:	f7ff ffe9 	bl	800156c <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800159a:	218d      	movs	r1, #141	@ 0x8d
 800159c:	202a      	movs	r0, #42	@ 0x2a
 800159e:	f7ff ff51 	bl	8001444 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80015a2:	213e      	movs	r1, #62	@ 0x3e
 80015a4:	202b      	movs	r0, #43	@ 0x2b
 80015a6:	f7ff ff4d 	bl	8001444 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80015aa:	211e      	movs	r1, #30
 80015ac:	202d      	movs	r0, #45	@ 0x2d
 80015ae:	f7ff ff49 	bl	8001444 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80015b2:	2100      	movs	r1, #0
 80015b4:	202c      	movs	r0, #44	@ 0x2c
 80015b6:	f7ff ff45 	bl	8001444 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80015ba:	2140      	movs	r1, #64	@ 0x40
 80015bc:	2015      	movs	r0, #21
 80015be:	f7ff ff41 	bl	8001444 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80015c2:	213d      	movs	r1, #61	@ 0x3d
 80015c4:	2011      	movs	r0, #17
 80015c6:	f7ff ff3d 	bl	8001444 <Write_MFRC522>

	AntennaOn();
 80015ca:	f7ff ffc4 	bl	8001556 <AntennaOn>
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	48000400 	.word	0x48000400

080015d8 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4603      	mov	r3, r0
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	4613      	mov	r3, r2
 80015e8:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 80015ea:	2302      	movs	r3, #2
 80015ec:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 80015ee:	2300      	movs	r3, #0
 80015f0:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 80015f2:	2300      	movs	r3, #0
 80015f4:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	d006      	beq.n	800160a <MFRC522_ToCard+0x32>
 80015fc:	2b0e      	cmp	r3, #14
 80015fe:	d109      	bne.n	8001614 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001600:	2312      	movs	r3, #18
 8001602:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001604:	2310      	movs	r3, #16
 8001606:	777b      	strb	r3, [r7, #29]
			break;
 8001608:	e005      	b.n	8001616 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800160a:	2377      	movs	r3, #119	@ 0x77
 800160c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800160e:	2330      	movs	r3, #48	@ 0x30
 8001610:	777b      	strb	r3, [r7, #29]
			break;
 8001612:	e000      	b.n	8001616 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001614:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001616:	7fbb      	ldrb	r3, [r7, #30]
 8001618:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4619      	mov	r1, r3
 8001620:	2002      	movs	r0, #2
 8001622:	f7ff ff0f 	bl	8001444 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001626:	2180      	movs	r1, #128	@ 0x80
 8001628:	2004      	movs	r0, #4
 800162a:	f7ff ff74 	bl	8001516 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800162e:	2180      	movs	r1, #128	@ 0x80
 8001630:	200a      	movs	r0, #10
 8001632:	f7ff ff55 	bl	80014e0 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001636:	2100      	movs	r1, #0
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff ff03 	bl	8001444 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	e00a      	b.n	800165a <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4413      	add	r3, r2
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	2009      	movs	r0, #9
 8001650:	f7ff fef8 	bl	8001444 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	3301      	adds	r3, #1
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	429a      	cmp	r2, r3
 8001660:	d3f0      	bcc.n	8001644 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	4619      	mov	r1, r3
 8001666:	2001      	movs	r0, #1
 8001668:	f7ff feec 	bl	8001444 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d103      	bne.n	800167a <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001672:	2180      	movs	r1, #128	@ 0x80
 8001674:	200d      	movs	r0, #13
 8001676:	f7ff ff33 	bl	80014e0 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800167a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800167e:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001680:	2004      	movs	r0, #4
 8001682:	f7ff ff04 	bl	800148e <Read_MFRC522>
 8001686:	4603      	mov	r3, r0
 8001688:	773b      	strb	r3, [r7, #28]
        i--;
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	3b01      	subs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00a      	beq.n	80016ac <MFRC522_ToCard+0xd4>
 8001696:	7f3b      	ldrb	r3, [r7, #28]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d105      	bne.n	80016ac <MFRC522_ToCard+0xd4>
 80016a0:	7f3a      	ldrb	r2, [r7, #28]
 80016a2:	7f7b      	ldrb	r3, [r7, #29]
 80016a4:	4013      	ands	r3, r2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0e9      	beq.n	8001680 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80016ac:	2180      	movs	r1, #128	@ 0x80
 80016ae:	200d      	movs	r0, #13
 80016b0:	f7ff ff31 	bl	8001516 <ClearBitMask>

    if (i != 0)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d052      	beq.n	8001760 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80016ba:	2006      	movs	r0, #6
 80016bc:	f7ff fee7 	bl	800148e <Read_MFRC522>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f003 031b 	and.w	r3, r3, #27
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d148      	bne.n	800175c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80016ce:	7f3a      	ldrb	r2, [r7, #28]
 80016d0:	7fbb      	ldrb	r3, [r7, #30]
 80016d2:	4013      	ands	r3, r2
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 80016de:	2301      	movs	r3, #1
 80016e0:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d13b      	bne.n	8001760 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80016e8:	200a      	movs	r0, #10
 80016ea:	f7ff fed0 	bl	800148e <Read_MFRC522>
 80016ee:	4603      	mov	r3, r0
 80016f0:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80016f2:	200c      	movs	r0, #12
 80016f4:	f7ff fecb 	bl	800148e <Read_MFRC522>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8001706:	7f3b      	ldrb	r3, [r7, #28]
 8001708:	3b01      	subs	r3, #1
 800170a:	00da      	lsls	r2, r3, #3
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	4413      	add	r3, r2
 8001710:	461a      	mov	r2, r3
 8001712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e004      	b.n	8001722 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001718:	7f3b      	ldrb	r3, [r7, #28]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	461a      	mov	r2, r3
 800171e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001720:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001722:	7f3b      	ldrb	r3, [r7, #28]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 800172c:	7f3b      	ldrb	r3, [r7, #28]
 800172e:	2b10      	cmp	r3, #16
 8001730:	d901      	bls.n	8001736 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8001732:	2310      	movs	r3, #16
 8001734:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	e00a      	b.n	8001752 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	18d4      	adds	r4, r2, r3
 8001742:	2009      	movs	r0, #9
 8001744:	f7ff fea3 	bl	800148e <Read_MFRC522>
 8001748:	4603      	mov	r3, r0
 800174a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	3301      	adds	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	7f3b      	ldrb	r3, [r7, #28]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	429a      	cmp	r2, r3
 8001758:	d3f0      	bcc.n	800173c <MFRC522_ToCard+0x164>
 800175a:	e001      	b.n	8001760 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800175c:	2302      	movs	r3, #2
 800175e:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8001760:	7ffb      	ldrb	r3, [r7, #31]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	@ 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd90      	pop	{r4, r7, pc}

0800176a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af02      	add	r7, sp, #8
 8001770:	4603      	mov	r3, r0
 8001772:	6039      	str	r1, [r7, #0]
 8001774:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8001776:	2107      	movs	r1, #7
 8001778:	200d      	movs	r0, #13
 800177a:	f7ff fe63 	bl	8001444 <Write_MFRC522>

	TagType[0] = reqMode;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	200c      	movs	r0, #12
 8001792:	f7ff ff21 	bl	80015d8 <MFRC522_ToCard>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <MFRC522_Request+0x3c>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d001      	beq.n	80017aa <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80017a6:	2302      	movs	r3, #2
 80017a8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80017bc:	2300      	movs	r3, #0
 80017be:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80017c0:	2100      	movs	r1, #0
 80017c2:	200d      	movs	r0, #13
 80017c4:	f7ff fe3e 	bl	8001444 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2293      	movs	r2, #147	@ 0x93
 80017cc:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3301      	adds	r3, #1
 80017d2:	2220      	movs	r2, #32
 80017d4:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	200c      	movs	r0, #12
 80017e4:	f7ff fef8 	bl	80015d8 <MFRC522_ToCard>
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d118      	bne.n	8001824 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	73bb      	strb	r3, [r7, #14]
 80017f6:	e009      	b.n	800180c <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 80017f8:	7bbb      	ldrb	r3, [r7, #14]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	7b7b      	ldrb	r3, [r7, #13]
 8001802:	4053      	eors	r3, r2
 8001804:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	3301      	adds	r3, #1
 800180a:	73bb      	strb	r3, [r7, #14]
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d9f2      	bls.n	80017f8 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	7b7a      	ldrb	r2, [r7, #13]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8001820:	2302      	movs	r3, #2
 8001822:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <isSensorDetected>:
 * Function Name: isSensorDetected
 * Description: Checks if the MFRC522 sensor is detected by reading its Version Register.
 * Input Parameters: None
 * Returns: true if the sensor is detected (version matches known values), false otherwise.
 */
bool isSensorDetected(void){
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
    // Legge il valore dal registro di versione (VersionReg) del MFRC522.
    uchar version = Read_MFRC522(VersionReg);
 8001834:	2037      	movs	r0, #55	@ 0x37
 8001836:	f7ff fe2a 	bl	800148e <Read_MFRC522>
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]

    // Controlla se la versione del chip corrisponde a uno dei valori noti del MFRC522.
    // I valori tipici sono 0x91 (v1.0) o 0x92 (v2.0). Alcuni potrebbero restituire 0x90.
    if (version == MFRC522_VERSION_1 || version == MFRC522_VERSION_2 || version == MFRC522_VERSION_0){
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b91      	cmp	r3, #145	@ 0x91
 8001842:	d005      	beq.n	8001850 <isSensorDetected+0x22>
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2b92      	cmp	r3, #146	@ 0x92
 8001848:	d002      	beq.n	8001850 <isSensorDetected+0x22>
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b90      	cmp	r3, #144	@ 0x90
 800184e:	d101      	bne.n	8001854 <isSensorDetected+0x26>
        return true; // Il sensore è stato rilevato
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <isSensorDetected+0x28>
    }else{
        return false; // Il sensore non è stato rilevato o non sta comunicando correttamente
 8001854:	2300      	movs	r3, #0
    }
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <HAL_MspInit+0x44>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4a0e      	ldr	r2, [pc, #56]	@ (80018a4 <HAL_MspInit+0x44>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6193      	str	r3, [r2, #24]
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <HAL_MspInit+0x44>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_MspInit+0x44>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_MspInit+0x44>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_MspInit+0x44>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001896:	2007      	movs	r0, #7
 8001898:	f000 fe2e 	bl	80024f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <HAL_I2C_MspInit+0x7c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d127      	bne.n	800191a <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <HAL_I2C_MspInit+0x80>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	4a16      	ldr	r2, [pc, #88]	@ (8001928 <HAL_I2C_MspInit+0x80>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d4:	6153      	str	r3, [r2, #20]
 80018d6:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <HAL_I2C_MspInit+0x80>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80018e2:	23c0      	movs	r3, #192	@ 0xc0
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e6:	2312      	movs	r3, #18
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f2:	2304      	movs	r3, #4
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	480b      	ldr	r0, [pc, #44]	@ (800192c <HAL_I2C_MspInit+0x84>)
 80018fe:	f000 fe3d 	bl	800257c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <HAL_I2C_MspInit+0x80>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a08      	ldr	r2, [pc, #32]	@ (8001928 <HAL_I2C_MspInit+0x80>)
 8001908:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_I2C_MspInit+0x80>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	@ 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40005400 	.word	0x40005400
 8001928:	40021000 	.word	0x40021000
 800192c:	48000400 	.word	0x48000400

08001930 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	@ 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a17      	ldr	r2, [pc, #92]	@ (80019ac <HAL_SPI_MspInit+0x7c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d128      	bne.n	80019a4 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001952:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <HAL_SPI_MspInit+0x80>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	4a16      	ldr	r2, [pc, #88]	@ (80019b0 <HAL_SPI_MspInit+0x80>)
 8001958:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800195c:	6193      	str	r3, [r2, #24]
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_SPI_MspInit+0x80>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_SPI_MspInit+0x80>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4a10      	ldr	r2, [pc, #64]	@ (80019b0 <HAL_SPI_MspInit+0x80>)
 8001970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001974:	6153      	str	r3, [r2, #20]
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <HAL_SPI_MspInit+0x80>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001982:	23e0      	movs	r3, #224	@ 0xe0
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001992:	2305      	movs	r3, #5
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a0:	f000 fdec 	bl	800257c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	@ 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40013000 	.word	0x40013000
 80019b0:	40021000 	.word	0x40021000

080019b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_TIM_Base_MspInit+0x38>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10b      	bne.n	80019de <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_TIM_Base_MspInit+0x3c>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <HAL_TIM_Base_MspInit+0x3c>)
 80019cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019d0:	6193      	str	r3, [r2, #24]
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <HAL_TIM_Base_MspInit+0x3c>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a14:	d131      	bne.n	8001a7a <HAL_TIM_IC_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a16:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <HAL_TIM_IC_MspInit+0x90>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001a84 <HAL_TIM_IC_MspInit+0x90>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_TIM_IC_MspInit+0x90>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_TIM_IC_MspInit+0x90>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <HAL_TIM_IC_MspInit+0x90>)
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a38:	6153      	str	r3, [r2, #20]
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_TIM_IC_MspInit+0x90>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a66:	f000 fd89 	bl	800257c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	201c      	movs	r0, #28
 8001a70:	f000 fd4d 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a74:	201c      	movs	r0, #28
 8001a76:	f000 fd66 	bl	8002546 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	@ 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a17      	ldr	r2, [pc, #92]	@ (8001b04 <HAL_UART_MspInit+0x7c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d127      	bne.n	8001afa <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <HAL_UART_MspInit+0x80>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	4a16      	ldr	r2, [pc, #88]	@ (8001b08 <HAL_UART_MspInit+0x80>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab4:	6193      	str	r3, [r2, #24]
 8001ab6:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <HAL_UART_MspInit+0x80>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_UART_MspInit+0x80>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	4a10      	ldr	r2, [pc, #64]	@ (8001b08 <HAL_UART_MspInit+0x80>)
 8001ac8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001acc:	6153      	str	r3, [r2, #20]
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_UART_MspInit+0x80>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ada:	2330      	movs	r3, #48	@ 0x30
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aea:	2307      	movs	r3, #7
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <HAL_UART_MspInit+0x84>)
 8001af6:	f000 fd41 	bl	800257c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	@ 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40013800 	.word	0x40013800
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48000800 	.word	0x48000800

08001b10 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <HAL_PCD_MspInit+0x80>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d129      	bne.n	8001b86 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_PCD_MspInit+0x84>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <HAL_PCD_MspInit+0x84>)
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3c:	6153      	str	r3, [r2, #20]
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_PCD_MspInit+0x84>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001b5c:	230e      	movs	r3, #14
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6a:	f000 fd07 	bl	800257c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <HAL_PCD_MspInit+0x84>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a08      	ldr	r2, [pc, #32]	@ (8001b94 <HAL_PCD_MspInit+0x84>)
 8001b74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_PCD_MspInit+0x84>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	@ 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40005c00 	.word	0x40005c00
 8001b94:	40021000 	.word	0x40021000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <NMI_Handler+0x4>

08001ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <MemManage_Handler+0x4>

08001bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bee:	f000 fb6f 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <TIM2_IRQHandler+0x10>)
 8001bfe:	f003 ff93 	bl	8005b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200007e8 	.word	0x200007e8

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f005 faf6 	bl	800722c <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000a000 	.word	0x2000a000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	20000ba0 	.word	0x20000ba0
 8001c74:	20000cf0 	.word	0x20000cf0

08001c78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <findTag>:


// --- Function Implementations ---

// Function to find a tag in the registeredTags array
TagData* findTag(unsigned char* serNum){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < numRegisteredTags; i++) {
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	e019      	b.n	8001cde <findTag+0x42>
        if (memcmp(registeredTags[i].serialNum, serNum, 5) == 0) {
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	22a4      	movs	r2, #164	@ 0xa4
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	3360      	adds	r3, #96	@ 0x60
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf4 <findTag+0x58>)
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2205      	movs	r2, #5
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f005 fa78 	bl	80071b4 <memcmp>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <findTag+0x3c>
            return &registeredTags[i];
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	22a4      	movs	r2, #164	@ 0xa4
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	4a08      	ldr	r2, [pc, #32]	@ (8001cf4 <findTag+0x58>)
 8001cd4:	4413      	add	r3, r2
 8001cd6:	e008      	b.n	8001cea <findTag+0x4e>
    for (int i = 0; i < numRegisteredTags; i++) {
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <findTag+0x5c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbe0      	blt.n	8001caa <findTag+0xe>
        }
    }
    return NULL;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20000004 	.word	0x20000004

08001cfc <getNamesBySerial>:
	 }

	 return generalita;
}

bool getNamesBySerial(unsigned char* serNum, char* nameBuffer, size_t nameBufferSize, char* surnameBuffer, size_t surnameBufferSize) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
    TagData* foundTag = findTag(serNum); // Usa la tua funzione findTag esistente
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff ffc6 	bl	8001c9c <findTag>
 8001d10:	6178      	str	r0, [r7, #20]

    // Assicurati che i buffer siano sempre terminati da null in caso di errore o tag non trovato
    if (nameBuffer != NULL && nameBufferSize > 0) nameBuffer[0] = '\0';
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <getNamesBySerial+0x28>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <getNamesBySerial+0x28>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
    if (surnameBuffer != NULL && surnameBufferSize > 0) surnameBuffer[0] = '\0';
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <getNamesBySerial+0x3a>
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <getNamesBySerial+0x3a>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]

    if (foundTag != NULL) {
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d029      	beq.n	8001d90 <getNamesBySerial+0x94>
        // Copia il nome nel buffer, assicurandoti di non superare la dimensione
        if (nameBuffer != NULL && nameBufferSize > 0) {
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00f      	beq.n	8001d62 <getNamesBySerial+0x66>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00c      	beq.n	8001d62 <getNamesBySerial+0x66>
            strncpy(nameBuffer, foundTag->name, nameBufferSize - 1);
 8001d48:	6979      	ldr	r1, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68b8      	ldr	r0, [r7, #8]
 8001d52:	f005 fa47 	bl	80071e4 <strncpy>
            nameBuffer[nameBufferSize - 1] = '\0'; // Assicura la terminazione della stringa
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
        }

        // Copia il cognome nel buffer, assicurandoti di non superare la dimensione
        if (surnameBuffer != NULL && surnameBufferSize > 0) {
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d011      	beq.n	8001d8c <getNamesBySerial+0x90>
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00e      	beq.n	8001d8c <getNamesBySerial+0x90>
            strncpy(surnameBuffer, foundTag->surname, surnameBufferSize - 1);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f103 0132 	add.w	r1, r3, #50	@ 0x32
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	461a      	mov	r2, r3
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	f005 fa32 	bl	80071e4 <strncpy>
            surnameBuffer[surnameBufferSize - 1] = '\0'; // Assicura la terminazione della stringa
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
        }
        return true; // Tag trovato e dati copiati
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <getNamesBySerial+0x96>
    } else {
        // Tag non trovato. I buffer sono già stati azzerati sopra.
        return false;
 8001d90:	2300      	movs	r3, #0
    }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <isTagRegistered>:

// Function to check if a tag is registered
bool isTagRegistered(unsigned char* serNum) {
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
    return findTag(serNum) != NULL;
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff7a 	bl	8001c9c <findTag>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	bf14      	ite	ne
 8001dae:	2301      	movne	r3, #1
 8001db0:	2300      	moveq	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <updateCoins>:

// Function to update coins for a given tag
bool updateCoins(unsigned char* serNum, int amount) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    TagData* tag = findTag(serNum);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ff68 	bl	8001c9c <findTag>
 8001dcc:	60f8      	str	r0, [r7, #12]
    if (tag != NULL) {
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00f      	beq.n	8001df4 <updateCoins+0x38>
        if ((tag->coins + amount) >= 0) { // Prevent negative coins
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db07      	blt.n	8001df0 <updateCoins+0x34>
            tag->coins += amount;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	441a      	add	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	66da      	str	r2, [r3, #108]	@ 0x6c
            return true;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e002      	b.n	8001df6 <updateCoins+0x3a>
        } else {
            return false; // Not enough coins
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <updateCoins+0x3a>
        }
    }
    return false; // Tag not found
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <updateDepartureStation>:

// Function to update Departure Station for a given tag
bool updateDepartureStation(uchar* serNum, const char* newStation) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
    TagData* tag = findTag(serNum);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff47 	bl	8001c9c <findTag>
 8001e0e:	60f8      	str	r0, [r7, #12]
    if (tag != NULL) {
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <updateDepartureStation+0x32>
        // Copia la nuova stazione nel campo departureStation
        strncpy(tag->departureStation, newStation, MAX_STRING_LENGTH - 1);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3370      	adds	r3, #112	@ 0x70
 8001e1a:	2231      	movs	r2, #49	@ 0x31
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f005 f9e0 	bl	80071e4 <strncpy>
        tag->departureStation[MAX_STRING_LENGTH - 1] = '\0'; // Assicura la terminazione della stringa
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
        return true;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <updateDepartureStation+0x34>
    }
    return false; // Tag non trovato
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <processTicketPayment>:


TicketProcessResult processTicketPayment(TagData* tag) {
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b0b3      	sub	sp, #204	@ 0xcc
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
    TicketProcessResult result;
    result.accessType = ACCESS_DENIED;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    result.showRedLed = false;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5

    if (tag == NULL) {
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d118      	bne.n	8001e8a <processTicketPayment+0x4e>
        snprintf(result.messageLine1, 17, "ERRORE TAG"); // Max 16 + null
 8001e58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4ad1      	ldr	r2, [pc, #836]	@ (80021a4 <processTicketPayment+0x368>)
 8001e60:	2111      	movs	r1, #17
 8001e62:	4618      	mov	r0, r3
 8001e64:	f005 f970 	bl	8007148 <sniprintf>
        snprintf(result.messageLine2, 17, "NON VALIDO!");
 8001e68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e6c:	3333      	adds	r3, #51	@ 0x33
 8001e6e:	4ace      	ldr	r2, [pc, #824]	@ (80021a8 <processTicketPayment+0x36c>)
 8001e70:	2111      	movs	r1, #17
 8001e72:	4618      	mov	r0, r3
 8001e74:	f005 f968 	bl	8007148 <sniprintf>
        return result;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e80:	2266      	movs	r2, #102	@ 0x66
 8001e82:	4619      	mov	r1, r3
 8001e84:	f005 f9fe 	bl	8007284 <memcpy>
 8001e88:	e187      	b.n	800219a <processTicketPayment+0x35e>
    }

    char tempBuffer[MAX_STRING_LENGTH]; // Buffer temporaneo per sprintf

    if (strcmp(tag->departureStation, "Pozzuoli") == 0) {
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	3370      	adds	r3, #112	@ 0x70
 8001e8e:	49c7      	ldr	r1, [pc, #796]	@ (80021ac <processTicketPayment+0x370>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe f99d 	bl	80001d0 <strcmp>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d119      	bne.n	8001ed0 <processTicketPayment+0x94>
        snprintf(result.messageLine1, 17, "USCITA Pozzuoli");
 8001e9c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	4ac3      	ldr	r2, [pc, #780]	@ (80021b0 <processTicketPayment+0x374>)
 8001ea4:	2111      	movs	r1, #17
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 f94e 	bl	8007148 <sniprintf>
        snprintf(result.messageLine2, 17, "TORNELLO APERTO");
 8001eac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001eb0:	3333      	adds	r3, #51	@ 0x33
 8001eb2:	4ac0      	ldr	r2, [pc, #768]	@ (80021b4 <processTicketPayment+0x378>)
 8001eb4:	2111      	movs	r1, #17
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f005 f946 	bl	8007148 <sniprintf>
        result.accessType = ACCESS_EXIT;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        updateDepartureStation(tag->serialNum, "");
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	3364      	adds	r3, #100	@ 0x64
 8001ec6:	49bc      	ldr	r1, [pc, #752]	@ (80021b8 <processTicketPayment+0x37c>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff98 	bl	8001dfe <updateDepartureStation>
 8001ece:	e15c      	b.n	800218a <processTicketPayment+0x34e>
    } else if (strcmp(tag->departureStation, "Bagnoli") == 0) {
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	3370      	adds	r3, #112	@ 0x70
 8001ed4:	49b9      	ldr	r1, [pc, #740]	@ (80021bc <processTicketPayment+0x380>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe f97a 	bl	80001d0 <strcmp>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 8085 	bne.w	8001fee <processTicketPayment+0x1b2>
        int costoBagnoli = 130;
 8001ee4:	2382      	movs	r3, #130	@ 0x82
 8001ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        if (updateCoins(tag->serialNum, -costoBagnoli)) {
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8001ef0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f7ff ff5f 	bl	8001dbc <updateCoins>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d05d      	beq.n	8001fc0 <processTicketPayment+0x184>
            int euroScalati = costoBagnoli / 100;
 8001f04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f08:	4aad      	ldr	r2, [pc, #692]	@ (80021c0 <processTicketPayment+0x384>)
 8001f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f0e:	1152      	asrs	r2, r2, #5
 8001f10:	17db      	asrs	r3, r3, #31
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            int centesimiScalati = costoBagnoli % 100;
 8001f18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f1c:	4aa8      	ldr	r2, [pc, #672]	@ (80021c0 <processTicketPayment+0x384>)
 8001f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f22:	1151      	asrs	r1, r2, #5
 8001f24:	17da      	asrs	r2, r3, #31
 8001f26:	1a8a      	subs	r2, r1, r2
 8001f28:	2164      	movs	r1, #100	@ 0x64
 8001f2a:	fb01 f202 	mul.w	r2, r1, r2
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            snprintf(tempBuffer, MAX_STRING_LENGTH, "SCALATI: %d.%02dE", euroScalati, centesimiScalati);
 8001f34:	f107 000c 	add.w	r0, r7, #12
 8001f38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f42:	4aa0      	ldr	r2, [pc, #640]	@ (80021c4 <processTicketPayment+0x388>)
 8001f44:	2132      	movs	r1, #50	@ 0x32
 8001f46:	f005 f8ff 	bl	8007148 <sniprintf>
            snprintf(result.messageLine1, 17, "%s", tempBuffer); // Tronca a 16
 8001f4a:	f107 020c 	add.w	r2, r7, #12
 8001f4e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f52:	1c58      	adds	r0, r3, #1
 8001f54:	4613      	mov	r3, r2
 8001f56:	4a9c      	ldr	r2, [pc, #624]	@ (80021c8 <processTicketPayment+0x38c>)
 8001f58:	2111      	movs	r1, #17
 8001f5a:	f005 f8f5 	bl	8007148 <sniprintf>

            snprintf(tempBuffer, MAX_STRING_LENGTH, "CREDITO: %d.%02dE", tag->coins / 100, tag->coins % 100);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f62:	4a97      	ldr	r2, [pc, #604]	@ (80021c0 <processTicketPayment+0x384>)
 8001f64:	fb82 1203 	smull	r1, r2, r2, r3
 8001f68:	1152      	asrs	r2, r2, #5
 8001f6a:	17db      	asrs	r3, r3, #31
 8001f6c:	1ad4      	subs	r4, r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f72:	4b93      	ldr	r3, [pc, #588]	@ (80021c0 <processTicketPayment+0x384>)
 8001f74:	fb83 1302 	smull	r1, r3, r3, r2
 8001f78:	1159      	asrs	r1, r3, #5
 8001f7a:	17d3      	asrs	r3, r2, #31
 8001f7c:	1acb      	subs	r3, r1, r3
 8001f7e:	2164      	movs	r1, #100	@ 0x64
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f107 000c 	add.w	r0, r7, #12
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	4623      	mov	r3, r4
 8001f8e:	4a8f      	ldr	r2, [pc, #572]	@ (80021cc <processTicketPayment+0x390>)
 8001f90:	2132      	movs	r1, #50	@ 0x32
 8001f92:	f005 f8d9 	bl	8007148 <sniprintf>
            snprintf(result.messageLine2, 17, "%s", tempBuffer); // Tronca a 16
 8001f96:	f107 020c 	add.w	r2, r7, #12
 8001f9a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f9e:	f103 0033 	add.w	r0, r3, #51	@ 0x33
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	4a88      	ldr	r2, [pc, #544]	@ (80021c8 <processTicketPayment+0x38c>)
 8001fa6:	2111      	movs	r1, #17
 8001fa8:	f005 f8ce 	bl	8007148 <sniprintf>

            // Questi messaggi verranno visualizzati dal main dopo aver chiamato questa funzione
            result.accessType = ACCESS_EXIT;
 8001fac:	2302      	movs	r3, #2
 8001fae:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            updateDepartureStation(tag->serialNum, "");
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3364      	adds	r3, #100	@ 0x64
 8001fb6:	4980      	ldr	r1, [pc, #512]	@ (80021b8 <processTicketPayment+0x37c>)
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff20 	bl	8001dfe <updateDepartureStation>
 8001fbe:	e0e4      	b.n	800218a <processTicketPayment+0x34e>
        } else {
            snprintf(result.messageLine1, 17, "ACCESSO NEGATO");
 8001fc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	4a82      	ldr	r2, [pc, #520]	@ (80021d0 <processTicketPayment+0x394>)
 8001fc8:	2111      	movs	r1, #17
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f005 f8bc 	bl	8007148 <sniprintf>
            snprintf(result.messageLine2, 17, "CREDITO INSUFF.");
 8001fd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fd4:	3333      	adds	r3, #51	@ 0x33
 8001fd6:	4a7f      	ldr	r2, [pc, #508]	@ (80021d4 <processTicketPayment+0x398>)
 8001fd8:	2111      	movs	r1, #17
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f005 f8b4 	bl	8007148 <sniprintf>
            result.showRedLed = true;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
            result.accessType = ACCESS_DENIED;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8001fec:	e0cd      	b.n	800218a <processTicketPayment+0x34e>
        }
    } else if (strcmp(tag->departureStation, "Napoli SG") == 0) {
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	3370      	adds	r3, #112	@ 0x70
 8001ff2:	4979      	ldr	r1, [pc, #484]	@ (80021d8 <processTicketPayment+0x39c>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe f8eb 	bl	80001d0 <strcmp>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f040 8086 	bne.w	800210e <processTicketPayment+0x2d2>
        int costoSanGiovanni = 310;
 8002002:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8002006:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        if (updateCoins(tag->serialNum, -costoSanGiovanni)) {
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8002010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002014:	425b      	negs	r3, r3
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f7ff fecf 	bl	8001dbc <updateCoins>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d05d      	beq.n	80020e0 <processTicketPayment+0x2a4>
            int euroScalati = costoSanGiovanni / 100;
 8002024:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002028:	4a65      	ldr	r2, [pc, #404]	@ (80021c0 <processTicketPayment+0x384>)
 800202a:	fb82 1203 	smull	r1, r2, r2, r3
 800202e:	1152      	asrs	r2, r2, #5
 8002030:	17db      	asrs	r3, r3, #31
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            int centesimiScalati = costoSanGiovanni % 100;
 8002038:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800203c:	4a60      	ldr	r2, [pc, #384]	@ (80021c0 <processTicketPayment+0x384>)
 800203e:	fb82 1203 	smull	r1, r2, r2, r3
 8002042:	1151      	asrs	r1, r2, #5
 8002044:	17da      	asrs	r2, r3, #31
 8002046:	1a8a      	subs	r2, r1, r2
 8002048:	2164      	movs	r1, #100	@ 0x64
 800204a:	fb01 f202 	mul.w	r2, r1, r2
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            snprintf(tempBuffer, MAX_STRING_LENGTH, "SCALATI: %d.%02dE", euroScalati, centesimiScalati);
 8002054:	f107 000c 	add.w	r0, r7, #12
 8002058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002062:	4a58      	ldr	r2, [pc, #352]	@ (80021c4 <processTicketPayment+0x388>)
 8002064:	2132      	movs	r1, #50	@ 0x32
 8002066:	f005 f86f 	bl	8007148 <sniprintf>
            snprintf(result.messageLine1, 17, "%s", tempBuffer);
 800206a:	f107 020c 	add.w	r2, r7, #12
 800206e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002072:	1c58      	adds	r0, r3, #1
 8002074:	4613      	mov	r3, r2
 8002076:	4a54      	ldr	r2, [pc, #336]	@ (80021c8 <processTicketPayment+0x38c>)
 8002078:	2111      	movs	r1, #17
 800207a:	f005 f865 	bl	8007148 <sniprintf>

            snprintf(tempBuffer, MAX_STRING_LENGTH, "CREDITO: %d.%02dE", tag->coins / 100, tag->coins % 100);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002082:	4a4f      	ldr	r2, [pc, #316]	@ (80021c0 <processTicketPayment+0x384>)
 8002084:	fb82 1203 	smull	r1, r2, r2, r3
 8002088:	1152      	asrs	r2, r2, #5
 800208a:	17db      	asrs	r3, r3, #31
 800208c:	1ad4      	subs	r4, r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002092:	4b4b      	ldr	r3, [pc, #300]	@ (80021c0 <processTicketPayment+0x384>)
 8002094:	fb83 1302 	smull	r1, r3, r3, r2
 8002098:	1159      	asrs	r1, r3, #5
 800209a:	17d3      	asrs	r3, r2, #31
 800209c:	1acb      	subs	r3, r1, r3
 800209e:	2164      	movs	r1, #100	@ 0x64
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f107 000c 	add.w	r0, r7, #12
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4623      	mov	r3, r4
 80020ae:	4a47      	ldr	r2, [pc, #284]	@ (80021cc <processTicketPayment+0x390>)
 80020b0:	2132      	movs	r1, #50	@ 0x32
 80020b2:	f005 f849 	bl	8007148 <sniprintf>
            snprintf(result.messageLine2, 17, "%s", tempBuffer);
 80020b6:	f107 020c 	add.w	r2, r7, #12
 80020ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020be:	f103 0033 	add.w	r0, r3, #51	@ 0x33
 80020c2:	4613      	mov	r3, r2
 80020c4:	4a40      	ldr	r2, [pc, #256]	@ (80021c8 <processTicketPayment+0x38c>)
 80020c6:	2111      	movs	r1, #17
 80020c8:	f005 f83e 	bl	8007148 <sniprintf>

            result.accessType = ACCESS_EXIT;
 80020cc:	2302      	movs	r3, #2
 80020ce:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            updateDepartureStation(tag->serialNum, "");
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	3364      	adds	r3, #100	@ 0x64
 80020d6:	4938      	ldr	r1, [pc, #224]	@ (80021b8 <processTicketPayment+0x37c>)
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fe90 	bl	8001dfe <updateDepartureStation>
 80020de:	e054      	b.n	800218a <processTicketPayment+0x34e>
        } else {
            snprintf(result.messageLine1, 17, "ACCESSO NEGATO");
 80020e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a3a      	ldr	r2, [pc, #232]	@ (80021d0 <processTicketPayment+0x394>)
 80020e8:	2111      	movs	r1, #17
 80020ea:	4618      	mov	r0, r3
 80020ec:	f005 f82c 	bl	8007148 <sniprintf>
            snprintf(result.messageLine2, 17, "CREDITO INSUFF.");
 80020f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020f4:	3333      	adds	r3, #51	@ 0x33
 80020f6:	4a37      	ldr	r2, [pc, #220]	@ (80021d4 <processTicketPayment+0x398>)
 80020f8:	2111      	movs	r1, #17
 80020fa:	4618      	mov	r0, r3
 80020fc:	f005 f824 	bl	8007148 <sniprintf>
            result.showRedLed = true;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
            result.accessType = ACCESS_DENIED;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 800210c:	e03d      	b.n	800218a <processTicketPayment+0x34e>
        }
    }
    // Logica di entrata: se la stazione di partenza è vuota o sconosciuta
    else if (strlen(tag->departureStation) == 0 || strcmp(tag->departureStation, "Sconosciuta") == 0) {
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	3370      	adds	r3, #112	@ 0x70
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <processTicketPayment+0x2ee>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	3370      	adds	r3, #112	@ 0x70
 800211c:	492f      	ldr	r1, [pc, #188]	@ (80021dc <processTicketPayment+0x3a0>)
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f856 	bl	80001d0 <strcmp>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d119      	bne.n	800215e <processTicketPayment+0x322>
        snprintf(result.messageLine1, 17, "ARRIVEDERCI");
 800212a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800212e:	3301      	adds	r3, #1
 8002130:	4a2b      	ldr	r2, [pc, #172]	@ (80021e0 <processTicketPayment+0x3a4>)
 8002132:	2111      	movs	r1, #17
 8002134:	4618      	mov	r0, r3
 8002136:	f005 f807 	bl	8007148 <sniprintf>
        snprintf(result.messageLine2, 17, "DA POZZUOLI"); // Stazione di entrata predefinita
 800213a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800213e:	3333      	adds	r3, #51	@ 0x33
 8002140:	4a28      	ldr	r2, [pc, #160]	@ (80021e4 <processTicketPayment+0x3a8>)
 8002142:	2111      	movs	r1, #17
 8002144:	4618      	mov	r0, r3
 8002146:	f004 ffff 	bl	8007148 <sniprintf>
        result.accessType = ACCESS_ENTER;
 800214a:	2301      	movs	r3, #1
 800214c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        updateDepartureStation(tag->serialNum, "Pozzuoli"); // Aggiorna la stazione del tag
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	3364      	adds	r3, #100	@ 0x64
 8002154:	4915      	ldr	r1, [pc, #84]	@ (80021ac <processTicketPayment+0x370>)
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fe51 	bl	8001dfe <updateDepartureStation>
    else if (strlen(tag->departureStation) == 0 || strcmp(tag->departureStation, "Sconosciuta") == 0) {
 800215c:	e015      	b.n	800218a <processTicketPayment+0x34e>
    }
    else {
        snprintf(result.messageLine1, 17, "STAZ. NON GEST.");
 800215e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002162:	3301      	adds	r3, #1
 8002164:	4a20      	ldr	r2, [pc, #128]	@ (80021e8 <processTicketPayment+0x3ac>)
 8002166:	2111      	movs	r1, #17
 8002168:	4618      	mov	r0, r3
 800216a:	f004 ffed 	bl	8007148 <sniprintf>
        snprintf(result.messageLine2, 17, "ACCESSO NEGATO!");
 800216e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002172:	3333      	adds	r3, #51	@ 0x33
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <processTicketPayment+0x3b0>)
 8002176:	2111      	movs	r1, #17
 8002178:	4618      	mov	r0, r3
 800217a:	f004 ffe5 	bl	8007148 <sniprintf>
        result.showRedLed = true;
 800217e:	2301      	movs	r3, #1
 8002180:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
        result.accessType = ACCESS_DENIED;
 8002184:	2300      	movs	r3, #0
 8002186:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    }

    return result;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4618      	mov	r0, r3
 800218e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002192:	2266      	movs	r2, #102	@ 0x66
 8002194:	4619      	mov	r1, r3
 8002196:	f005 f875 	bl	8007284 <memcpy>
}
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	37c4      	adds	r7, #196	@ 0xc4
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	bf00      	nop
 80021a4:	08007aac 	.word	0x08007aac
 80021a8:	08007ab8 	.word	0x08007ab8
 80021ac:	08007ac4 	.word	0x08007ac4
 80021b0:	08007ad0 	.word	0x08007ad0
 80021b4:	08007ae0 	.word	0x08007ae0
 80021b8:	08007af0 	.word	0x08007af0
 80021bc:	08007af4 	.word	0x08007af4
 80021c0:	51eb851f 	.word	0x51eb851f
 80021c4:	08007afc 	.word	0x08007afc
 80021c8:	08007b10 	.word	0x08007b10
 80021cc:	08007b14 	.word	0x08007b14
 80021d0:	08007b28 	.word	0x08007b28
 80021d4:	08007b38 	.word	0x08007b38
 80021d8:	08007b48 	.word	0x08007b48
 80021dc:	08007b54 	.word	0x08007b54
 80021e0:	08007b60 	.word	0x08007b60
 80021e4:	08007b6c 	.word	0x08007b6c
 80021e8:	08007b78 	.word	0x08007b78
 80021ec:	08007b88 	.word	0x08007b88

080021f0 <Reset_Handler>:
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002228 <LoopForever+0x2>
 80021f4:	f7ff fd40 	bl	8001c78 <SystemInit>
 80021f8:	480c      	ldr	r0, [pc, #48]	@ (800222c <LoopForever+0x6>)
 80021fa:	490d      	ldr	r1, [pc, #52]	@ (8002230 <LoopForever+0xa>)
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <LoopForever+0xe>)
 80021fe:	2300      	movs	r3, #0
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:
 8002202:	58d4      	ldr	r4, [r2, r3]
 8002204:	50c4      	str	r4, [r0, r3]
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:
 8002208:	18c4      	adds	r4, r0, r3
 800220a:	428c      	cmp	r4, r1
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <LoopForever+0x12>)
 8002210:	4c0a      	ldr	r4, [pc, #40]	@ (800223c <LoopForever+0x16>)
 8002212:	2300      	movs	r3, #0
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:
 800221a:	42a2      	cmp	r2, r4
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>
 800221e:	f005 f80b 	bl	8007238 <__libc_init_array>
 8002222:	f7fe fb2f 	bl	8000884 <main>

08002226 <LoopForever>:
 8002226:	e7fe      	b.n	8002226 <LoopForever>
 8002228:	2000a000 	.word	0x2000a000
 800222c:	20000000 	.word	0x20000000
 8002230:	200006c8 	.word	0x200006c8
 8002234:	08007c14 	.word	0x08007c14
 8002238:	200006c8 	.word	0x200006c8
 800223c:	20000cf0 	.word	0x20000cf0

08002240 <ADC1_2_IRQHandler>:
 8002240:	e7fe      	b.n	8002240 <ADC1_2_IRQHandler>
	...

08002244 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002248:	4b08      	ldr	r3, [pc, #32]	@ (800226c <HAL_Init+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a07      	ldr	r2, [pc, #28]	@ (800226c <HAL_Init+0x28>)
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f000 f94f 	bl	80024f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225a:	2000      	movs	r0, #0
 800225c:	f000 f808 	bl	8002270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002260:	f7ff fafe 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000

08002270 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002278:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <HAL_InitTick+0x54>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_InitTick+0x58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002286:	fbb3 f3f1 	udiv	r3, r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f967 	bl	8002562 <HAL_SYSTICK_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00e      	b.n	80022bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d80a      	bhi.n	80022ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f000 f92f 	bl	800250e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b0:	4a06      	ldr	r2, [pc, #24]	@ (80022cc <HAL_InitTick+0x5c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000674 	.word	0x20000674
 80022cc:	20000670 	.word	0x20000670

080022d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000674 	.word	0x20000674
 80022f4:	20000ba4 	.word	0x20000ba4

080022f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80022fc:	4b03      	ldr	r3, [pc, #12]	@ (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000ba4 	.word	0x20000ba4

08002310 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff ffee 	bl	80022f8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffde 	bl	80022f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000674 	.word	0x20000674

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	@ (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db0b      	blt.n	80023e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4907      	ldr	r1, [pc, #28]	@ (80023f4 <__NVIC_EnableIRQ+0x38>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	@ (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	@ (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	@ 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	@ 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024c4:	d301      	bcc.n	80024ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00f      	b.n	80024ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ca:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <SysTick_Config+0x40>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d2:	210f      	movs	r1, #15
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f7ff ff8e 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024dc:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <SysTick_Config+0x40>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e2:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <SysTick_Config+0x40>)
 80024e4:	2207      	movs	r2, #7
 80024e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	e000e010 	.word	0xe000e010

080024f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff29 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002520:	f7ff ff3e 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 8002524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f7ff ff8e 	bl	800244c <NVIC_EncodePriority>
 8002530:	4602      	mov	r2, r0
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff5d 	bl	80023f8 <__NVIC_SetPriority>
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff31 	bl	80023bc <__NVIC_EnableIRQ>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ffa2 	bl	80024b4 <SysTick_Config>
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258a:	e154      	b.n	8002836 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8146 	beq.w	8002830 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d005      	beq.n	80025bc <HAL_GPIO_Init+0x40>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d130      	bne.n	800261e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f2:	2201      	movs	r2, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f003 0201 	and.w	r2, r3, #1
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b03      	cmp	r3, #3
 8002628:	d017      	beq.n	800265a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d123      	bne.n	80026ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	08da      	lsrs	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3208      	adds	r2, #8
 800266e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	08da      	lsrs	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3208      	adds	r2, #8
 80026a8:	6939      	ldr	r1, [r7, #16]
 80026aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0203 	and.w	r2, r3, #3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80a0 	beq.w	8002830 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f0:	4b58      	ldr	r3, [pc, #352]	@ (8002854 <HAL_GPIO_Init+0x2d8>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a57      	ldr	r2, [pc, #348]	@ (8002854 <HAL_GPIO_Init+0x2d8>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b55      	ldr	r3, [pc, #340]	@ (8002854 <HAL_GPIO_Init+0x2d8>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002708:	4a53      	ldr	r2, [pc, #332]	@ (8002858 <HAL_GPIO_Init+0x2dc>)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	220f      	movs	r2, #15
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002732:	d019      	beq.n	8002768 <HAL_GPIO_Init+0x1ec>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a49      	ldr	r2, [pc, #292]	@ (800285c <HAL_GPIO_Init+0x2e0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d013      	beq.n	8002764 <HAL_GPIO_Init+0x1e8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a48      	ldr	r2, [pc, #288]	@ (8002860 <HAL_GPIO_Init+0x2e4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00d      	beq.n	8002760 <HAL_GPIO_Init+0x1e4>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a47      	ldr	r2, [pc, #284]	@ (8002864 <HAL_GPIO_Init+0x2e8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d007      	beq.n	800275c <HAL_GPIO_Init+0x1e0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a46      	ldr	r2, [pc, #280]	@ (8002868 <HAL_GPIO_Init+0x2ec>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d101      	bne.n	8002758 <HAL_GPIO_Init+0x1dc>
 8002754:	2304      	movs	r3, #4
 8002756:	e008      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002758:	2305      	movs	r3, #5
 800275a:	e006      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 800275c:	2303      	movs	r3, #3
 800275e:	e004      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002760:	2302      	movs	r3, #2
 8002762:	e002      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002768:	2300      	movs	r3, #0
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	f002 0203 	and.w	r2, r2, #3
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	4093      	lsls	r3, r2
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800277a:	4937      	ldr	r1, [pc, #220]	@ (8002858 <HAL_GPIO_Init+0x2dc>)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002788:	4b38      	ldr	r3, [pc, #224]	@ (800286c <HAL_GPIO_Init+0x2f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027ac:	4a2f      	ldr	r2, [pc, #188]	@ (800286c <HAL_GPIO_Init+0x2f0>)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b2:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <HAL_GPIO_Init+0x2f0>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027d6:	4a25      	ldr	r2, [pc, #148]	@ (800286c <HAL_GPIO_Init+0x2f0>)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027dc:	4b23      	ldr	r3, [pc, #140]	@ (800286c <HAL_GPIO_Init+0x2f0>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002800:	4a1a      	ldr	r2, [pc, #104]	@ (800286c <HAL_GPIO_Init+0x2f0>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002806:	4b19      	ldr	r3, [pc, #100]	@ (800286c <HAL_GPIO_Init+0x2f0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800282a:	4a10      	ldr	r2, [pc, #64]	@ (800286c <HAL_GPIO_Init+0x2f0>)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3301      	adds	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	f47f aea3 	bne.w	800258c <HAL_GPIO_Init+0x10>
  }
}
 8002846:	bf00      	nop
 8002848:	bf00      	nop
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40021000 	.word	0x40021000
 8002858:	40010000 	.word	0x40010000
 800285c:	48000400 	.word	0x48000400
 8002860:	48000800 	.word	0x48000800
 8002864:	48000c00 	.word	0x48000c00
 8002868:	48001000 	.word	0x48001000
 800286c:	40010400 	.word	0x40010400

08002870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800288c:	e002      	b.n	8002894 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	041a      	lsls	r2, r3, #16
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43d9      	mvns	r1, r3
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	400b      	ands	r3, r1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	619a      	str	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e08d      	b.n	8002a02 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe ffd4 	bl	80018a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	@ 0x24
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002924:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002934:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d107      	bne.n	800294e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e006      	b.n	800295c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800295a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d108      	bne.n	8002976 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	e007      	b.n	8002986 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69d9      	ldr	r1, [r3, #28]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	461a      	mov	r2, r3
 8002a18:	460b      	mov	r3, r1
 8002a1a:	817b      	strh	r3, [r7, #10]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	f040 80fd 	bne.w	8002c28 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_I2C_Master_Transmit+0x30>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e0f6      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x21e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a44:	f7ff fc58 	bl	80022f8 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2319      	movs	r3, #25
 8002a50:	2201      	movs	r2, #1
 8002a52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fa00 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0e1      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2221      	movs	r2, #33	@ 0x21
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2210      	movs	r2, #16
 8002a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	893a      	ldrh	r2, [r7, #8]
 8002a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2bff      	cmp	r3, #255	@ 0xff
 8002a96:	d906      	bls.n	8002aa6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	22ff      	movs	r2, #255	@ 0xff
 8002a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e007      	b.n	8002ab6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ab0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ab4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d024      	beq.n	8002b08 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	8979      	ldrh	r1, [r7, #10]
 8002afa:	4b4e      	ldr	r3, [pc, #312]	@ (8002c34 <HAL_I2C_Master_Transmit+0x228>)
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fb6f 	bl	80031e4 <I2C_TransferConfig>
 8002b06:	e066      	b.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	8979      	ldrh	r1, [r7, #10]
 8002b10:	4b48      	ldr	r3, [pc, #288]	@ (8002c34 <HAL_I2C_Master_Transmit+0x228>)
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fb64 	bl	80031e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b1c:	e05b      	b.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	6a39      	ldr	r1, [r7, #32]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f9f3 	bl	8002f0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e07b      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d034      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ca>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d130      	bne.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2180      	movs	r1, #128	@ 0x80
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f96c 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e04d      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2bff      	cmp	r3, #255	@ 0xff
 8002b96:	d90e      	bls.n	8002bb6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	22ff      	movs	r2, #255	@ 0xff
 8002b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	8979      	ldrh	r1, [r7, #10]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fb18 	bl	80031e4 <I2C_TransferConfig>
 8002bb4:	e00f      	b.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	8979      	ldrh	r1, [r7, #10]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fb07 	bl	80031e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d19e      	bne.n	8002b1e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	6a39      	ldr	r1, [r7, #32]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f9d9 	bl	8002f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e01a      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <HAL_I2C_Master_Transmit+0x22c>)
 8002c08:	400b      	ands	r3, r1
 8002c0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	80002000 	.word	0x80002000
 8002c38:	fe00e800 	.word	0xfe00e800

08002c3c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	@ 0x28
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	f040 80d6 	bne.w	8002e0a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c6c:	d101      	bne.n	8002c72 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e0cc      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_I2C_IsDeviceReady+0x44>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0c5      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x1d0>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2224      	movs	r2, #36	@ 0x24
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d107      	bne.n	8002cae <HAL_I2C_IsDeviceReady+0x72>
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ca8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cac:	e006      	b.n	8002cbc <HAL_I2C_IsDeviceReady+0x80>
 8002cae:	897b      	ldrh	r3, [r7, #10]
 8002cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cb8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002cc2:	f7ff fb19 	bl	80022f8 <HAL_GetTick>
 8002cc6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002cf4:	e034      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d01a      	beq.n	8002d34 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7ff fafb 	bl	80022f8 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <HAL_I2C_IsDeviceReady+0xd8>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10f      	bne.n	8002d34 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e06b      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	bf0c      	ite	eq
 8002d42:	2301      	moveq	r3, #1
 8002d44:	2300      	movne	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d60:	7ffb      	ldrb	r3, [r7, #31]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_I2C_IsDeviceReady+0x130>
 8002d66:	7fbb      	ldrb	r3, [r7, #30]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0c4      	beq.n	8002cf6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d01a      	beq.n	8002db0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2120      	movs	r1, #32
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f869 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e03b      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e02d      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2120      	movs	r1, #32
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f84e 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e020      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2210      	movs	r2, #16
 8002dd0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	f63f af56 	bhi.w	8002c96 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d103      	bne.n	8002e32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d007      	beq.n	8002e50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	619a      	str	r2, [r3, #24]
  }
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6c:	e03b      	b.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	6839      	ldr	r1, [r7, #0]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f8d6 	bl	8003024 <I2C_IsErrorOccurred>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e041      	b.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d02d      	beq.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7ff fa35 	bl	80022f8 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d122      	bne.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d113      	bne.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	f043 0220 	orr.w	r2, r3, #32
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00f      	b.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699a      	ldr	r2, [r3, #24]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d0b4      	beq.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f1a:	e033      	b.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f87f 	bl	8003024 <I2C_IsErrorOccurred>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e031      	b.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d025      	beq.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f38:	f7ff f9de 	bl	80022f8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d302      	bcc.n	8002f4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11a      	bne.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d013      	beq.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e007      	b.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d1c4      	bne.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa8:	e02f      	b.n	800300a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f838 	bl	8003024 <I2C_IsErrorOccurred>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e02d      	b.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7ff f99b 	bl	80022f8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d11a      	bne.n	800300a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d013      	beq.n	800300a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	f043 0220 	orr.w	r2, r3, #32
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d1c8      	bne.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	@ 0x28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d068      	beq.n	8003122 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003058:	e049      	b.n	80030ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d045      	beq.n	80030ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003062:	f7ff f949 	bl	80022f8 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	d302      	bcc.n	8003078 <I2C_IsErrorOccurred+0x54>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d13a      	bne.n	80030ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003082:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800308a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800309a:	d121      	bne.n	80030e0 <I2C_IsErrorOccurred+0xbc>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030a2:	d01d      	beq.n	80030e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d01a      	beq.n	80030e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030ba:	f7ff f91d 	bl	80022f8 <HAL_GetTick>
 80030be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c0:	e00e      	b.n	80030e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030c2:	f7ff f919 	bl	80022f8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b19      	cmp	r3, #25
 80030ce:	d907      	bls.n	80030e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	f043 0320 	orr.w	r3, r3, #32
 80030d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030de:	e006      	b.n	80030ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d1e9      	bne.n	80030c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d003      	beq.n	8003104 <I2C_IsErrorOccurred+0xe0>
 80030fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0aa      	beq.n	800305a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003108:	2b00      	cmp	r3, #0
 800310a:	d103      	bne.n	8003114 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2220      	movs	r2, #32
 8003112:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003144:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f043 0308 	orr.w	r3, r3, #8
 800315c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003166:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003188:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01c      	beq.n	80031d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff fe3b 	bl	8002e14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <I2C_IsErrorOccurred+0x1bc>)
 80031aa:	400b      	ands	r3, r1
 80031ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3728      	adds	r7, #40	@ 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	fe00e800 	.word	0xfe00e800

080031e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	4613      	mov	r3, r2
 80031f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031fc:	7a7b      	ldrb	r3, [r7, #9]
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003204:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	4313      	orrs	r3, r2
 800320e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003212:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	0d5b      	lsrs	r3, r3, #21
 800321e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003222:	4b08      	ldr	r3, [pc, #32]	@ (8003244 <I2C_TransferConfig+0x60>)
 8003224:	430b      	orrs	r3, r1
 8003226:	43db      	mvns	r3, r3
 8003228:	ea02 0103 	and.w	r1, r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	03ff63ff 	.word	0x03ff63ff

08003248 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	d138      	bne.n	80032d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003268:	2302      	movs	r3, #2
 800326a:	e032      	b.n	80032d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	@ 0x24
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800329a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d139      	bne.n	8003368 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032fe:	2302      	movs	r3, #2
 8003300:	e033      	b.n	800336a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2224      	movs	r2, #36	@ 0x24
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003330:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0b9      	b.n	80034fc <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fe fbb7 	bl	8001b10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2203      	movs	r2, #3
 80033a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 fde3 	bl	8006f7a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
 80033b8:	e03e      	b.n	8003438 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	3311      	adds	r3, #17
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	440b      	add	r3, r1
 80033dc:	3310      	adds	r3, #16
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	440b      	add	r3, r1
 80033f0:	3313      	adds	r3, #19
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	440b      	add	r3, r1
 8003404:	3320      	adds	r3, #32
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	440b      	add	r3, r1
 8003418:	3324      	adds	r3, #36	@ 0x24
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	3301      	adds	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	791b      	ldrb	r3, [r3, #4]
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	429a      	cmp	r2, r3
 8003440:	d3bb      	bcc.n	80033ba <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	e044      	b.n	80034d2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	440b      	add	r3, r1
 8003456:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	3301      	adds	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	791b      	ldrb	r3, [r3, #4]
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d3b5      	bcc.n	8003448 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80034e8:	f003 fd62 	bl	8006fb0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800350a:	af00      	add	r7, sp, #0
 800350c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003510:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003514:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f000 bff4 	b.w	8004512 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 816d 	beq.w	800381a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003540:	4bb4      	ldr	r3, [pc, #720]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b04      	cmp	r3, #4
 800354a:	d00c      	beq.n	8003566 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800354c:	4bb1      	ldr	r3, [pc, #708]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b08      	cmp	r3, #8
 8003556:	d157      	bne.n	8003608 <HAL_RCC_OscConfig+0x104>
 8003558:	4bae      	ldr	r3, [pc, #696]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003564:	d150      	bne.n	8003608 <HAL_RCC_OscConfig+0x104>
 8003566:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800356a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800357a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b3f      	cmp	r3, #63	@ 0x3f
 8003586:	d802      	bhi.n	800358e <HAL_RCC_OscConfig+0x8a>
 8003588:	4ba2      	ldr	r3, [pc, #648]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	e015      	b.n	80035ba <HAL_RCC_OscConfig+0xb6>
 800358e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003592:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80035a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035a6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80035aa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80035b6:	4b97      	ldr	r3, [pc, #604]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035be:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80035c2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80035c6:	fa92 f2a2 	rbit	r2, r2
 80035ca:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80035ce:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80035d2:	fab2 f282 	clz	r2, r2
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f042 0220 	orr.w	r2, r2, #32
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f002 021f 	and.w	r2, r2, #31
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f202 	lsl.w	r2, r1, r2
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8114 	beq.w	8003818 <HAL_RCC_OscConfig+0x314>
 80035f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f040 810b 	bne.w	8003818 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f000 bf85 	b.w	8004512 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003618:	d106      	bne.n	8003628 <HAL_RCC_OscConfig+0x124>
 800361a:	4b7e      	ldr	r3, [pc, #504]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a7d      	ldr	r2, [pc, #500]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e036      	b.n	8003696 <HAL_RCC_OscConfig+0x192>
 8003628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x14e>
 8003638:	4b76      	ldr	r3, [pc, #472]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a75      	ldr	r2, [pc, #468]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b73      	ldr	r3, [pc, #460]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a72      	ldr	r2, [pc, #456]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	e021      	b.n	8003696 <HAL_RCC_OscConfig+0x192>
 8003652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003656:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003662:	d10c      	bne.n	800367e <HAL_RCC_OscConfig+0x17a>
 8003664:	4b6b      	ldr	r3, [pc, #428]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6a      	ldr	r2, [pc, #424]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 800366a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b68      	ldr	r3, [pc, #416]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a67      	ldr	r2, [pc, #412]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e00b      	b.n	8003696 <HAL_RCC_OscConfig+0x192>
 800367e:	4b65      	ldr	r3, [pc, #404]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a64      	ldr	r2, [pc, #400]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b62      	ldr	r3, [pc, #392]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a61      	ldr	r2, [pc, #388]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003690:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003694:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003696:	4b5f      	ldr	r3, [pc, #380]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	f023 020f 	bic.w	r2, r3, #15
 800369e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	495a      	ldr	r1, [pc, #360]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d054      	beq.n	800376a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe fe1a 	bl	80022f8 <HAL_GetTick>
 80036c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ca:	f7fe fe15 	bl	80022f8 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	@ 0x64
 80036d8:	d902      	bls.n	80036e0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	f000 bf19 	b.w	8004512 <HAL_RCC_OscConfig+0x100e>
 80036e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036e4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80036f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003700:	d802      	bhi.n	8003708 <HAL_RCC_OscConfig+0x204>
 8003702:	4b44      	ldr	r3, [pc, #272]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	e015      	b.n	8003734 <HAL_RCC_OscConfig+0x230>
 8003708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800370c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800371c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003720:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003724:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003730:	4b38      	ldr	r3, [pc, #224]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003738:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800373c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003740:	fa92 f2a2 	rbit	r2, r2
 8003744:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003748:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f042 0220 	orr.w	r2, r2, #32
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	f002 021f 	and.w	r2, r2, #31
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f202 	lsl.w	r2, r1, r2
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0b0      	beq.n	80036ca <HAL_RCC_OscConfig+0x1c6>
 8003768:	e057      	b.n	800381a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376a:	f7fe fdc5 	bl	80022f8 <HAL_GetTick>
 800376e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003772:	e00a      	b.n	800378a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003774:	f7fe fdc0 	bl	80022f8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b64      	cmp	r3, #100	@ 0x64
 8003782:	d902      	bls.n	800378a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	f000 bec4 	b.w	8004512 <HAL_RCC_OscConfig+0x100e>
 800378a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800378e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800379e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a2:	fab3 f383 	clz	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80037aa:	d802      	bhi.n	80037b2 <HAL_RCC_OscConfig+0x2ae>
 80037ac:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	e015      	b.n	80037de <HAL_RCC_OscConfig+0x2da>
 80037b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037b6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80037c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037ca:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80037ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80037da:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <HAL_RCC_OscConfig+0x310>)
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037e2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80037e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80037ea:	fa92 f2a2 	rbit	r2, r2
 80037ee:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80037f2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80037f6:	fab2 f282 	clz	r2, r2
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	f042 0220 	orr.w	r2, r2, #32
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	f002 021f 	and.w	r2, r2, #31
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f202 	lsl.w	r2, r1, r2
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1b0      	bne.n	8003774 <HAL_RCC_OscConfig+0x270>
 8003812:	e002      	b.n	800381a <HAL_RCC_OscConfig+0x316>
 8003814:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 816c 	beq.w	8003b08 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003830:	4bcc      	ldr	r3, [pc, #816]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800383c:	4bc9      	ldr	r3, [pc, #804]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d16d      	bne.n	8003924 <HAL_RCC_OscConfig+0x420>
 8003848:	4bc6      	ldr	r3, [pc, #792]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d167      	bne.n	8003924 <HAL_RCC_OscConfig+0x420>
 8003854:	2302      	movs	r3, #2
 8003856:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003866:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b3f      	cmp	r3, #63	@ 0x3f
 8003872:	d802      	bhi.n	800387a <HAL_RCC_OscConfig+0x376>
 8003874:	4bbb      	ldr	r3, [pc, #748]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	e013      	b.n	80038a2 <HAL_RCC_OscConfig+0x39e>
 800387a:	2302      	movs	r3, #2
 800387c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800388c:	2302      	movs	r3, #2
 800388e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003892:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800389e:	4bb1      	ldr	r3, [pc, #708]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	2202      	movs	r2, #2
 80038a4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80038a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80038ac:	fa92 f2a2 	rbit	r2, r2
 80038b0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80038b4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80038b8:	fab2 f282 	clz	r2, r2
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f042 0220 	orr.w	r2, r2, #32
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f002 021f 	and.w	r2, r2, #31
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCC_OscConfig+0x3e6>
 80038d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d002      	beq.n	80038ea <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f000 be14 	b.w	8004512 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ea:	4b9e      	ldr	r3, [pc, #632]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	21f8      	movs	r1, #248	@ 0xf8
 8003900:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003908:	fa91 f1a1 	rbit	r1, r1
 800390c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003910:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003914:	fab1 f181 	clz	r1, r1
 8003918:	b2c9      	uxtb	r1, r1
 800391a:	408b      	lsls	r3, r1
 800391c:	4991      	ldr	r1, [pc, #580]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	e0f1      	b.n	8003b08 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003928:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8083 	beq.w	8003a3c <HAL_RCC_OscConfig+0x538>
 8003936:	2301      	movs	r3, #1
 8003938:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003940:	fa93 f3a3 	rbit	r3, r3
 8003944:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003948:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800394c:	fab3 f383 	clz	r3, r3
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003956:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	461a      	mov	r2, r3
 800395e:	2301      	movs	r3, #1
 8003960:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7fe fcc9 	bl	80022f8 <HAL_GetTick>
 8003966:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396c:	f7fe fcc4 	bl	80022f8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d902      	bls.n	8003982 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	f000 bdc8 	b.w	8004512 <HAL_RCC_OscConfig+0x100e>
 8003982:	2302      	movs	r3, #2
 8003984:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003994:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b3f      	cmp	r3, #63	@ 0x3f
 80039a0:	d802      	bhi.n	80039a8 <HAL_RCC_OscConfig+0x4a4>
 80039a2:	4b70      	ldr	r3, [pc, #448]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	e013      	b.n	80039d0 <HAL_RCC_OscConfig+0x4cc>
 80039a8:	2302      	movs	r3, #2
 80039aa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80039ba:	2302      	movs	r3, #2
 80039bc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80039c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80039cc:	4b65      	ldr	r3, [pc, #404]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	2202      	movs	r2, #2
 80039d2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80039d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80039da:	fa92 f2a2 	rbit	r2, r2
 80039de:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80039e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80039e6:	fab2 f282 	clz	r2, r2
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f042 0220 	orr.w	r2, r2, #32
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	f002 021f 	and.w	r2, r2, #31
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0b4      	beq.n	800396c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a02:	4b58      	ldr	r3, [pc, #352]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	21f8      	movs	r1, #248	@ 0xf8
 8003a18:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003a20:	fa91 f1a1 	rbit	r1, r1
 8003a24:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003a28:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003a2c:	fab1 f181 	clz	r1, r1
 8003a30:	b2c9      	uxtb	r1, r1
 8003a32:	408b      	lsls	r3, r1
 8003a34:	494b      	ldr	r1, [pc, #300]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
 8003a3a:	e065      	b.n	8003b08 <HAL_RCC_OscConfig+0x604>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003a4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	461a      	mov	r2, r3
 8003a64:	2300      	movs	r3, #0
 8003a66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fc46 	bl	80022f8 <HAL_GetTick>
 8003a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe fc41 	bl	80022f8 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d902      	bls.n	8003a88 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	f000 bd45 	b.w	8004512 <HAL_RCC_OscConfig+0x100e>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	fab3 f383 	clz	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b3f      	cmp	r3, #63	@ 0x3f
 8003aa6:	d802      	bhi.n	8003aae <HAL_RCC_OscConfig+0x5aa>
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	e013      	b.n	8003ad6 <HAL_RCC_OscConfig+0x5d2>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003ac6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003ad2:	4b24      	ldr	r3, [pc, #144]	@ (8003b64 <HAL_RCC_OscConfig+0x660>)
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003adc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003ae0:	fa92 f2a2 	rbit	r2, r2
 8003ae4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003ae8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003aec:	fab2 f282 	clz	r2, r2
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	f042 0220 	orr.w	r2, r2, #32
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	f002 021f 	and.w	r2, r2, #31
 8003afc:	2101      	movs	r1, #1
 8003afe:	fa01 f202 	lsl.w	r2, r1, r2
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1b4      	bne.n	8003a72 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8115 	beq.w	8003d48 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d07e      	beq.n	8003c2c <HAL_RCC_OscConfig+0x728>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <HAL_RCC_OscConfig+0x664>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	461a      	mov	r2, r3
 8003b54:	2301      	movs	r3, #1
 8003b56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b58:	f7fe fbce 	bl	80022f8 <HAL_GetTick>
 8003b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b60:	e00f      	b.n	8003b82 <HAL_RCC_OscConfig+0x67e>
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fe fbc4 	bl	80022f8 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d902      	bls.n	8003b82 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	f000 bcc8 	b.w	8004512 <HAL_RCC_OscConfig+0x100e>
 8003b82:	2302      	movs	r3, #2
 8003b84:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b98:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	fa93 f2a3 	rbit	r2, r3
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	fa93 f2a3 	rbit	r2, r3
 8003bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003bda:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bdc:	4bb0      	ldr	r3, [pc, #704]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003bde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003be8:	2102      	movs	r1, #2
 8003bea:	6019      	str	r1, [r3, #0]
 8003bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	fa93 f1a3 	rbit	r1, r3
 8003bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c02:	6019      	str	r1, [r3, #0]
  return result;
 8003c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c08:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2101      	movs	r1, #1
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0a0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x668>
 8003c2a:	e08d      	b.n	8003d48 <HAL_RCC_OscConfig+0x844>
 8003c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c30:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c34:	2201      	movs	r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	fa93 f2a3 	rbit	r2, r3
 8003c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003c4e:	601a      	str	r2, [r3, #0]
  return result;
 8003c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c54:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003c58:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b90      	ldr	r3, [pc, #576]	@ (8003ea4 <HAL_RCC_OscConfig+0x9a0>)
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6e:	f7fe fb43 	bl	80022f8 <HAL_GetTick>
 8003c72:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c78:	f7fe fb3e 	bl	80022f8 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d902      	bls.n	8003c8e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	f000 bc42 	b.w	8004512 <HAL_RCC_OscConfig+0x100e>
 8003c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c92:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003c96:	2202      	movs	r2, #2
 8003c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	fa93 f2a3 	rbit	r2, r3
 8003ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003cba:	2202      	movs	r2, #2
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	fa93 f2a3 	rbit	r2, r3
 8003ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cda:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003cde:	2202      	movs	r2, #2
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	fa93 f2a3 	rbit	r2, r3
 8003cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003cf8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfa:	4b69      	ldr	r3, [pc, #420]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003cfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d02:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d06:	2102      	movs	r1, #2
 8003d08:	6019      	str	r1, [r3, #0]
 8003d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d0e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	fa93 f1a3 	rbit	r1, r3
 8003d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d20:	6019      	str	r1, [r3, #0]
  return result;
 8003d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d26:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d197      	bne.n	8003c78 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 819e 	beq.w	800409a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d64:	4b4e      	ldr	r3, [pc, #312]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d116      	bne.n	8003d9e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d7a:	61d3      	str	r3, [r2, #28]
 8003d7c:	4b48      	ldr	r3, [pc, #288]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d88:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d92:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003d96:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9e:	4b42      	ldr	r3, [pc, #264]	@ (8003ea8 <HAL_RCC_OscConfig+0x9a4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11a      	bne.n	8003de0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003daa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ea8 <HAL_RCC_OscConfig+0x9a4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a3e      	ldr	r2, [pc, #248]	@ (8003ea8 <HAL_RCC_OscConfig+0x9a4>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db6:	f7fe fa9f 	bl	80022f8 <HAL_GetTick>
 8003dba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	e009      	b.n	8003dd4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc0:	f7fe fa9a 	bl	80022f8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b64      	cmp	r3, #100	@ 0x64
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e39e      	b.n	8004512 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	4b34      	ldr	r3, [pc, #208]	@ (8003ea8 <HAL_RCC_OscConfig+0x9a4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ef      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x8fa>
 8003df0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6213      	str	r3, [r2, #32]
 8003dfc:	e035      	b.n	8003e6a <HAL_RCC_OscConfig+0x966>
 8003dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x924>
 8003e0e:	4b24      	ldr	r3, [pc, #144]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4a23      	ldr	r2, [pc, #140]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6213      	str	r3, [r2, #32]
 8003e1a:	4b21      	ldr	r3, [pc, #132]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	6213      	str	r3, [r2, #32]
 8003e26:	e020      	b.n	8003e6a <HAL_RCC_OscConfig+0x966>
 8003e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d10c      	bne.n	8003e52 <HAL_RCC_OscConfig+0x94e>
 8003e38:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4a18      	ldr	r2, [pc, #96]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e3e:	f043 0304 	orr.w	r3, r3, #4
 8003e42:	6213      	str	r3, [r2, #32]
 8003e44:	4b16      	ldr	r3, [pc, #88]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	4a15      	ldr	r2, [pc, #84]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6213      	str	r3, [r2, #32]
 8003e50:	e00b      	b.n	8003e6a <HAL_RCC_OscConfig+0x966>
 8003e52:	4b13      	ldr	r3, [pc, #76]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	4a12      	ldr	r2, [pc, #72]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6213      	str	r3, [r2, #32]
 8003e5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea0 <HAL_RCC_OscConfig+0x99c>)
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8087 	beq.w	8003f8a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7c:	f7fe fa3c 	bl	80022f8 <HAL_GetTick>
 8003e80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e84:	e012      	b.n	8003eac <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fe fa37 	bl	80022f8 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d908      	bls.n	8003eac <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e339      	b.n	8004512 <HAL_RCC_OscConfig+0x100e>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	10908120 	.word	0x10908120
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ebc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	fa93 f2a3 	rbit	r2, r3
 8003ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003ed8:	2202      	movs	r2, #2
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	fa93 f2a3 	rbit	r2, r3
 8003eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003ef2:	601a      	str	r2, [r3, #0]
  return result;
 8003ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003efc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_RCC_OscConfig+0xa10>
 8003f0e:	4b98      	ldr	r3, [pc, #608]	@ (8004170 <HAL_RCC_OscConfig+0xc6c>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	e013      	b.n	8003f3c <HAL_RCC_OscConfig+0xa38>
 8003f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f18:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f24:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	fa93 f2a3 	rbit	r2, r3
 8003f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f32:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	4b8d      	ldr	r3, [pc, #564]	@ (8004170 <HAL_RCC_OscConfig+0xc6c>)
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f40:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003f44:	2102      	movs	r1, #2
 8003f46:	6011      	str	r1, [r2, #0]
 8003f48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f4c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	fa92 f1a2 	rbit	r1, r2
 8003f56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f5a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003f5e:	6011      	str	r1, [r2, #0]
  return result;
 8003f60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f64:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	fab2 f282 	clz	r2, r2
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	f002 021f 	and.w	r2, r2, #31
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f43f af7f 	beq.w	8003e86 <HAL_RCC_OscConfig+0x982>
 8003f88:	e07d      	b.n	8004086 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe f9b5 	bl	80022f8 <HAL_GetTick>
 8003f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f94:	f7fe f9b0 	bl	80022f8 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e2b2      	b.n	8004512 <HAL_RCC_OscConfig+0x100e>
 8003fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fbc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	fa93 f2a3 	rbit	r2, r3
 8003fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fca:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003fd8:	2202      	movs	r2, #2
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	fa93 f2a3 	rbit	r2, r3
 8003fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ff2:	601a      	str	r2, [r3, #0]
  return result;
 8003ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ffc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d102      	bne.n	8004014 <HAL_RCC_OscConfig+0xb10>
 800400e:	4b58      	ldr	r3, [pc, #352]	@ (8004170 <HAL_RCC_OscConfig+0xc6c>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	e013      	b.n	800403c <HAL_RCC_OscConfig+0xb38>
 8004014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004018:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800401c:	2202      	movs	r2, #2
 800401e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004024:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	fa93 f2a3 	rbit	r2, r3
 800402e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004032:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	4b4d      	ldr	r3, [pc, #308]	@ (8004170 <HAL_RCC_OscConfig+0xc6c>)
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004040:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004044:	2102      	movs	r1, #2
 8004046:	6011      	str	r1, [r2, #0]
 8004048:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800404c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	fa92 f1a2 	rbit	r1, r2
 8004056:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800405a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800405e:	6011      	str	r1, [r2, #0]
  return result;
 8004060:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004064:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	fab2 f282 	clz	r2, r2
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	f002 021f 	and.w	r2, r2, #31
 800407a:	2101      	movs	r1, #1
 800407c:	fa01 f202 	lsl.w	r2, r1, r2
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d186      	bne.n	8003f94 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004086:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800408a:	2b01      	cmp	r3, #1
 800408c:	d105      	bne.n	800409a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408e:	4b38      	ldr	r3, [pc, #224]	@ (8004170 <HAL_RCC_OscConfig+0xc6c>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	4a37      	ldr	r2, [pc, #220]	@ (8004170 <HAL_RCC_OscConfig+0xc6c>)
 8004094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004098:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800409a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8232 	beq.w	8004510 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ac:	4b30      	ldr	r3, [pc, #192]	@ (8004170 <HAL_RCC_OscConfig+0xc6c>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	f000 8201 	beq.w	80044bc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	f040 8157 	bne.w	800437a <HAL_RCC_OscConfig+0xe76>
 80040cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80040d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040de:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	fa93 f2a3 	rbit	r2, r3
 80040e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80040f0:	601a      	str	r2, [r3, #0]
  return result;
 80040f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80040fa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	fab3 f383 	clz	r3, r3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004106:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	461a      	mov	r2, r3
 800410e:	2300      	movs	r3, #0
 8004110:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fe f8f1 	bl	80022f8 <HAL_GetTick>
 8004116:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411a:	e009      	b.n	8004130 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411c:	f7fe f8ec 	bl	80022f8 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e1f0      	b.n	8004512 <HAL_RCC_OscConfig+0x100e>
 8004130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004134:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004138:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800413c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004142:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	fa93 f2a3 	rbit	r2, r3
 800414c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004150:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004154:	601a      	str	r2, [r3, #0]
  return result;
 8004156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800415e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004160:	fab3 f383 	clz	r3, r3
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b3f      	cmp	r3, #63	@ 0x3f
 8004168:	d804      	bhi.n	8004174 <HAL_RCC_OscConfig+0xc70>
 800416a:	4b01      	ldr	r3, [pc, #4]	@ (8004170 <HAL_RCC_OscConfig+0xc6c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	e029      	b.n	80041c4 <HAL_RCC_OscConfig+0xcc0>
 8004170:	40021000 	.word	0x40021000
 8004174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004178:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800417c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004186:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	fa93 f2a3 	rbit	r2, r3
 8004190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004194:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80041a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	fa93 f2a3 	rbit	r2, r3
 80041b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ba:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	4bc3      	ldr	r3, [pc, #780]	@ (80044d0 <HAL_RCC_OscConfig+0xfcc>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041c8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80041cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80041d0:	6011      	str	r1, [r2, #0]
 80041d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041d6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	fa92 f1a2 	rbit	r1, r2
 80041e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041e4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80041e8:	6011      	str	r1, [r2, #0]
  return result;
 80041ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041ee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	fab2 f282 	clz	r2, r2
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	f042 0220 	orr.w	r2, r2, #32
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	f002 021f 	and.w	r2, r2, #31
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f202 	lsl.w	r2, r1, r2
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d185      	bne.n	800411c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004210:	4baf      	ldr	r3, [pc, #700]	@ (80044d0 <HAL_RCC_OscConfig+0xfcc>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	430b      	orrs	r3, r1
 8004232:	49a7      	ldr	r1, [pc, #668]	@ (80044d0 <HAL_RCC_OscConfig+0xfcc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004240:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800424a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	fa93 f2a3 	rbit	r2, r3
 8004254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004258:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800425c:	601a      	str	r2, [r3, #0]
  return result;
 800425e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004262:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004266:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004268:	fab3 f383 	clz	r3, r3
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004272:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	461a      	mov	r2, r3
 800427a:	2301      	movs	r3, #1
 800427c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fe f83b 	bl	80022f8 <HAL_GetTick>
 8004282:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004286:	e009      	b.n	800429c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004288:	f7fe f836 	bl	80022f8 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e13a      	b.n	8004512 <HAL_RCC_OscConfig+0x100e>
 800429c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80042a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	fa93 f2a3 	rbit	r2, r3
 80042b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042bc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80042c0:	601a      	str	r2, [r3, #0]
  return result;
 80042c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80042ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042cc:	fab3 f383 	clz	r3, r3
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80042d4:	d802      	bhi.n	80042dc <HAL_RCC_OscConfig+0xdd8>
 80042d6:	4b7e      	ldr	r3, [pc, #504]	@ (80044d0 <HAL_RCC_OscConfig+0xfcc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	e027      	b.n	800432c <HAL_RCC_OscConfig+0xe28>
 80042dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80042e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ee:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	fa93 f2a3 	rbit	r2, r3
 80042f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004306:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800430a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004314:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fa93 f2a3 	rbit	r2, r3
 800431e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004322:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	4b69      	ldr	r3, [pc, #420]	@ (80044d0 <HAL_RCC_OscConfig+0xfcc>)
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004330:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004334:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004338:	6011      	str	r1, [r2, #0]
 800433a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800433e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	fa92 f1a2 	rbit	r1, r2
 8004348:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800434c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004350:	6011      	str	r1, [r2, #0]
  return result;
 8004352:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004356:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	fab2 f282 	clz	r2, r2
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	f042 0220 	orr.w	r2, r2, #32
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	f002 021f 	and.w	r2, r2, #31
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f202 	lsl.w	r2, r1, r2
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d087      	beq.n	8004288 <HAL_RCC_OscConfig+0xd84>
 8004378:	e0ca      	b.n	8004510 <HAL_RCC_OscConfig+0x100c>
 800437a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004382:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800438c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	fa93 f2a3 	rbit	r2, r3
 8004396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800439e:	601a      	str	r2, [r3, #0]
  return result;
 80043a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80043a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	461a      	mov	r2, r3
 80043bc:	2300      	movs	r3, #0
 80043be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fd ff9a 	bl	80022f8 <HAL_GetTick>
 80043c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c8:	e009      	b.n	80043de <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ca:	f7fd ff95 	bl	80022f8 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e099      	b.n	8004512 <HAL_RCC_OscConfig+0x100e>
 80043de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80043e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	fa93 f2a3 	rbit	r2, r3
 80043fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004402:	601a      	str	r2, [r3, #0]
  return result;
 8004404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004408:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800440c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b3f      	cmp	r3, #63	@ 0x3f
 8004416:	d802      	bhi.n	800441e <HAL_RCC_OscConfig+0xf1a>
 8004418:	4b2d      	ldr	r3, [pc, #180]	@ (80044d0 <HAL_RCC_OscConfig+0xfcc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	e027      	b.n	800446e <HAL_RCC_OscConfig+0xf6a>
 800441e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004422:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004426:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800442a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004430:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	fa93 f2a3 	rbit	r2, r3
 800443a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004448:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800444c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004456:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	fa93 f2a3 	rbit	r2, r3
 8004460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004464:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	4b19      	ldr	r3, [pc, #100]	@ (80044d0 <HAL_RCC_OscConfig+0xfcc>)
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004472:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004476:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800447a:	6011      	str	r1, [r2, #0]
 800447c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004480:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	fa92 f1a2 	rbit	r1, r2
 800448a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800448e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004492:	6011      	str	r1, [r2, #0]
  return result;
 8004494:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004498:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	fab2 f282 	clz	r2, r2
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	f042 0220 	orr.w	r2, r2, #32
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	f002 021f 	and.w	r2, r2, #31
 80044ae:	2101      	movs	r1, #1
 80044b0:	fa01 f202 	lsl.w	r2, r1, r2
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d187      	bne.n	80043ca <HAL_RCC_OscConfig+0xec6>
 80044ba:	e029      	b.n	8004510 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d103      	bne.n	80044d4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e020      	b.n	8004512 <HAL_RCC_OscConfig+0x100e>
 80044d0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044d4:	4b11      	ldr	r3, [pc, #68]	@ (800451c <HAL_RCC_OscConfig+0x1018>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80044e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d10b      	bne.n	800450c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80044f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80044f8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80044fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004500:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40021000 	.word	0x40021000

08004520 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b09e      	sub	sp, #120	@ 0x78
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e154      	b.n	80047e2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004538:	4b89      	ldr	r3, [pc, #548]	@ (8004760 <HAL_RCC_ClockConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d910      	bls.n	8004568 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b86      	ldr	r3, [pc, #536]	@ (8004760 <HAL_RCC_ClockConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 0207 	bic.w	r2, r3, #7
 800454e:	4984      	ldr	r1, [pc, #528]	@ (8004760 <HAL_RCC_ClockConfig+0x240>)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b82      	ldr	r3, [pc, #520]	@ (8004760 <HAL_RCC_ClockConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e13c      	b.n	80047e2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004574:	4b7b      	ldr	r3, [pc, #492]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4978      	ldr	r1, [pc, #480]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 8004582:	4313      	orrs	r3, r2
 8004584:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80cd 	beq.w	800472e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d137      	bne.n	800460c <HAL_RCC_ClockConfig+0xec>
 800459c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80045aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ac:	fab3 f383 	clz	r3, r3
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80045b4:	d802      	bhi.n	80045bc <HAL_RCC_ClockConfig+0x9c>
 80045b6:	4b6b      	ldr	r3, [pc, #428]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	e00f      	b.n	80045dc <HAL_RCC_ClockConfig+0xbc>
 80045bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80045d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045d8:	4b62      	ldr	r3, [pc, #392]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80045e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045e4:	fa92 f2a2 	rbit	r2, r2
 80045e8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80045ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045ec:	fab2 f282 	clz	r2, r2
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	f042 0220 	orr.w	r2, r2, #32
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	f002 021f 	and.w	r2, r2, #31
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d171      	bne.n	80046ec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0ea      	b.n	80047e2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d137      	bne.n	8004684 <HAL_RCC_ClockConfig+0x164>
 8004614:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004618:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b3f      	cmp	r3, #63	@ 0x3f
 800462c:	d802      	bhi.n	8004634 <HAL_RCC_ClockConfig+0x114>
 800462e:	4b4d      	ldr	r3, [pc, #308]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	e00f      	b.n	8004654 <HAL_RCC_ClockConfig+0x134>
 8004634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004638:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800463c:	fa93 f3a3 	rbit	r3, r3
 8004640:	647b      	str	r3, [r7, #68]	@ 0x44
 8004642:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004646:	643b      	str	r3, [r7, #64]	@ 0x40
 8004648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800464a:	fa93 f3a3 	rbit	r3, r3
 800464e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004650:	4b44      	ldr	r3, [pc, #272]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004658:	63ba      	str	r2, [r7, #56]	@ 0x38
 800465a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800465c:	fa92 f2a2 	rbit	r2, r2
 8004660:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004662:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004664:	fab2 f282 	clz	r2, r2
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	f042 0220 	orr.w	r2, r2, #32
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	f002 021f 	and.w	r2, r2, #31
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f202 	lsl.w	r2, r1, r2
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d135      	bne.n	80046ec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0ae      	b.n	80047e2 <HAL_RCC_ClockConfig+0x2c2>
 8004684:	2302      	movs	r3, #2
 8004686:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b3f      	cmp	r3, #63	@ 0x3f
 800469a:	d802      	bhi.n	80046a2 <HAL_RCC_ClockConfig+0x182>
 800469c:	4b31      	ldr	r3, [pc, #196]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	e00d      	b.n	80046be <HAL_RCC_ClockConfig+0x19e>
 80046a2:	2302      	movs	r3, #2
 80046a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ae:	2302      	movs	r3, #2
 80046b0:	623b      	str	r3, [r7, #32]
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	2202      	movs	r2, #2
 80046c0:	61ba      	str	r2, [r7, #24]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	fa92 f2a2 	rbit	r2, r2
 80046c8:	617a      	str	r2, [r7, #20]
  return result;
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	fab2 f282 	clz	r2, r2
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	f042 0220 	orr.w	r2, r2, #32
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	f002 021f 	and.w	r2, r2, #31
 80046dc:	2101      	movs	r1, #1
 80046de:	fa01 f202 	lsl.w	r2, r1, r2
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e07a      	b.n	80047e2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f023 0203 	bic.w	r2, r3, #3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	491a      	ldr	r1, [pc, #104]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046fe:	f7fd fdfb 	bl	80022f8 <HAL_GetTick>
 8004702:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004704:	e00a      	b.n	800471c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004706:	f7fd fdf7 	bl	80022f8 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e062      	b.n	80047e2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471c:	4b11      	ldr	r3, [pc, #68]	@ (8004764 <HAL_RCC_ClockConfig+0x244>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 020c 	and.w	r2, r3, #12
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	429a      	cmp	r2, r3
 800472c:	d1eb      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800472e:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <HAL_RCC_ClockConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d215      	bcs.n	8004768 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473c:	4b08      	ldr	r3, [pc, #32]	@ (8004760 <HAL_RCC_ClockConfig+0x240>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 0207 	bic.w	r2, r3, #7
 8004744:	4906      	ldr	r1, [pc, #24]	@ (8004760 <HAL_RCC_ClockConfig+0x240>)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	4313      	orrs	r3, r2
 800474a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474c:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <HAL_RCC_ClockConfig+0x240>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d006      	beq.n	8004768 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e041      	b.n	80047e2 <HAL_RCC_ClockConfig+0x2c2>
 800475e:	bf00      	nop
 8004760:	40022000 	.word	0x40022000
 8004764:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004774:	4b1d      	ldr	r3, [pc, #116]	@ (80047ec <HAL_RCC_ClockConfig+0x2cc>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	491a      	ldr	r1, [pc, #104]	@ (80047ec <HAL_RCC_ClockConfig+0x2cc>)
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004792:	4b16      	ldr	r3, [pc, #88]	@ (80047ec <HAL_RCC_ClockConfig+0x2cc>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4912      	ldr	r1, [pc, #72]	@ (80047ec <HAL_RCC_ClockConfig+0x2cc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047a6:	f000 f829 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 80047aa:	4601      	mov	r1, r0
 80047ac:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <HAL_RCC_ClockConfig+0x2cc>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047b4:	22f0      	movs	r2, #240	@ 0xf0
 80047b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	fa92 f2a2 	rbit	r2, r2
 80047be:	60fa      	str	r2, [r7, #12]
  return result;
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	fab2 f282 	clz	r2, r2
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	40d3      	lsrs	r3, r2
 80047ca:	4a09      	ldr	r2, [pc, #36]	@ (80047f0 <HAL_RCC_ClockConfig+0x2d0>)
 80047cc:	5cd3      	ldrb	r3, [r2, r3]
 80047ce:	fa21 f303 	lsr.w	r3, r1, r3
 80047d2:	4a08      	ldr	r2, [pc, #32]	@ (80047f4 <HAL_RCC_ClockConfig+0x2d4>)
 80047d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80047d6:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <HAL_RCC_ClockConfig+0x2d8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd fd48 	bl	8002270 <HAL_InitTick>
  
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3778      	adds	r7, #120	@ 0x78
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	08007b98 	.word	0x08007b98
 80047f4:	20000000 	.word	0x20000000
 80047f8:	20000670 	.word	0x20000670

080047fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004816:	4b1e      	ldr	r3, [pc, #120]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x94>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b04      	cmp	r3, #4
 8004824:	d002      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0x30>
 8004826:	2b08      	cmp	r3, #8
 8004828:	d003      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x36>
 800482a:	e026      	b.n	800487a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800482c:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x98>)
 800482e:	613b      	str	r3, [r7, #16]
      break;
 8004830:	e026      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	0c9b      	lsrs	r3, r3, #18
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	4a17      	ldr	r2, [pc, #92]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x9c>)
 800483c:	5cd3      	ldrb	r3, [r2, r3]
 800483e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004840:	4b13      	ldr	r3, [pc, #76]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x94>)
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	4a14      	ldr	r2, [pc, #80]	@ (800489c <HAL_RCC_GetSysClockFreq+0xa0>)
 800484a:	5cd3      	ldrb	r3, [r2, r3]
 800484c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004858:	4a0e      	ldr	r2, [pc, #56]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x98>)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e004      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a0c      	ldr	r2, [pc, #48]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	613b      	str	r3, [r7, #16]
      break;
 8004878:	e002      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x98>)
 800487c:	613b      	str	r3, [r7, #16]
      break;
 800487e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004880:	693b      	ldr	r3, [r7, #16]
}
 8004882:	4618      	mov	r0, r3
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	007a1200 	.word	0x007a1200
 8004898:	08007bb0 	.word	0x08007bb0
 800489c:	08007bc0 	.word	0x08007bc0
 80048a0:	003d0900 	.word	0x003d0900

080048a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a8:	4b03      	ldr	r3, [pc, #12]	@ (80048b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048aa:	681b      	ldr	r3, [r3, #0]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000000 	.word	0x20000000

080048bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80048c2:	f7ff ffef 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 80048c6:	4601      	mov	r1, r0
 80048c8:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048d0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80048d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	fa92 f2a2 	rbit	r2, r2
 80048dc:	603a      	str	r2, [r7, #0]
  return result;
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	fab2 f282 	clz	r2, r2
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	40d3      	lsrs	r3, r2
 80048e8:	4a04      	ldr	r2, [pc, #16]	@ (80048fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80048ea:	5cd3      	ldrb	r3, [r2, r3]
 80048ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40021000 	.word	0x40021000
 80048fc:	08007ba8 	.word	0x08007ba8

08004900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004906:	f7ff ffcd 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 800490a:	4601      	mov	r1, r0
 800490c:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004914:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004918:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	fa92 f2a2 	rbit	r2, r2
 8004920:	603a      	str	r2, [r7, #0]
  return result;
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	fab2 f282 	clz	r2, r2
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	40d3      	lsrs	r3, r2
 800492c:	4a04      	ldr	r2, [pc, #16]	@ (8004940 <HAL_RCC_GetPCLK2Freq+0x40>)
 800492e:	5cd3      	ldrb	r3, [r2, r3]
 8004930:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000
 8004940:	08007ba8 	.word	0x08007ba8

08004944 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b092      	sub	sp, #72	@ 0x48
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004954:	2300      	movs	r3, #0
 8004956:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80d2 	beq.w	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004968:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10e      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004974:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	4a49      	ldr	r2, [pc, #292]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800497a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800497e:	61d3      	str	r3, [r2, #28]
 8004980:	4b47      	ldr	r3, [pc, #284]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498c:	2301      	movs	r3, #1
 800498e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004992:	4b44      	ldr	r3, [pc, #272]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d118      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800499e:	4b41      	ldr	r3, [pc, #260]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a40      	ldr	r2, [pc, #256]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049aa:	f7fd fca5 	bl	80022f8 <HAL_GetTick>
 80049ae:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b0:	e008      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b2:	f7fd fca1 	bl	80022f8 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b64      	cmp	r3, #100	@ 0x64
 80049be:	d901      	bls.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e167      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c4:	4b37      	ldr	r3, [pc, #220]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0f0      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049d0:	4b33      	ldr	r3, [pc, #204]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8082 	beq.w	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d07a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049f0:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a0a:	fab3 f383 	clz	r3, r3
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	4b25      	ldr	r3, [pc, #148]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a26:	fa93 f3a3 	rbit	r3, r3
 8004a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a2e:	fab3 f383 	clz	r3, r3
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2300      	movs	r3, #0
 8004a40:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a42:	4a17      	ldr	r2, [pc, #92]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a46:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d049      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a52:	f7fd fc51 	bl	80022f8 <HAL_GetTick>
 8004a56:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a58:	e00a      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5a:	f7fd fc4d 	bl	80022f8 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e111      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004a70:	2302      	movs	r3, #2
 8004a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	623b      	str	r3, [r7, #32]
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	61fb      	str	r3, [r7, #28]
  return result;
 8004a88:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d108      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004a9a:	4b01      	ldr	r3, [pc, #4]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	e00d      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	10908100 	.word	0x10908100
 8004aac:	2302      	movs	r3, #2
 8004aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	fa93 f3a3 	rbit	r3, r3
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	4b78      	ldr	r3, [pc, #480]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	2202      	movs	r2, #2
 8004abe:	613a      	str	r2, [r7, #16]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	fa92 f2a2 	rbit	r2, r2
 8004ac6:	60fa      	str	r2, [r7, #12]
  return result;
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	fab2 f282 	clz	r2, r2
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	f002 021f 	and.w	r2, r2, #31
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0b9      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	496a      	ldr	r1, [pc, #424]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004af8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d105      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b00:	4b66      	ldr	r3, [pc, #408]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	4a65      	ldr	r2, [pc, #404]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b18:	4b60      	ldr	r3, [pc, #384]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1c:	f023 0203 	bic.w	r2, r3, #3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	495d      	ldr	r1, [pc, #372]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b36:	4b59      	ldr	r3, [pc, #356]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	4956      	ldr	r1, [pc, #344]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b54:	4b51      	ldr	r3, [pc, #324]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	494e      	ldr	r1, [pc, #312]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b72:	4b4a      	ldr	r3, [pc, #296]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	f023 0210 	bic.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	4947      	ldr	r1, [pc, #284]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004b90:	4b42      	ldr	r3, [pc, #264]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	493f      	ldr	r1, [pc, #252]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d008      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bae:	4b3b      	ldr	r3, [pc, #236]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	f023 0220 	bic.w	r2, r3, #32
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	4938      	ldr	r1, [pc, #224]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bcc:	4b33      	ldr	r3, [pc, #204]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	4930      	ldr	r1, [pc, #192]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bea:	4b2c      	ldr	r3, [pc, #176]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	4929      	ldr	r1, [pc, #164]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c08:	4b24      	ldr	r3, [pc, #144]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	4921      	ldr	r1, [pc, #132]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c26:	4b1d      	ldr	r3, [pc, #116]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	491a      	ldr	r1, [pc, #104]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004c44:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c50:	4912      	ldr	r1, [pc, #72]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c62:	4b0e      	ldr	r3, [pc, #56]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6e:	490b      	ldr	r1, [pc, #44]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004c80:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c84:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8c:	4903      	ldr	r1, [pc, #12]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3748      	adds	r7, #72	@ 0x48
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021000 	.word	0x40021000

08004ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e09d      	b.n	8004dee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d108      	bne.n	8004ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cc2:	d009      	beq.n	8004cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	61da      	str	r2, [r3, #28]
 8004cca:	e005      	b.n	8004cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc fe1c 	bl	8001930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d18:	d902      	bls.n	8004d20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e002      	b.n	8004d26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d2e:	d007      	beq.n	8004d40 <HAL_SPI_Init+0xa0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d38:	d002      	beq.n	8004d40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	ea42 0103 	orr.w	r1, r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	0c1b      	lsrs	r3, r3, #16
 8004d9c:	f003 0204 	and.w	r2, r3, #4
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004dbc:	ea42 0103 	orr.w	r1, r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	@ 0x28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e04:	2301      	movs	r3, #1
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x26>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e20a      	b.n	8005232 <HAL_SPI_TransmitReceive+0x43c>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e24:	f7fd fa68 	bl	80022f8 <HAL_GetTick>
 8004e28:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e30:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e38:	887b      	ldrh	r3, [r7, #2]
 8004e3a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004e3c:	887b      	ldrh	r3, [r7, #2]
 8004e3e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e40:	7efb      	ldrb	r3, [r7, #27]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d00e      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x6e>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e4c:	d106      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x66>
 8004e56:	7efb      	ldrb	r3, [r7, #27]
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d003      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004e62:	e1e0      	b.n	8005226 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_SPI_TransmitReceive+0x80>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <HAL_SPI_TransmitReceive+0x80>
 8004e70:	887b      	ldrh	r3, [r7, #2]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004e7c:	e1d3      	b.n	8005226 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d003      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2205      	movs	r2, #5
 8004e8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	887a      	ldrh	r2, [r7, #2]
 8004ea2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	887a      	ldrh	r2, [r7, #2]
 8004eaa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	887a      	ldrh	r2, [r7, #2]
 8004eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	887a      	ldrh	r2, [r7, #2]
 8004ebe:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ed4:	d802      	bhi.n	8004edc <HAL_SPI_TransmitReceive+0xe6>
 8004ed6:	8a3b      	ldrh	r3, [r7, #16]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d908      	bls.n	8004eee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004eea:	605a      	str	r2, [r3, #4]
 8004eec:	e007      	b.n	8004efe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004efc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f08:	2b40      	cmp	r3, #64	@ 0x40
 8004f0a:	d007      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f24:	f240 8081 	bls.w	800502a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_SPI_TransmitReceive+0x140>
 8004f30:	8a7b      	ldrh	r3, [r7, #18]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d16d      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f46:	1c9a      	adds	r2, r3, #2
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5a:	e05a      	b.n	8005012 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d11b      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x1ac>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d016      	beq.n	8004fa2 <HAL_SPI_TransmitReceive+0x1ac>
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d113      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	1c9a      	adds	r2, r3, #2
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d11c      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x1f4>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d016      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	b292      	uxth	r2, r2
 8004fc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	1c9a      	adds	r2, r3, #2
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fea:	f7fd f985 	bl	80022f8 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d80b      	bhi.n	8005012 <HAL_SPI_TransmitReceive+0x21c>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d007      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005010:	e109      	b.n	8005226 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d19f      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x166>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d199      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x166>
 8005028:	e0e3      	b.n	80051f2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_SPI_TransmitReceive+0x244>
 8005032:	8a7b      	ldrh	r3, [r7, #18]
 8005034:	2b01      	cmp	r3, #1
 8005036:	f040 80cf 	bne.w	80051d8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d912      	bls.n	800506a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	881a      	ldrh	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	1c9a      	adds	r2, r3, #2
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b02      	subs	r3, #2
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005068:	e0b6      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005090:	e0a2      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b02      	cmp	r3, #2
 800509e:	d134      	bne.n	800510a <HAL_SPI_TransmitReceive+0x314>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d02f      	beq.n	800510a <HAL_SPI_TransmitReceive+0x314>
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d12c      	bne.n	800510a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d912      	bls.n	80050e0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050be:	881a      	ldrh	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ca:	1c9a      	adds	r2, r3, #2
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b02      	subs	r3, #2
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050de:	e012      	b.n	8005106 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	7812      	ldrb	r2, [r2, #0]
 80050ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d148      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x3b4>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d042      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d923      	bls.n	8005178 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	b292      	uxth	r2, r2
 800513c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	1c9a      	adds	r2, r3, #2
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b02      	subs	r3, #2
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	d81f      	bhi.n	80051a6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	e016      	b.n	80051a6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f103 020c 	add.w	r2, r3, #12
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	7812      	ldrb	r2, [r2, #0]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051a6:	2301      	movs	r3, #1
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051aa:	f7fd f8a5 	bl	80022f8 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d803      	bhi.n	80051c2 <HAL_SPI_TransmitReceive+0x3cc>
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d102      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x3d2>
 80051c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80051d6:	e026      	b.n	8005226 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f47f af57 	bne.w	8005092 <HAL_SPI_TransmitReceive+0x29c>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f47f af50 	bne.w	8005092 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f93e 	bl	8005478 <SPI_EndRxTxTransaction>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800521c:	e003      	b.n	8005226 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800522e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005232:	4618      	mov	r0, r3
 8005234:	3728      	adds	r7, #40	@ 0x28
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800524c:	f7fd f854 	bl	80022f8 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	4413      	add	r3, r2
 800525a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800525c:	f7fd f84c 	bl	80022f8 <HAL_GetTick>
 8005260:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005262:	4b39      	ldr	r3, [pc, #228]	@ (8005348 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	015b      	lsls	r3, r3, #5
 8005268:	0d1b      	lsrs	r3, r3, #20
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005272:	e054      	b.n	800531e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d050      	beq.n	800531e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800527c:	f7fd f83c 	bl	80022f8 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	429a      	cmp	r2, r3
 800528a:	d902      	bls.n	8005292 <SPI_WaitFlagStateUntilTimeout+0x56>
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d13d      	bne.n	800530e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052aa:	d111      	bne.n	80052d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b4:	d004      	beq.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052be:	d107      	bne.n	80052d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052d8:	d10f      	bne.n	80052fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e017      	b.n	800533e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3b01      	subs	r3, #1
 800531c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4013      	ands	r3, r2
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	429a      	cmp	r2, r3
 800532c:	bf0c      	ite	eq
 800532e:	2301      	moveq	r3, #1
 8005330:	2300      	movne	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	429a      	cmp	r2, r3
 800533a:	d19b      	bne.n	8005274 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000000 	.word	0x20000000

0800534c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	@ 0x28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800535e:	f7fc ffcb 	bl	80022f8 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	4413      	add	r3, r2
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800536e:	f7fc ffc3 	bl	80022f8 <HAL_GetTick>
 8005372:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800537c:	4b3d      	ldr	r3, [pc, #244]	@ (8005474 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	00da      	lsls	r2, r3, #3
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	0d1b      	lsrs	r3, r3, #20
 800538c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800538e:	fb02 f303 	mul.w	r3, r2, r3
 8005392:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005394:	e060      	b.n	8005458 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800539c:	d107      	bne.n	80053ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d050      	beq.n	8005458 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053b6:	f7fc ff9f 	bl	80022f8 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d902      	bls.n	80053cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d13d      	bne.n	8005448 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053e4:	d111      	bne.n	800540a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ee:	d004      	beq.n	80053fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f8:	d107      	bne.n	800540a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005408:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005412:	d10f      	bne.n	8005434 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005432:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e010      	b.n	800546a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	3b01      	subs	r3, #1
 8005456:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d196      	bne.n	8005396 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3728      	adds	r7, #40	@ 0x28
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000000 	.word	0x20000000

08005478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff ff5b 	bl	800534c <SPI_WaitFifoStateUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e027      	b.n	80054fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	2180      	movs	r1, #128	@ 0x80
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7ff fec0 	bl	800523c <SPI_WaitFlagStateUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e014      	b.n	80054fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2200      	movs	r2, #0
 80054da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff ff34 	bl	800534c <SPI_WaitFifoStateUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ee:	f043 0220 	orr.w	r2, r3, #32
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e000      	b.n	80054fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e049      	b.n	80055aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc fa42 	bl	80019b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f000 fdc4 	bl	80060d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d001      	beq.n	80055cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e042      	b.n	8005652 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a21      	ldr	r2, [pc, #132]	@ (8005660 <HAL_TIM_Base_Start+0xac>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d018      	beq.n	8005610 <HAL_TIM_Base_Start+0x5c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e6:	d013      	beq.n	8005610 <HAL_TIM_Base_Start+0x5c>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005664 <HAL_TIM_Base_Start+0xb0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00e      	beq.n	8005610 <HAL_TIM_Base_Start+0x5c>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005668 <HAL_TIM_Base_Start+0xb4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d009      	beq.n	8005610 <HAL_TIM_Base_Start+0x5c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1a      	ldr	r2, [pc, #104]	@ (800566c <HAL_TIM_Base_Start+0xb8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d004      	beq.n	8005610 <HAL_TIM_Base_Start+0x5c>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a19      	ldr	r2, [pc, #100]	@ (8005670 <HAL_TIM_Base_Start+0xbc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d115      	bne.n	800563c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	4b17      	ldr	r3, [pc, #92]	@ (8005674 <HAL_TIM_Base_Start+0xc0>)
 8005618:	4013      	ands	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b06      	cmp	r3, #6
 8005620:	d015      	beq.n	800564e <HAL_TIM_Base_Start+0x9a>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005628:	d011      	beq.n	800564e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0201 	orr.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563a:	e008      	b.n	800564e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	e000      	b.n	8005650 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40013400 	.word	0x40013400
 8005670:	40014000 	.word	0x40014000
 8005674:	00010007 	.word	0x00010007

08005678 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e049      	b.n	800571e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fc f9a8 	bl	80019f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f000 fd0a 	bl	80060d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <HAL_TIM_IC_Start_IT+0x1e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005742:	b2db      	uxtb	r3, r3
 8005744:	e023      	b.n	800578e <HAL_TIM_IC_Start_IT+0x66>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b04      	cmp	r3, #4
 800574a:	d104      	bne.n	8005756 <HAL_TIM_IC_Start_IT+0x2e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005752:	b2db      	uxtb	r3, r3
 8005754:	e01b      	b.n	800578e <HAL_TIM_IC_Start_IT+0x66>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b08      	cmp	r3, #8
 800575a:	d104      	bne.n	8005766 <HAL_TIM_IC_Start_IT+0x3e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005762:	b2db      	uxtb	r3, r3
 8005764:	e013      	b.n	800578e <HAL_TIM_IC_Start_IT+0x66>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b0c      	cmp	r3, #12
 800576a:	d104      	bne.n	8005776 <HAL_TIM_IC_Start_IT+0x4e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005772:	b2db      	uxtb	r3, r3
 8005774:	e00b      	b.n	800578e <HAL_TIM_IC_Start_IT+0x66>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b10      	cmp	r3, #16
 800577a:	d104      	bne.n	8005786 <HAL_TIM_IC_Start_IT+0x5e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005782:	b2db      	uxtb	r3, r3
 8005784:	e003      	b.n	800578e <HAL_TIM_IC_Start_IT+0x66>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800578c:	b2db      	uxtb	r3, r3
 800578e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d104      	bne.n	80057a0 <HAL_TIM_IC_Start_IT+0x78>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800579c:	b2db      	uxtb	r3, r3
 800579e:	e013      	b.n	80057c8 <HAL_TIM_IC_Start_IT+0xa0>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d104      	bne.n	80057b0 <HAL_TIM_IC_Start_IT+0x88>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	e00b      	b.n	80057c8 <HAL_TIM_IC_Start_IT+0xa0>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d104      	bne.n	80057c0 <HAL_TIM_IC_Start_IT+0x98>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e003      	b.n	80057c8 <HAL_TIM_IC_Start_IT+0xa0>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ca:	7bbb      	ldrb	r3, [r7, #14]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d102      	bne.n	80057d6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80057d0:	7b7b      	ldrb	r3, [r7, #13]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d001      	beq.n	80057da <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e0d8      	b.n	800598c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <HAL_TIM_IC_Start_IT+0xc2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e8:	e023      	b.n	8005832 <HAL_TIM_IC_Start_IT+0x10a>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d104      	bne.n	80057fa <HAL_TIM_IC_Start_IT+0xd2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057f8:	e01b      	b.n	8005832 <HAL_TIM_IC_Start_IT+0x10a>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d104      	bne.n	800580a <HAL_TIM_IC_Start_IT+0xe2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005808:	e013      	b.n	8005832 <HAL_TIM_IC_Start_IT+0x10a>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b0c      	cmp	r3, #12
 800580e:	d104      	bne.n	800581a <HAL_TIM_IC_Start_IT+0xf2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005818:	e00b      	b.n	8005832 <HAL_TIM_IC_Start_IT+0x10a>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b10      	cmp	r3, #16
 800581e:	d104      	bne.n	800582a <HAL_TIM_IC_Start_IT+0x102>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005828:	e003      	b.n	8005832 <HAL_TIM_IC_Start_IT+0x10a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <HAL_TIM_IC_Start_IT+0x11a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005840:	e013      	b.n	800586a <HAL_TIM_IC_Start_IT+0x142>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b04      	cmp	r3, #4
 8005846:	d104      	bne.n	8005852 <HAL_TIM_IC_Start_IT+0x12a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005850:	e00b      	b.n	800586a <HAL_TIM_IC_Start_IT+0x142>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d104      	bne.n	8005862 <HAL_TIM_IC_Start_IT+0x13a>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005860:	e003      	b.n	800586a <HAL_TIM_IC_Start_IT+0x142>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b0c      	cmp	r3, #12
 800586e:	d841      	bhi.n	80058f4 <HAL_TIM_IC_Start_IT+0x1cc>
 8005870:	a201      	add	r2, pc, #4	@ (adr r2, 8005878 <HAL_TIM_IC_Start_IT+0x150>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058ad 	.word	0x080058ad
 800587c:	080058f5 	.word	0x080058f5
 8005880:	080058f5 	.word	0x080058f5
 8005884:	080058f5 	.word	0x080058f5
 8005888:	080058bf 	.word	0x080058bf
 800588c:	080058f5 	.word	0x080058f5
 8005890:	080058f5 	.word	0x080058f5
 8005894:	080058f5 	.word	0x080058f5
 8005898:	080058d1 	.word	0x080058d1
 800589c:	080058f5 	.word	0x080058f5
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	080058e3 	.word	0x080058e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0202 	orr.w	r2, r2, #2
 80058ba:	60da      	str	r2, [r3, #12]
      break;
 80058bc:	e01d      	b.n	80058fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0204 	orr.w	r2, r2, #4
 80058cc:	60da      	str	r2, [r3, #12]
      break;
 80058ce:	e014      	b.n	80058fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0208 	orr.w	r2, r2, #8
 80058de:	60da      	str	r2, [r3, #12]
      break;
 80058e0:	e00b      	b.n	80058fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0210 	orr.w	r2, r2, #16
 80058f0:	60da      	str	r2, [r3, #12]
      break;
 80058f2:	e002      	b.n	80058fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
      break;
 80058f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d144      	bne.n	800598a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2201      	movs	r2, #1
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fe35 	bl	8006578 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a20      	ldr	r2, [pc, #128]	@ (8005994 <HAL_TIM_IC_Start_IT+0x26c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d018      	beq.n	800594a <HAL_TIM_IC_Start_IT+0x222>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005920:	d013      	beq.n	800594a <HAL_TIM_IC_Start_IT+0x222>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1c      	ldr	r2, [pc, #112]	@ (8005998 <HAL_TIM_IC_Start_IT+0x270>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00e      	beq.n	800594a <HAL_TIM_IC_Start_IT+0x222>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1a      	ldr	r2, [pc, #104]	@ (800599c <HAL_TIM_IC_Start_IT+0x274>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d009      	beq.n	800594a <HAL_TIM_IC_Start_IT+0x222>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a19      	ldr	r2, [pc, #100]	@ (80059a0 <HAL_TIM_IC_Start_IT+0x278>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_TIM_IC_Start_IT+0x222>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a17      	ldr	r2, [pc, #92]	@ (80059a4 <HAL_TIM_IC_Start_IT+0x27c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d115      	bne.n	8005976 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	4b15      	ldr	r3, [pc, #84]	@ (80059a8 <HAL_TIM_IC_Start_IT+0x280>)
 8005952:	4013      	ands	r3, r2
 8005954:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b06      	cmp	r3, #6
 800595a:	d015      	beq.n	8005988 <HAL_TIM_IC_Start_IT+0x260>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005962:	d011      	beq.n	8005988 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005974:	e008      	b.n	8005988 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0201 	orr.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e000      	b.n	800598a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005988:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40013400 	.word	0x40013400
 80059a4:	40014000 	.word	0x40014000
 80059a8:	00010007 	.word	0x00010007

080059ac <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b0c      	cmp	r3, #12
 80059be:	d841      	bhi.n	8005a44 <HAL_TIM_IC_Stop_IT+0x98>
 80059c0:	a201      	add	r2, pc, #4	@ (adr r2, 80059c8 <HAL_TIM_IC_Stop_IT+0x1c>)
 80059c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c6:	bf00      	nop
 80059c8:	080059fd 	.word	0x080059fd
 80059cc:	08005a45 	.word	0x08005a45
 80059d0:	08005a45 	.word	0x08005a45
 80059d4:	08005a45 	.word	0x08005a45
 80059d8:	08005a0f 	.word	0x08005a0f
 80059dc:	08005a45 	.word	0x08005a45
 80059e0:	08005a45 	.word	0x08005a45
 80059e4:	08005a45 	.word	0x08005a45
 80059e8:	08005a21 	.word	0x08005a21
 80059ec:	08005a45 	.word	0x08005a45
 80059f0:	08005a45 	.word	0x08005a45
 80059f4:	08005a45 	.word	0x08005a45
 80059f8:	08005a33 	.word	0x08005a33
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0202 	bic.w	r2, r2, #2
 8005a0a:	60da      	str	r2, [r3, #12]
      break;
 8005a0c:	e01d      	b.n	8005a4a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0204 	bic.w	r2, r2, #4
 8005a1c:	60da      	str	r2, [r3, #12]
      break;
 8005a1e:	e014      	b.n	8005a4a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0208 	bic.w	r2, r2, #8
 8005a2e:	60da      	str	r2, [r3, #12]
      break;
 8005a30:	e00b      	b.n	8005a4a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0210 	bic.w	r2, r2, #16
 8005a40:	60da      	str	r2, [r3, #12]
      break;
 8005a42:	e002      	b.n	8005a4a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	73fb      	strb	r3, [r7, #15]
      break;
 8005a48:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d166      	bne.n	8005b1e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fd8d 	bl	8006578 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6a1a      	ldr	r2, [r3, #32]
 8005a64:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10f      	bne.n	8005a8e <HAL_TIM_IC_Stop_IT+0xe2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d107      	bne.n	8005a8e <HAL_TIM_IC_Stop_IT+0xe2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_IC_Stop_IT+0xf2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a9c:	e023      	b.n	8005ae6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_IC_Stop_IT+0x102>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aac:	e01b      	b.n	8005ae6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_IC_Stop_IT+0x112>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005abc:	e013      	b.n	8005ae6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b0c      	cmp	r3, #12
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_IC_Stop_IT+0x122>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005acc:	e00b      	b.n	8005ae6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d104      	bne.n	8005ade <HAL_TIM_IC_Stop_IT+0x132>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005adc:	e003      	b.n	8005ae6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_IC_Stop_IT+0x14a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af4:	e013      	b.n	8005b1e <HAL_TIM_IC_Stop_IT+0x172>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_IC_Stop_IT+0x15a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b04:	e00b      	b.n	8005b1e <HAL_TIM_IC_Stop_IT+0x172>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_IC_Stop_IT+0x16a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b14:	e003      	b.n	8005b1e <HAL_TIM_IC_Stop_IT+0x172>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d020      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01b      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0202 	mvn.w	r2, #2
 8005b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb fbb8 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8005b78:	e005      	b.n	8005b86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa8a 	bl	8006094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fa91 	bl	80060a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d020      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01b      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0204 	mvn.w	r2, #4
 8005ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb fb92 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fa64 	bl	8006094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fa6b 	bl	80060a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d020      	beq.n	8005c24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0208 	mvn.w	r2, #8
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb fb6c 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa3e 	bl	8006094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fa45 	bl	80060a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 0310 	and.w	r3, r3, #16
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d020      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01b      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0210 	mvn.w	r2, #16
 8005c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2208      	movs	r2, #8
 8005c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fb fb46 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa18 	bl	8006094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa1f 	bl	80060a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00c      	beq.n	8005c94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0201 	mvn.w	r2, #1
 8005c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f9f6 	bl	8006080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fd10 	bl	80066d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00c      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fd08 	bl	80066ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00c      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f9de 	bl	80060bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0220 	mvn.w	r2, #32
 8005d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fcd0 	bl	80066c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e088      	b.n	8005e5c <HAL_TIM_IC_ConfigChannel+0x130>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11b      	bne.n	8005d90 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d68:	f000 fa4e 	bl	8006208 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 020c 	bic.w	r2, r2, #12
 8005d7a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6999      	ldr	r1, [r3, #24]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	619a      	str	r2, [r3, #24]
 8005d8e:	e060      	b.n	8005e52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d11c      	bne.n	8005dd0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005da6:	f000 fac6 	bl	8006336 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005db8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6999      	ldr	r1, [r3, #24]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	021a      	lsls	r2, r3, #8
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	619a      	str	r2, [r3, #24]
 8005dce:	e040      	b.n	8005e52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d11b      	bne.n	8005e0e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005de6:	f000 fb13 	bl	8006410 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 020c 	bic.w	r2, r2, #12
 8005df8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69d9      	ldr	r1, [r3, #28]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	61da      	str	r2, [r3, #28]
 8005e0c:	e021      	b.n	8005e52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d11c      	bne.n	8005e4e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005e24:	f000 fb30 	bl	8006488 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e36:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69d9      	ldr	r1, [r3, #28]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	021a      	lsls	r2, r3, #8
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	61da      	str	r2, [r3, #28]
 8005e4c:	e001      	b.n	8005e52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_TIM_ConfigClockSource+0x1c>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e0b6      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x18a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ebc:	d03e      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0xd8>
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec2:	f200 8087 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eca:	f000 8086 	beq.w	8005fda <HAL_TIM_ConfigClockSource+0x176>
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed2:	d87f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ed4:	2b70      	cmp	r3, #112	@ 0x70
 8005ed6:	d01a      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0xaa>
 8005ed8:	2b70      	cmp	r3, #112	@ 0x70
 8005eda:	d87b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005edc:	2b60      	cmp	r3, #96	@ 0x60
 8005ede:	d050      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x11e>
 8005ee0:	2b60      	cmp	r3, #96	@ 0x60
 8005ee2:	d877      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ee4:	2b50      	cmp	r3, #80	@ 0x50
 8005ee6:	d03c      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0xfe>
 8005ee8:	2b50      	cmp	r3, #80	@ 0x50
 8005eea:	d873      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005eec:	2b40      	cmp	r3, #64	@ 0x40
 8005eee:	d058      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x13e>
 8005ef0:	2b40      	cmp	r3, #64	@ 0x40
 8005ef2:	d86f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ef4:	2b30      	cmp	r3, #48	@ 0x30
 8005ef6:	d064      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005ef8:	2b30      	cmp	r3, #48	@ 0x30
 8005efa:	d86b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d060      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d867      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d05c      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d05a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005f0c:	e062      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f1e:	f000 fb0b 	bl	8006538 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
      break;
 8005f3a:	e04f      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f4c:	f000 faf4 	bl	8006538 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f5e:	609a      	str	r2, [r3, #8]
      break;
 8005f60:	e03c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 f9b2 	bl	80062d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2150      	movs	r1, #80	@ 0x50
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fac1 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 8005f80:	e02c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 fa0e 	bl	80063b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2160      	movs	r1, #96	@ 0x60
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fab1 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e01c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f000 f992 	bl	80062d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2140      	movs	r1, #64	@ 0x40
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 faa1 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 8005fc0:	e00c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f000 fa98 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 8005fd2:	e003      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd8:	e000      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b0c      	cmp	r3, #12
 800600a:	d831      	bhi.n	8006070 <HAL_TIM_ReadCapturedValue+0x78>
 800600c:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <HAL_TIM_ReadCapturedValue+0x1c>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006049 	.word	0x08006049
 8006018:	08006071 	.word	0x08006071
 800601c:	08006071 	.word	0x08006071
 8006020:	08006071 	.word	0x08006071
 8006024:	08006053 	.word	0x08006053
 8006028:	08006071 	.word	0x08006071
 800602c:	08006071 	.word	0x08006071
 8006030:	08006071 	.word	0x08006071
 8006034:	0800605d 	.word	0x0800605d
 8006038:	08006071 	.word	0x08006071
 800603c:	08006071 	.word	0x08006071
 8006040:	08006071 	.word	0x08006071
 8006044:	08006067 	.word	0x08006067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800604e:	60fb      	str	r3, [r7, #12]

      break;
 8006050:	e00f      	b.n	8006072 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006058:	60fb      	str	r3, [r7, #12]

      break;
 800605a:	e00a      	b.n	8006072 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006062:	60fb      	str	r3, [r7, #12]

      break;
 8006064:	e005      	b.n	8006072 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	60fb      	str	r3, [r7, #12]

      break;
 800606e:	e000      	b.n	8006072 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006070:	bf00      	nop
  }

  return tmpreg;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a42      	ldr	r2, [pc, #264]	@ (80061ec <TIM_Base_SetConfig+0x11c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00f      	beq.n	8006108 <TIM_Base_SetConfig+0x38>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ee:	d00b      	beq.n	8006108 <TIM_Base_SetConfig+0x38>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a3f      	ldr	r2, [pc, #252]	@ (80061f0 <TIM_Base_SetConfig+0x120>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d007      	beq.n	8006108 <TIM_Base_SetConfig+0x38>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a3e      	ldr	r2, [pc, #248]	@ (80061f4 <TIM_Base_SetConfig+0x124>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_Base_SetConfig+0x38>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a3d      	ldr	r2, [pc, #244]	@ (80061f8 <TIM_Base_SetConfig+0x128>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a33      	ldr	r2, [pc, #204]	@ (80061ec <TIM_Base_SetConfig+0x11c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01b      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006128:	d017      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a30      	ldr	r2, [pc, #192]	@ (80061f0 <TIM_Base_SetConfig+0x120>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2f      	ldr	r2, [pc, #188]	@ (80061f4 <TIM_Base_SetConfig+0x124>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00f      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2e      	ldr	r2, [pc, #184]	@ (80061f8 <TIM_Base_SetConfig+0x128>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00b      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2d      	ldr	r2, [pc, #180]	@ (80061fc <TIM_Base_SetConfig+0x12c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d007      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2c      	ldr	r2, [pc, #176]	@ (8006200 <TIM_Base_SetConfig+0x130>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2b      	ldr	r2, [pc, #172]	@ (8006204 <TIM_Base_SetConfig+0x134>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d108      	bne.n	800616c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a16      	ldr	r2, [pc, #88]	@ (80061ec <TIM_Base_SetConfig+0x11c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00f      	beq.n	80061b8 <TIM_Base_SetConfig+0xe8>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a17      	ldr	r2, [pc, #92]	@ (80061f8 <TIM_Base_SetConfig+0x128>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00b      	beq.n	80061b8 <TIM_Base_SetConfig+0xe8>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a16      	ldr	r2, [pc, #88]	@ (80061fc <TIM_Base_SetConfig+0x12c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d007      	beq.n	80061b8 <TIM_Base_SetConfig+0xe8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a15      	ldr	r2, [pc, #84]	@ (8006200 <TIM_Base_SetConfig+0x130>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0xe8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a14      	ldr	r2, [pc, #80]	@ (8006204 <TIM_Base_SetConfig+0x134>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d103      	bne.n	80061c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d105      	bne.n	80061de <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f023 0201 	bic.w	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	611a      	str	r2, [r3, #16]
  }
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40013400 	.word	0x40013400
 80061fc:	40014000 	.word	0x40014000
 8006200:	40014400 	.word	0x40014400
 8006204:	40014800 	.word	0x40014800

08006208 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f023 0201 	bic.w	r2, r3, #1
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a24      	ldr	r2, [pc, #144]	@ (80062c4 <TIM_TI1_SetConfig+0xbc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <TIM_TI1_SetConfig+0x56>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800623c:	d00f      	beq.n	800625e <TIM_TI1_SetConfig+0x56>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4a21      	ldr	r2, [pc, #132]	@ (80062c8 <TIM_TI1_SetConfig+0xc0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00b      	beq.n	800625e <TIM_TI1_SetConfig+0x56>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4a20      	ldr	r2, [pc, #128]	@ (80062cc <TIM_TI1_SetConfig+0xc4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <TIM_TI1_SetConfig+0x56>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a1f      	ldr	r2, [pc, #124]	@ (80062d0 <TIM_TI1_SetConfig+0xc8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d003      	beq.n	800625e <TIM_TI1_SetConfig+0x56>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4a1e      	ldr	r2, [pc, #120]	@ (80062d4 <TIM_TI1_SetConfig+0xcc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d101      	bne.n	8006262 <TIM_TI1_SetConfig+0x5a>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <TIM_TI1_SetConfig+0x5c>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f023 0303 	bic.w	r3, r3, #3
 800626e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e003      	b.n	8006282 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	b2db      	uxtb	r3, r3
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f023 030a 	bic.w	r3, r3, #10
 800629c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f003 030a 	and.w	r3, r3, #10
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40012c00 	.word	0x40012c00
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40000800 	.word	0x40000800
 80062d0:	40013400 	.word	0x40013400
 80062d4:	40014000 	.word	0x40014000

080062d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0201 	bic.w	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 030a 	bic.w	r3, r3, #10
 8006314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006336:	b480      	push	{r7}
 8006338:	b087      	sub	sp, #28
 800633a:	af00      	add	r7, sp, #0
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0210 	bic.w	r2, r3, #16
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006374:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	031b      	lsls	r3, r3, #12
 800637a:	b29b      	uxth	r3, r3
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006388:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	621a      	str	r2, [r3, #32]
}
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f023 0210 	bic.w	r2, r3, #16
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	031b      	lsls	r3, r3, #12
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	621a      	str	r2, [r3, #32]
}
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f023 0303 	bic.w	r3, r3, #3
 800643c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800644c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	b2db      	uxtb	r3, r3
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006460:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	621a      	str	r2, [r3, #32]
}
 800647c:	bf00      	nop
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	021b      	lsls	r3, r3, #8
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064c6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	031b      	lsls	r3, r3, #12
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80064da:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	031b      	lsls	r3, r3, #12
 80064e0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	621a      	str	r2, [r3, #32]
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	f043 0307 	orr.w	r3, r3, #7
 8006524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	609a      	str	r2, [r3, #8]
}
 800652c:	bf00      	nop
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	021a      	lsls	r2, r3, #8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	431a      	orrs	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4313      	orrs	r3, r2
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	609a      	str	r2, [r3, #8]
}
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f003 031f 	and.w	r3, r3, #31
 800658a:	2201      	movs	r2, #1
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a1a      	ldr	r2, [r3, #32]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	43db      	mvns	r3, r3
 800659a:	401a      	ands	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a1a      	ldr	r2, [r3, #32]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f003 031f 	and.w	r3, r3, #31
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	fa01 f303 	lsl.w	r3, r1, r3
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
}
 80065b6:	bf00      	nop
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d8:	2302      	movs	r3, #2
 80065da:	e063      	b.n	80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a2b      	ldr	r2, [pc, #172]	@ (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a2a      	ldr	r2, [pc, #168]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d108      	bne.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006616:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006628:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1b      	ldr	r2, [pc, #108]	@ (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d018      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664e:	d013      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a18      	ldr	r2, [pc, #96]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00e      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a17      	ldr	r2, [pc, #92]	@ (80066bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d009      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a12      	ldr	r2, [pc, #72]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a13      	ldr	r2, [pc, #76]	@ (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d10c      	bne.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800667e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	4313      	orrs	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40013400 	.word	0x40013400
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40014000 	.word	0x40014000

080066c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e040      	b.n	8006794 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fb f9b0 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2224      	movs	r2, #36	@ 0x24
 800672c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0201 	bic.w	r2, r2, #1
 800673c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f9fc 	bl	8006b44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f825 	bl	800679c <UART_SetConfig>
 8006752:	4603      	mov	r3, r0
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e01b      	b.n	8006794 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800676a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800677a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fa7b 	bl	8006c88 <UART_CheckIdleState>
 8006792:	4603      	mov	r3, r0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80067ca:	f023 030c 	bic.w	r3, r3, #12
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6812      	ldr	r2, [r2, #0]
 80067d2:	6979      	ldr	r1, [r7, #20]
 80067d4:	430b      	orrs	r3, r1
 80067d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	430a      	orrs	r2, r1
 8006810:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4aa7      	ldr	r2, [pc, #668]	@ (8006ab4 <UART_SetConfig+0x318>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d120      	bne.n	800685e <UART_SetConfig+0xc2>
 800681c:	4ba6      	ldr	r3, [pc, #664]	@ (8006ab8 <UART_SetConfig+0x31c>)
 800681e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	2b03      	cmp	r3, #3
 8006826:	d817      	bhi.n	8006858 <UART_SetConfig+0xbc>
 8006828:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <UART_SetConfig+0x94>)
 800682a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682e:	bf00      	nop
 8006830:	08006841 	.word	0x08006841
 8006834:	0800684d 	.word	0x0800684d
 8006838:	08006853 	.word	0x08006853
 800683c:	08006847 	.word	0x08006847
 8006840:	2301      	movs	r3, #1
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	e0b5      	b.n	80069b2 <UART_SetConfig+0x216>
 8006846:	2302      	movs	r3, #2
 8006848:	77fb      	strb	r3, [r7, #31]
 800684a:	e0b2      	b.n	80069b2 <UART_SetConfig+0x216>
 800684c:	2304      	movs	r3, #4
 800684e:	77fb      	strb	r3, [r7, #31]
 8006850:	e0af      	b.n	80069b2 <UART_SetConfig+0x216>
 8006852:	2308      	movs	r3, #8
 8006854:	77fb      	strb	r3, [r7, #31]
 8006856:	e0ac      	b.n	80069b2 <UART_SetConfig+0x216>
 8006858:	2310      	movs	r3, #16
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e0a9      	b.n	80069b2 <UART_SetConfig+0x216>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a96      	ldr	r2, [pc, #600]	@ (8006abc <UART_SetConfig+0x320>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d124      	bne.n	80068b2 <UART_SetConfig+0x116>
 8006868:	4b93      	ldr	r3, [pc, #588]	@ (8006ab8 <UART_SetConfig+0x31c>)
 800686a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006870:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006874:	d011      	beq.n	800689a <UART_SetConfig+0xfe>
 8006876:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800687a:	d817      	bhi.n	80068ac <UART_SetConfig+0x110>
 800687c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006880:	d011      	beq.n	80068a6 <UART_SetConfig+0x10a>
 8006882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006886:	d811      	bhi.n	80068ac <UART_SetConfig+0x110>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <UART_SetConfig+0xf8>
 800688c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006890:	d006      	beq.n	80068a0 <UART_SetConfig+0x104>
 8006892:	e00b      	b.n	80068ac <UART_SetConfig+0x110>
 8006894:	2300      	movs	r3, #0
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e08b      	b.n	80069b2 <UART_SetConfig+0x216>
 800689a:	2302      	movs	r3, #2
 800689c:	77fb      	strb	r3, [r7, #31]
 800689e:	e088      	b.n	80069b2 <UART_SetConfig+0x216>
 80068a0:	2304      	movs	r3, #4
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e085      	b.n	80069b2 <UART_SetConfig+0x216>
 80068a6:	2308      	movs	r3, #8
 80068a8:	77fb      	strb	r3, [r7, #31]
 80068aa:	e082      	b.n	80069b2 <UART_SetConfig+0x216>
 80068ac:	2310      	movs	r3, #16
 80068ae:	77fb      	strb	r3, [r7, #31]
 80068b0:	e07f      	b.n	80069b2 <UART_SetConfig+0x216>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a82      	ldr	r2, [pc, #520]	@ (8006ac0 <UART_SetConfig+0x324>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d124      	bne.n	8006906 <UART_SetConfig+0x16a>
 80068bc:	4b7e      	ldr	r3, [pc, #504]	@ (8006ab8 <UART_SetConfig+0x31c>)
 80068be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80068c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80068c8:	d011      	beq.n	80068ee <UART_SetConfig+0x152>
 80068ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80068ce:	d817      	bhi.n	8006900 <UART_SetConfig+0x164>
 80068d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80068d4:	d011      	beq.n	80068fa <UART_SetConfig+0x15e>
 80068d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80068da:	d811      	bhi.n	8006900 <UART_SetConfig+0x164>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <UART_SetConfig+0x14c>
 80068e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068e4:	d006      	beq.n	80068f4 <UART_SetConfig+0x158>
 80068e6:	e00b      	b.n	8006900 <UART_SetConfig+0x164>
 80068e8:	2300      	movs	r3, #0
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e061      	b.n	80069b2 <UART_SetConfig+0x216>
 80068ee:	2302      	movs	r3, #2
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e05e      	b.n	80069b2 <UART_SetConfig+0x216>
 80068f4:	2304      	movs	r3, #4
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e05b      	b.n	80069b2 <UART_SetConfig+0x216>
 80068fa:	2308      	movs	r3, #8
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e058      	b.n	80069b2 <UART_SetConfig+0x216>
 8006900:	2310      	movs	r3, #16
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e055      	b.n	80069b2 <UART_SetConfig+0x216>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a6e      	ldr	r2, [pc, #440]	@ (8006ac4 <UART_SetConfig+0x328>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d124      	bne.n	800695a <UART_SetConfig+0x1be>
 8006910:	4b69      	ldr	r3, [pc, #420]	@ (8006ab8 <UART_SetConfig+0x31c>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006914:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006918:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800691c:	d011      	beq.n	8006942 <UART_SetConfig+0x1a6>
 800691e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006922:	d817      	bhi.n	8006954 <UART_SetConfig+0x1b8>
 8006924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006928:	d011      	beq.n	800694e <UART_SetConfig+0x1b2>
 800692a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800692e:	d811      	bhi.n	8006954 <UART_SetConfig+0x1b8>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <UART_SetConfig+0x1a0>
 8006934:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006938:	d006      	beq.n	8006948 <UART_SetConfig+0x1ac>
 800693a:	e00b      	b.n	8006954 <UART_SetConfig+0x1b8>
 800693c:	2300      	movs	r3, #0
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e037      	b.n	80069b2 <UART_SetConfig+0x216>
 8006942:	2302      	movs	r3, #2
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e034      	b.n	80069b2 <UART_SetConfig+0x216>
 8006948:	2304      	movs	r3, #4
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e031      	b.n	80069b2 <UART_SetConfig+0x216>
 800694e:	2308      	movs	r3, #8
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e02e      	b.n	80069b2 <UART_SetConfig+0x216>
 8006954:	2310      	movs	r3, #16
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e02b      	b.n	80069b2 <UART_SetConfig+0x216>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a5a      	ldr	r2, [pc, #360]	@ (8006ac8 <UART_SetConfig+0x32c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d124      	bne.n	80069ae <UART_SetConfig+0x212>
 8006964:	4b54      	ldr	r3, [pc, #336]	@ (8006ab8 <UART_SetConfig+0x31c>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006968:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800696c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006970:	d011      	beq.n	8006996 <UART_SetConfig+0x1fa>
 8006972:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006976:	d817      	bhi.n	80069a8 <UART_SetConfig+0x20c>
 8006978:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800697c:	d011      	beq.n	80069a2 <UART_SetConfig+0x206>
 800697e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006982:	d811      	bhi.n	80069a8 <UART_SetConfig+0x20c>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <UART_SetConfig+0x1f4>
 8006988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800698c:	d006      	beq.n	800699c <UART_SetConfig+0x200>
 800698e:	e00b      	b.n	80069a8 <UART_SetConfig+0x20c>
 8006990:	2300      	movs	r3, #0
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e00d      	b.n	80069b2 <UART_SetConfig+0x216>
 8006996:	2302      	movs	r3, #2
 8006998:	77fb      	strb	r3, [r7, #31]
 800699a:	e00a      	b.n	80069b2 <UART_SetConfig+0x216>
 800699c:	2304      	movs	r3, #4
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e007      	b.n	80069b2 <UART_SetConfig+0x216>
 80069a2:	2308      	movs	r3, #8
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e004      	b.n	80069b2 <UART_SetConfig+0x216>
 80069a8:	2310      	movs	r3, #16
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e001      	b.n	80069b2 <UART_SetConfig+0x216>
 80069ae:	2310      	movs	r3, #16
 80069b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ba:	d15b      	bne.n	8006a74 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80069bc:	7ffb      	ldrb	r3, [r7, #31]
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d827      	bhi.n	8006a12 <UART_SetConfig+0x276>
 80069c2:	a201      	add	r2, pc, #4	@ (adr r2, 80069c8 <UART_SetConfig+0x22c>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	08006a13 	.word	0x08006a13
 80069d8:	08006a03 	.word	0x08006a03
 80069dc:	08006a13 	.word	0x08006a13
 80069e0:	08006a13 	.word	0x08006a13
 80069e4:	08006a13 	.word	0x08006a13
 80069e8:	08006a0b 	.word	0x08006a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ec:	f7fd ff66 	bl	80048bc <HAL_RCC_GetPCLK1Freq>
 80069f0:	61b8      	str	r0, [r7, #24]
        break;
 80069f2:	e013      	b.n	8006a1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f4:	f7fd ff84 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 80069f8:	61b8      	str	r0, [r7, #24]
        break;
 80069fa:	e00f      	b.n	8006a1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069fc:	4b33      	ldr	r3, [pc, #204]	@ (8006acc <UART_SetConfig+0x330>)
 80069fe:	61bb      	str	r3, [r7, #24]
        break;
 8006a00:	e00c      	b.n	8006a1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a02:	f7fd fefb 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 8006a06:	61b8      	str	r0, [r7, #24]
        break;
 8006a08:	e008      	b.n	8006a1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a0e:	61bb      	str	r3, [r7, #24]
        break;
 8006a10:	e004      	b.n	8006a1c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	77bb      	strb	r3, [r7, #30]
        break;
 8006a1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 8082 	beq.w	8006b28 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	005a      	lsls	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	441a      	add	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b0f      	cmp	r3, #15
 8006a3e:	d916      	bls.n	8006a6e <UART_SetConfig+0x2d2>
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a46:	d212      	bcs.n	8006a6e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f023 030f 	bic.w	r3, r3, #15
 8006a50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	085b      	lsrs	r3, r3, #1
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	89fb      	ldrh	r3, [r7, #14]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	89fa      	ldrh	r2, [r7, #14]
 8006a6a:	60da      	str	r2, [r3, #12]
 8006a6c:	e05c      	b.n	8006b28 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	77bb      	strb	r3, [r7, #30]
 8006a72:	e059      	b.n	8006b28 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a74:	7ffb      	ldrb	r3, [r7, #31]
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d835      	bhi.n	8006ae6 <UART_SetConfig+0x34a>
 8006a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <UART_SetConfig+0x2e4>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006aa5 	.word	0x08006aa5
 8006a84:	08006aad 	.word	0x08006aad
 8006a88:	08006ad1 	.word	0x08006ad1
 8006a8c:	08006ae7 	.word	0x08006ae7
 8006a90:	08006ad7 	.word	0x08006ad7
 8006a94:	08006ae7 	.word	0x08006ae7
 8006a98:	08006ae7 	.word	0x08006ae7
 8006a9c:	08006ae7 	.word	0x08006ae7
 8006aa0:	08006adf 	.word	0x08006adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa4:	f7fd ff0a 	bl	80048bc <HAL_RCC_GetPCLK1Freq>
 8006aa8:	61b8      	str	r0, [r7, #24]
        break;
 8006aaa:	e021      	b.n	8006af0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aac:	f7fd ff28 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 8006ab0:	61b8      	str	r0, [r7, #24]
        break;
 8006ab2:	e01d      	b.n	8006af0 <UART_SetConfig+0x354>
 8006ab4:	40013800 	.word	0x40013800
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	40004400 	.word	0x40004400
 8006ac0:	40004800 	.word	0x40004800
 8006ac4:	40004c00 	.word	0x40004c00
 8006ac8:	40005000 	.word	0x40005000
 8006acc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b40 <UART_SetConfig+0x3a4>)
 8006ad2:	61bb      	str	r3, [r7, #24]
        break;
 8006ad4:	e00c      	b.n	8006af0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad6:	f7fd fe91 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 8006ada:	61b8      	str	r0, [r7, #24]
        break;
 8006adc:	e008      	b.n	8006af0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ae2:	61bb      	str	r3, [r7, #24]
        break;
 8006ae4:	e004      	b.n	8006af0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	77bb      	strb	r3, [r7, #30]
        break;
 8006aee:	bf00      	nop
    }

    if (pclk != 0U)
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d018      	beq.n	8006b28 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	085a      	lsrs	r2, r3, #1
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	441a      	add	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b0f      	cmp	r3, #15
 8006b0e:	d909      	bls.n	8006b24 <UART_SetConfig+0x388>
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b16:	d205      	bcs.n	8006b24 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60da      	str	r2, [r3, #12]
 8006b22:	e001      	b.n	8006b28 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b34:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	007a1200 	.word	0x007a1200

08006b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00a      	beq.n	8006b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00a      	beq.n	8006bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01a      	beq.n	8006c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c42:	d10a      	bne.n	8006c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	605a      	str	r2, [r3, #4]
  }
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b098      	sub	sp, #96	@ 0x60
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c98:	f7fb fb2e 	bl	80022f8 <HAL_GetTick>
 8006c9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d12e      	bne.n	8006d0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f88c 	bl	8006dd8 <UART_WaitOnFlagUntilTimeout>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d021      	beq.n	8006d0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e6      	bne.n	8006cc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e062      	b.n	8006dd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d149      	bne.n	8006dac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d20:	2200      	movs	r2, #0
 8006d22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f856 	bl	8006dd8 <UART_WaitOnFlagUntilTimeout>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d03c      	beq.n	8006dac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e6      	bne.n	8006d32 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d84:	61fa      	str	r2, [r7, #28]
 8006d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	69b9      	ldr	r1, [r7, #24]
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	617b      	str	r3, [r7, #20]
   return(result);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e011      	b.n	8006dd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3758      	adds	r7, #88	@ 0x58
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	4613      	mov	r3, r2
 8006de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de8:	e04f      	b.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d04b      	beq.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df2:	f7fb fa81 	bl	80022f8 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d302      	bcc.n	8006e08 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e04e      	b.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d037      	beq.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b80      	cmp	r3, #128	@ 0x80
 8006e1e:	d034      	beq.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b40      	cmp	r3, #64	@ 0x40
 8006e24:	d031      	beq.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d110      	bne.n	8006e56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2208      	movs	r2, #8
 8006e3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f838 	bl	8006eb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2208      	movs	r2, #8
 8006e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e029      	b.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e64:	d111      	bne.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 f81e 	bl	8006eb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e00f      	b.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4013      	ands	r3, r2
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	bf0c      	ite	eq
 8006e9a:	2301      	moveq	r3, #1
 8006e9c:	2300      	movne	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d0a0      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b095      	sub	sp, #84	@ 0x54
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ed8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ede:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e6      	bne.n	8006eba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	f023 0301 	bic.w	r3, r3, #1
 8006f02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e5      	bne.n	8006eec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d118      	bne.n	8006f5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f023 0310 	bic.w	r3, r3, #16
 8006f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f46:	61bb      	str	r3, [r7, #24]
 8006f48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6979      	ldr	r1, [r7, #20]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	613b      	str	r3, [r7, #16]
   return(result);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e6      	bne.n	8006f28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f6e:	bf00      	nop
 8006f70:	3754      	adds	r7, #84	@ 0x54
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f82:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006f86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	43db      	mvns	r3, r3
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	4013      	ands	r3, r2
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	1d3b      	adds	r3, r7, #4
 8006fba:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <sbrk_aligned>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	4e0f      	ldr	r6, [pc, #60]	@ (800702c <sbrk_aligned+0x40>)
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	6831      	ldr	r1, [r6, #0]
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	b911      	cbnz	r1, 8006ffe <sbrk_aligned+0x12>
 8006ff8:	f000 f908 	bl	800720c <_sbrk_r>
 8006ffc:	6030      	str	r0, [r6, #0]
 8006ffe:	4621      	mov	r1, r4
 8007000:	4628      	mov	r0, r5
 8007002:	f000 f903 	bl	800720c <_sbrk_r>
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	d103      	bne.n	8007012 <sbrk_aligned+0x26>
 800700a:	f04f 34ff 	mov.w	r4, #4294967295
 800700e:	4620      	mov	r0, r4
 8007010:	bd70      	pop	{r4, r5, r6, pc}
 8007012:	1cc4      	adds	r4, r0, #3
 8007014:	f024 0403 	bic.w	r4, r4, #3
 8007018:	42a0      	cmp	r0, r4
 800701a:	d0f8      	beq.n	800700e <sbrk_aligned+0x22>
 800701c:	1a21      	subs	r1, r4, r0
 800701e:	4628      	mov	r0, r5
 8007020:	f000 f8f4 	bl	800720c <_sbrk_r>
 8007024:	3001      	adds	r0, #1
 8007026:	d1f2      	bne.n	800700e <sbrk_aligned+0x22>
 8007028:	e7ef      	b.n	800700a <sbrk_aligned+0x1e>
 800702a:	bf00      	nop
 800702c:	20000ba8 	.word	0x20000ba8

08007030 <_malloc_r>:
 8007030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007034:	1ccd      	adds	r5, r1, #3
 8007036:	f025 0503 	bic.w	r5, r5, #3
 800703a:	3508      	adds	r5, #8
 800703c:	2d0c      	cmp	r5, #12
 800703e:	bf38      	it	cc
 8007040:	250c      	movcc	r5, #12
 8007042:	2d00      	cmp	r5, #0
 8007044:	4606      	mov	r6, r0
 8007046:	db01      	blt.n	800704c <_malloc_r+0x1c>
 8007048:	42a9      	cmp	r1, r5
 800704a:	d904      	bls.n	8007056 <_malloc_r+0x26>
 800704c:	230c      	movs	r3, #12
 800704e:	6033      	str	r3, [r6, #0]
 8007050:	2000      	movs	r0, #0
 8007052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800712c <_malloc_r+0xfc>
 800705a:	f000 f869 	bl	8007130 <__malloc_lock>
 800705e:	f8d8 3000 	ldr.w	r3, [r8]
 8007062:	461c      	mov	r4, r3
 8007064:	bb44      	cbnz	r4, 80070b8 <_malloc_r+0x88>
 8007066:	4629      	mov	r1, r5
 8007068:	4630      	mov	r0, r6
 800706a:	f7ff ffbf 	bl	8006fec <sbrk_aligned>
 800706e:	1c43      	adds	r3, r0, #1
 8007070:	4604      	mov	r4, r0
 8007072:	d158      	bne.n	8007126 <_malloc_r+0xf6>
 8007074:	f8d8 4000 	ldr.w	r4, [r8]
 8007078:	4627      	mov	r7, r4
 800707a:	2f00      	cmp	r7, #0
 800707c:	d143      	bne.n	8007106 <_malloc_r+0xd6>
 800707e:	2c00      	cmp	r4, #0
 8007080:	d04b      	beq.n	800711a <_malloc_r+0xea>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	4639      	mov	r1, r7
 8007086:	4630      	mov	r0, r6
 8007088:	eb04 0903 	add.w	r9, r4, r3
 800708c:	f000 f8be 	bl	800720c <_sbrk_r>
 8007090:	4581      	cmp	r9, r0
 8007092:	d142      	bne.n	800711a <_malloc_r+0xea>
 8007094:	6821      	ldr	r1, [r4, #0]
 8007096:	1a6d      	subs	r5, r5, r1
 8007098:	4629      	mov	r1, r5
 800709a:	4630      	mov	r0, r6
 800709c:	f7ff ffa6 	bl	8006fec <sbrk_aligned>
 80070a0:	3001      	adds	r0, #1
 80070a2:	d03a      	beq.n	800711a <_malloc_r+0xea>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	442b      	add	r3, r5
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	f8d8 3000 	ldr.w	r3, [r8]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	bb62      	cbnz	r2, 800710c <_malloc_r+0xdc>
 80070b2:	f8c8 7000 	str.w	r7, [r8]
 80070b6:	e00f      	b.n	80070d8 <_malloc_r+0xa8>
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	1b52      	subs	r2, r2, r5
 80070bc:	d420      	bmi.n	8007100 <_malloc_r+0xd0>
 80070be:	2a0b      	cmp	r2, #11
 80070c0:	d917      	bls.n	80070f2 <_malloc_r+0xc2>
 80070c2:	1961      	adds	r1, r4, r5
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	6025      	str	r5, [r4, #0]
 80070c8:	bf18      	it	ne
 80070ca:	6059      	strne	r1, [r3, #4]
 80070cc:	6863      	ldr	r3, [r4, #4]
 80070ce:	bf08      	it	eq
 80070d0:	f8c8 1000 	streq.w	r1, [r8]
 80070d4:	5162      	str	r2, [r4, r5]
 80070d6:	604b      	str	r3, [r1, #4]
 80070d8:	4630      	mov	r0, r6
 80070da:	f000 f82f 	bl	800713c <__malloc_unlock>
 80070de:	f104 000b 	add.w	r0, r4, #11
 80070e2:	1d23      	adds	r3, r4, #4
 80070e4:	f020 0007 	bic.w	r0, r0, #7
 80070e8:	1ac2      	subs	r2, r0, r3
 80070ea:	bf1c      	itt	ne
 80070ec:	1a1b      	subne	r3, r3, r0
 80070ee:	50a3      	strne	r3, [r4, r2]
 80070f0:	e7af      	b.n	8007052 <_malloc_r+0x22>
 80070f2:	6862      	ldr	r2, [r4, #4]
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	bf0c      	ite	eq
 80070f8:	f8c8 2000 	streq.w	r2, [r8]
 80070fc:	605a      	strne	r2, [r3, #4]
 80070fe:	e7eb      	b.n	80070d8 <_malloc_r+0xa8>
 8007100:	4623      	mov	r3, r4
 8007102:	6864      	ldr	r4, [r4, #4]
 8007104:	e7ae      	b.n	8007064 <_malloc_r+0x34>
 8007106:	463c      	mov	r4, r7
 8007108:	687f      	ldr	r7, [r7, #4]
 800710a:	e7b6      	b.n	800707a <_malloc_r+0x4a>
 800710c:	461a      	mov	r2, r3
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	42a3      	cmp	r3, r4
 8007112:	d1fb      	bne.n	800710c <_malloc_r+0xdc>
 8007114:	2300      	movs	r3, #0
 8007116:	6053      	str	r3, [r2, #4]
 8007118:	e7de      	b.n	80070d8 <_malloc_r+0xa8>
 800711a:	230c      	movs	r3, #12
 800711c:	6033      	str	r3, [r6, #0]
 800711e:	4630      	mov	r0, r6
 8007120:	f000 f80c 	bl	800713c <__malloc_unlock>
 8007124:	e794      	b.n	8007050 <_malloc_r+0x20>
 8007126:	6005      	str	r5, [r0, #0]
 8007128:	e7d6      	b.n	80070d8 <_malloc_r+0xa8>
 800712a:	bf00      	nop
 800712c:	20000bac 	.word	0x20000bac

08007130 <__malloc_lock>:
 8007130:	4801      	ldr	r0, [pc, #4]	@ (8007138 <__malloc_lock+0x8>)
 8007132:	f000 b8a5 	b.w	8007280 <__retarget_lock_acquire_recursive>
 8007136:	bf00      	nop
 8007138:	20000cec 	.word	0x20000cec

0800713c <__malloc_unlock>:
 800713c:	4801      	ldr	r0, [pc, #4]	@ (8007144 <__malloc_unlock+0x8>)
 800713e:	f000 b8a0 	b.w	8007282 <__retarget_lock_release_recursive>
 8007142:	bf00      	nop
 8007144:	20000cec 	.word	0x20000cec

08007148 <sniprintf>:
 8007148:	b40c      	push	{r2, r3}
 800714a:	b530      	push	{r4, r5, lr}
 800714c:	4b18      	ldr	r3, [pc, #96]	@ (80071b0 <sniprintf+0x68>)
 800714e:	1e0c      	subs	r4, r1, #0
 8007150:	681d      	ldr	r5, [r3, #0]
 8007152:	b09d      	sub	sp, #116	@ 0x74
 8007154:	da08      	bge.n	8007168 <sniprintf+0x20>
 8007156:	238b      	movs	r3, #139	@ 0x8b
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	b01d      	add	sp, #116	@ 0x74
 8007160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007164:	b002      	add	sp, #8
 8007166:	4770      	bx	lr
 8007168:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800716c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007176:	bf14      	ite	ne
 8007178:	f104 33ff 	addne.w	r3, r4, #4294967295
 800717c:	4623      	moveq	r3, r4
 800717e:	9304      	str	r3, [sp, #16]
 8007180:	9307      	str	r3, [sp, #28]
 8007182:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007186:	9002      	str	r0, [sp, #8]
 8007188:	9006      	str	r0, [sp, #24]
 800718a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800718e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007190:	ab21      	add	r3, sp, #132	@ 0x84
 8007192:	a902      	add	r1, sp, #8
 8007194:	4628      	mov	r0, r5
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	f000 f928 	bl	80073ec <_svfiprintf_r>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	bfbc      	itt	lt
 80071a0:	238b      	movlt	r3, #139	@ 0x8b
 80071a2:	602b      	strlt	r3, [r5, #0]
 80071a4:	2c00      	cmp	r4, #0
 80071a6:	d0da      	beq.n	800715e <sniprintf+0x16>
 80071a8:	9b02      	ldr	r3, [sp, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	e7d6      	b.n	800715e <sniprintf+0x16>
 80071b0:	20000678 	.word	0x20000678

080071b4 <memcmp>:
 80071b4:	b510      	push	{r4, lr}
 80071b6:	3901      	subs	r1, #1
 80071b8:	4402      	add	r2, r0
 80071ba:	4290      	cmp	r0, r2
 80071bc:	d101      	bne.n	80071c2 <memcmp+0xe>
 80071be:	2000      	movs	r0, #0
 80071c0:	e005      	b.n	80071ce <memcmp+0x1a>
 80071c2:	7803      	ldrb	r3, [r0, #0]
 80071c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d001      	beq.n	80071d0 <memcmp+0x1c>
 80071cc:	1b18      	subs	r0, r3, r4
 80071ce:	bd10      	pop	{r4, pc}
 80071d0:	3001      	adds	r0, #1
 80071d2:	e7f2      	b.n	80071ba <memcmp+0x6>

080071d4 <memset>:
 80071d4:	4402      	add	r2, r0
 80071d6:	4603      	mov	r3, r0
 80071d8:	4293      	cmp	r3, r2
 80071da:	d100      	bne.n	80071de <memset+0xa>
 80071dc:	4770      	bx	lr
 80071de:	f803 1b01 	strb.w	r1, [r3], #1
 80071e2:	e7f9      	b.n	80071d8 <memset+0x4>

080071e4 <strncpy>:
 80071e4:	b510      	push	{r4, lr}
 80071e6:	3901      	subs	r1, #1
 80071e8:	4603      	mov	r3, r0
 80071ea:	b132      	cbz	r2, 80071fa <strncpy+0x16>
 80071ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80071f0:	f803 4b01 	strb.w	r4, [r3], #1
 80071f4:	3a01      	subs	r2, #1
 80071f6:	2c00      	cmp	r4, #0
 80071f8:	d1f7      	bne.n	80071ea <strncpy+0x6>
 80071fa:	441a      	add	r2, r3
 80071fc:	2100      	movs	r1, #0
 80071fe:	4293      	cmp	r3, r2
 8007200:	d100      	bne.n	8007204 <strncpy+0x20>
 8007202:	bd10      	pop	{r4, pc}
 8007204:	f803 1b01 	strb.w	r1, [r3], #1
 8007208:	e7f9      	b.n	80071fe <strncpy+0x1a>
	...

0800720c <_sbrk_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4d06      	ldr	r5, [pc, #24]	@ (8007228 <_sbrk_r+0x1c>)
 8007210:	2300      	movs	r3, #0
 8007212:	4604      	mov	r4, r0
 8007214:	4608      	mov	r0, r1
 8007216:	602b      	str	r3, [r5, #0]
 8007218:	f7fa fcf8 	bl	8001c0c <_sbrk>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_sbrk_r+0x1a>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_sbrk_r+0x1a>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	20000ce8 	.word	0x20000ce8

0800722c <__errno>:
 800722c:	4b01      	ldr	r3, [pc, #4]	@ (8007234 <__errno+0x8>)
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000678 	.word	0x20000678

08007238 <__libc_init_array>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	4d0d      	ldr	r5, [pc, #52]	@ (8007270 <__libc_init_array+0x38>)
 800723c:	4c0d      	ldr	r4, [pc, #52]	@ (8007274 <__libc_init_array+0x3c>)
 800723e:	1b64      	subs	r4, r4, r5
 8007240:	10a4      	asrs	r4, r4, #2
 8007242:	2600      	movs	r6, #0
 8007244:	42a6      	cmp	r6, r4
 8007246:	d109      	bne.n	800725c <__libc_init_array+0x24>
 8007248:	4d0b      	ldr	r5, [pc, #44]	@ (8007278 <__libc_init_array+0x40>)
 800724a:	4c0c      	ldr	r4, [pc, #48]	@ (800727c <__libc_init_array+0x44>)
 800724c:	f000 fba6 	bl	800799c <_init>
 8007250:	1b64      	subs	r4, r4, r5
 8007252:	10a4      	asrs	r4, r4, #2
 8007254:	2600      	movs	r6, #0
 8007256:	42a6      	cmp	r6, r4
 8007258:	d105      	bne.n	8007266 <__libc_init_array+0x2e>
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007260:	4798      	blx	r3
 8007262:	3601      	adds	r6, #1
 8007264:	e7ee      	b.n	8007244 <__libc_init_array+0xc>
 8007266:	f855 3b04 	ldr.w	r3, [r5], #4
 800726a:	4798      	blx	r3
 800726c:	3601      	adds	r6, #1
 800726e:	e7f2      	b.n	8007256 <__libc_init_array+0x1e>
 8007270:	08007c0c 	.word	0x08007c0c
 8007274:	08007c0c 	.word	0x08007c0c
 8007278:	08007c0c 	.word	0x08007c0c
 800727c:	08007c10 	.word	0x08007c10

08007280 <__retarget_lock_acquire_recursive>:
 8007280:	4770      	bx	lr

08007282 <__retarget_lock_release_recursive>:
 8007282:	4770      	bx	lr

08007284 <memcpy>:
 8007284:	440a      	add	r2, r1
 8007286:	4291      	cmp	r1, r2
 8007288:	f100 33ff 	add.w	r3, r0, #4294967295
 800728c:	d100      	bne.n	8007290 <memcpy+0xc>
 800728e:	4770      	bx	lr
 8007290:	b510      	push	{r4, lr}
 8007292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800729a:	4291      	cmp	r1, r2
 800729c:	d1f9      	bne.n	8007292 <memcpy+0xe>
 800729e:	bd10      	pop	{r4, pc}

080072a0 <_free_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4605      	mov	r5, r0
 80072a4:	2900      	cmp	r1, #0
 80072a6:	d041      	beq.n	800732c <_free_r+0x8c>
 80072a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ac:	1f0c      	subs	r4, r1, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bfb8      	it	lt
 80072b2:	18e4      	addlt	r4, r4, r3
 80072b4:	f7ff ff3c 	bl	8007130 <__malloc_lock>
 80072b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007330 <_free_r+0x90>)
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	b933      	cbnz	r3, 80072cc <_free_r+0x2c>
 80072be:	6063      	str	r3, [r4, #4]
 80072c0:	6014      	str	r4, [r2, #0]
 80072c2:	4628      	mov	r0, r5
 80072c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072c8:	f7ff bf38 	b.w	800713c <__malloc_unlock>
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	d908      	bls.n	80072e2 <_free_r+0x42>
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	1821      	adds	r1, r4, r0
 80072d4:	428b      	cmp	r3, r1
 80072d6:	bf01      	itttt	eq
 80072d8:	6819      	ldreq	r1, [r3, #0]
 80072da:	685b      	ldreq	r3, [r3, #4]
 80072dc:	1809      	addeq	r1, r1, r0
 80072de:	6021      	streq	r1, [r4, #0]
 80072e0:	e7ed      	b.n	80072be <_free_r+0x1e>
 80072e2:	461a      	mov	r2, r3
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	b10b      	cbz	r3, 80072ec <_free_r+0x4c>
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d9fa      	bls.n	80072e2 <_free_r+0x42>
 80072ec:	6811      	ldr	r1, [r2, #0]
 80072ee:	1850      	adds	r0, r2, r1
 80072f0:	42a0      	cmp	r0, r4
 80072f2:	d10b      	bne.n	800730c <_free_r+0x6c>
 80072f4:	6820      	ldr	r0, [r4, #0]
 80072f6:	4401      	add	r1, r0
 80072f8:	1850      	adds	r0, r2, r1
 80072fa:	4283      	cmp	r3, r0
 80072fc:	6011      	str	r1, [r2, #0]
 80072fe:	d1e0      	bne.n	80072c2 <_free_r+0x22>
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	6053      	str	r3, [r2, #4]
 8007306:	4408      	add	r0, r1
 8007308:	6010      	str	r0, [r2, #0]
 800730a:	e7da      	b.n	80072c2 <_free_r+0x22>
 800730c:	d902      	bls.n	8007314 <_free_r+0x74>
 800730e:	230c      	movs	r3, #12
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	e7d6      	b.n	80072c2 <_free_r+0x22>
 8007314:	6820      	ldr	r0, [r4, #0]
 8007316:	1821      	adds	r1, r4, r0
 8007318:	428b      	cmp	r3, r1
 800731a:	bf04      	itt	eq
 800731c:	6819      	ldreq	r1, [r3, #0]
 800731e:	685b      	ldreq	r3, [r3, #4]
 8007320:	6063      	str	r3, [r4, #4]
 8007322:	bf04      	itt	eq
 8007324:	1809      	addeq	r1, r1, r0
 8007326:	6021      	streq	r1, [r4, #0]
 8007328:	6054      	str	r4, [r2, #4]
 800732a:	e7ca      	b.n	80072c2 <_free_r+0x22>
 800732c:	bd38      	pop	{r3, r4, r5, pc}
 800732e:	bf00      	nop
 8007330:	20000bac 	.word	0x20000bac

08007334 <__ssputs_r>:
 8007334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007338:	688e      	ldr	r6, [r1, #8]
 800733a:	461f      	mov	r7, r3
 800733c:	42be      	cmp	r6, r7
 800733e:	680b      	ldr	r3, [r1, #0]
 8007340:	4682      	mov	sl, r0
 8007342:	460c      	mov	r4, r1
 8007344:	4690      	mov	r8, r2
 8007346:	d82d      	bhi.n	80073a4 <__ssputs_r+0x70>
 8007348:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800734c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007350:	d026      	beq.n	80073a0 <__ssputs_r+0x6c>
 8007352:	6965      	ldr	r5, [r4, #20]
 8007354:	6909      	ldr	r1, [r1, #16]
 8007356:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800735a:	eba3 0901 	sub.w	r9, r3, r1
 800735e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007362:	1c7b      	adds	r3, r7, #1
 8007364:	444b      	add	r3, r9
 8007366:	106d      	asrs	r5, r5, #1
 8007368:	429d      	cmp	r5, r3
 800736a:	bf38      	it	cc
 800736c:	461d      	movcc	r5, r3
 800736e:	0553      	lsls	r3, r2, #21
 8007370:	d527      	bpl.n	80073c2 <__ssputs_r+0x8e>
 8007372:	4629      	mov	r1, r5
 8007374:	f7ff fe5c 	bl	8007030 <_malloc_r>
 8007378:	4606      	mov	r6, r0
 800737a:	b360      	cbz	r0, 80073d6 <__ssputs_r+0xa2>
 800737c:	6921      	ldr	r1, [r4, #16]
 800737e:	464a      	mov	r2, r9
 8007380:	f7ff ff80 	bl	8007284 <memcpy>
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800738a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	6126      	str	r6, [r4, #16]
 8007392:	6165      	str	r5, [r4, #20]
 8007394:	444e      	add	r6, r9
 8007396:	eba5 0509 	sub.w	r5, r5, r9
 800739a:	6026      	str	r6, [r4, #0]
 800739c:	60a5      	str	r5, [r4, #8]
 800739e:	463e      	mov	r6, r7
 80073a0:	42be      	cmp	r6, r7
 80073a2:	d900      	bls.n	80073a6 <__ssputs_r+0x72>
 80073a4:	463e      	mov	r6, r7
 80073a6:	6820      	ldr	r0, [r4, #0]
 80073a8:	4632      	mov	r2, r6
 80073aa:	4641      	mov	r1, r8
 80073ac:	f000 faa6 	bl	80078fc <memmove>
 80073b0:	68a3      	ldr	r3, [r4, #8]
 80073b2:	1b9b      	subs	r3, r3, r6
 80073b4:	60a3      	str	r3, [r4, #8]
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	4433      	add	r3, r6
 80073ba:	6023      	str	r3, [r4, #0]
 80073bc:	2000      	movs	r0, #0
 80073be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c2:	462a      	mov	r2, r5
 80073c4:	f000 fab4 	bl	8007930 <_realloc_r>
 80073c8:	4606      	mov	r6, r0
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d1e0      	bne.n	8007390 <__ssputs_r+0x5c>
 80073ce:	6921      	ldr	r1, [r4, #16]
 80073d0:	4650      	mov	r0, sl
 80073d2:	f7ff ff65 	bl	80072a0 <_free_r>
 80073d6:	230c      	movs	r3, #12
 80073d8:	f8ca 3000 	str.w	r3, [sl]
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073e2:	81a3      	strh	r3, [r4, #12]
 80073e4:	f04f 30ff 	mov.w	r0, #4294967295
 80073e8:	e7e9      	b.n	80073be <__ssputs_r+0x8a>
	...

080073ec <_svfiprintf_r>:
 80073ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	4698      	mov	r8, r3
 80073f2:	898b      	ldrh	r3, [r1, #12]
 80073f4:	061b      	lsls	r3, r3, #24
 80073f6:	b09d      	sub	sp, #116	@ 0x74
 80073f8:	4607      	mov	r7, r0
 80073fa:	460d      	mov	r5, r1
 80073fc:	4614      	mov	r4, r2
 80073fe:	d510      	bpl.n	8007422 <_svfiprintf_r+0x36>
 8007400:	690b      	ldr	r3, [r1, #16]
 8007402:	b973      	cbnz	r3, 8007422 <_svfiprintf_r+0x36>
 8007404:	2140      	movs	r1, #64	@ 0x40
 8007406:	f7ff fe13 	bl	8007030 <_malloc_r>
 800740a:	6028      	str	r0, [r5, #0]
 800740c:	6128      	str	r0, [r5, #16]
 800740e:	b930      	cbnz	r0, 800741e <_svfiprintf_r+0x32>
 8007410:	230c      	movs	r3, #12
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	b01d      	add	sp, #116	@ 0x74
 800741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741e:	2340      	movs	r3, #64	@ 0x40
 8007420:	616b      	str	r3, [r5, #20]
 8007422:	2300      	movs	r3, #0
 8007424:	9309      	str	r3, [sp, #36]	@ 0x24
 8007426:	2320      	movs	r3, #32
 8007428:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800742c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007430:	2330      	movs	r3, #48	@ 0x30
 8007432:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075d0 <_svfiprintf_r+0x1e4>
 8007436:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800743a:	f04f 0901 	mov.w	r9, #1
 800743e:	4623      	mov	r3, r4
 8007440:	469a      	mov	sl, r3
 8007442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007446:	b10a      	cbz	r2, 800744c <_svfiprintf_r+0x60>
 8007448:	2a25      	cmp	r2, #37	@ 0x25
 800744a:	d1f9      	bne.n	8007440 <_svfiprintf_r+0x54>
 800744c:	ebba 0b04 	subs.w	fp, sl, r4
 8007450:	d00b      	beq.n	800746a <_svfiprintf_r+0x7e>
 8007452:	465b      	mov	r3, fp
 8007454:	4622      	mov	r2, r4
 8007456:	4629      	mov	r1, r5
 8007458:	4638      	mov	r0, r7
 800745a:	f7ff ff6b 	bl	8007334 <__ssputs_r>
 800745e:	3001      	adds	r0, #1
 8007460:	f000 80a7 	beq.w	80075b2 <_svfiprintf_r+0x1c6>
 8007464:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007466:	445a      	add	r2, fp
 8007468:	9209      	str	r2, [sp, #36]	@ 0x24
 800746a:	f89a 3000 	ldrb.w	r3, [sl]
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 809f 	beq.w	80075b2 <_svfiprintf_r+0x1c6>
 8007474:	2300      	movs	r3, #0
 8007476:	f04f 32ff 	mov.w	r2, #4294967295
 800747a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800747e:	f10a 0a01 	add.w	sl, sl, #1
 8007482:	9304      	str	r3, [sp, #16]
 8007484:	9307      	str	r3, [sp, #28]
 8007486:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800748a:	931a      	str	r3, [sp, #104]	@ 0x68
 800748c:	4654      	mov	r4, sl
 800748e:	2205      	movs	r2, #5
 8007490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007494:	484e      	ldr	r0, [pc, #312]	@ (80075d0 <_svfiprintf_r+0x1e4>)
 8007496:	f7f8 feb3 	bl	8000200 <memchr>
 800749a:	9a04      	ldr	r2, [sp, #16]
 800749c:	b9d8      	cbnz	r0, 80074d6 <_svfiprintf_r+0xea>
 800749e:	06d0      	lsls	r0, r2, #27
 80074a0:	bf44      	itt	mi
 80074a2:	2320      	movmi	r3, #32
 80074a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074a8:	0711      	lsls	r1, r2, #28
 80074aa:	bf44      	itt	mi
 80074ac:	232b      	movmi	r3, #43	@ 0x2b
 80074ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074b2:	f89a 3000 	ldrb.w	r3, [sl]
 80074b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074b8:	d015      	beq.n	80074e6 <_svfiprintf_r+0xfa>
 80074ba:	9a07      	ldr	r2, [sp, #28]
 80074bc:	4654      	mov	r4, sl
 80074be:	2000      	movs	r0, #0
 80074c0:	f04f 0c0a 	mov.w	ip, #10
 80074c4:	4621      	mov	r1, r4
 80074c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ca:	3b30      	subs	r3, #48	@ 0x30
 80074cc:	2b09      	cmp	r3, #9
 80074ce:	d94b      	bls.n	8007568 <_svfiprintf_r+0x17c>
 80074d0:	b1b0      	cbz	r0, 8007500 <_svfiprintf_r+0x114>
 80074d2:	9207      	str	r2, [sp, #28]
 80074d4:	e014      	b.n	8007500 <_svfiprintf_r+0x114>
 80074d6:	eba0 0308 	sub.w	r3, r0, r8
 80074da:	fa09 f303 	lsl.w	r3, r9, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	46a2      	mov	sl, r4
 80074e4:	e7d2      	b.n	800748c <_svfiprintf_r+0xa0>
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	1d19      	adds	r1, r3, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	9103      	str	r1, [sp, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bfbb      	ittet	lt
 80074f2:	425b      	neglt	r3, r3
 80074f4:	f042 0202 	orrlt.w	r2, r2, #2
 80074f8:	9307      	strge	r3, [sp, #28]
 80074fa:	9307      	strlt	r3, [sp, #28]
 80074fc:	bfb8      	it	lt
 80074fe:	9204      	strlt	r2, [sp, #16]
 8007500:	7823      	ldrb	r3, [r4, #0]
 8007502:	2b2e      	cmp	r3, #46	@ 0x2e
 8007504:	d10a      	bne.n	800751c <_svfiprintf_r+0x130>
 8007506:	7863      	ldrb	r3, [r4, #1]
 8007508:	2b2a      	cmp	r3, #42	@ 0x2a
 800750a:	d132      	bne.n	8007572 <_svfiprintf_r+0x186>
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	1d1a      	adds	r2, r3, #4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	9203      	str	r2, [sp, #12]
 8007514:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007518:	3402      	adds	r4, #2
 800751a:	9305      	str	r3, [sp, #20]
 800751c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075e0 <_svfiprintf_r+0x1f4>
 8007520:	7821      	ldrb	r1, [r4, #0]
 8007522:	2203      	movs	r2, #3
 8007524:	4650      	mov	r0, sl
 8007526:	f7f8 fe6b 	bl	8000200 <memchr>
 800752a:	b138      	cbz	r0, 800753c <_svfiprintf_r+0x150>
 800752c:	9b04      	ldr	r3, [sp, #16]
 800752e:	eba0 000a 	sub.w	r0, r0, sl
 8007532:	2240      	movs	r2, #64	@ 0x40
 8007534:	4082      	lsls	r2, r0
 8007536:	4313      	orrs	r3, r2
 8007538:	3401      	adds	r4, #1
 800753a:	9304      	str	r3, [sp, #16]
 800753c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007540:	4824      	ldr	r0, [pc, #144]	@ (80075d4 <_svfiprintf_r+0x1e8>)
 8007542:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007546:	2206      	movs	r2, #6
 8007548:	f7f8 fe5a 	bl	8000200 <memchr>
 800754c:	2800      	cmp	r0, #0
 800754e:	d036      	beq.n	80075be <_svfiprintf_r+0x1d2>
 8007550:	4b21      	ldr	r3, [pc, #132]	@ (80075d8 <_svfiprintf_r+0x1ec>)
 8007552:	bb1b      	cbnz	r3, 800759c <_svfiprintf_r+0x1b0>
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	3307      	adds	r3, #7
 8007558:	f023 0307 	bic.w	r3, r3, #7
 800755c:	3308      	adds	r3, #8
 800755e:	9303      	str	r3, [sp, #12]
 8007560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007562:	4433      	add	r3, r6
 8007564:	9309      	str	r3, [sp, #36]	@ 0x24
 8007566:	e76a      	b.n	800743e <_svfiprintf_r+0x52>
 8007568:	fb0c 3202 	mla	r2, ip, r2, r3
 800756c:	460c      	mov	r4, r1
 800756e:	2001      	movs	r0, #1
 8007570:	e7a8      	b.n	80074c4 <_svfiprintf_r+0xd8>
 8007572:	2300      	movs	r3, #0
 8007574:	3401      	adds	r4, #1
 8007576:	9305      	str	r3, [sp, #20]
 8007578:	4619      	mov	r1, r3
 800757a:	f04f 0c0a 	mov.w	ip, #10
 800757e:	4620      	mov	r0, r4
 8007580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007584:	3a30      	subs	r2, #48	@ 0x30
 8007586:	2a09      	cmp	r2, #9
 8007588:	d903      	bls.n	8007592 <_svfiprintf_r+0x1a6>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0c6      	beq.n	800751c <_svfiprintf_r+0x130>
 800758e:	9105      	str	r1, [sp, #20]
 8007590:	e7c4      	b.n	800751c <_svfiprintf_r+0x130>
 8007592:	fb0c 2101 	mla	r1, ip, r1, r2
 8007596:	4604      	mov	r4, r0
 8007598:	2301      	movs	r3, #1
 800759a:	e7f0      	b.n	800757e <_svfiprintf_r+0x192>
 800759c:	ab03      	add	r3, sp, #12
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	462a      	mov	r2, r5
 80075a2:	4b0e      	ldr	r3, [pc, #56]	@ (80075dc <_svfiprintf_r+0x1f0>)
 80075a4:	a904      	add	r1, sp, #16
 80075a6:	4638      	mov	r0, r7
 80075a8:	f3af 8000 	nop.w
 80075ac:	1c42      	adds	r2, r0, #1
 80075ae:	4606      	mov	r6, r0
 80075b0:	d1d6      	bne.n	8007560 <_svfiprintf_r+0x174>
 80075b2:	89ab      	ldrh	r3, [r5, #12]
 80075b4:	065b      	lsls	r3, r3, #25
 80075b6:	f53f af2d 	bmi.w	8007414 <_svfiprintf_r+0x28>
 80075ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075bc:	e72c      	b.n	8007418 <_svfiprintf_r+0x2c>
 80075be:	ab03      	add	r3, sp, #12
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	462a      	mov	r2, r5
 80075c4:	4b05      	ldr	r3, [pc, #20]	@ (80075dc <_svfiprintf_r+0x1f0>)
 80075c6:	a904      	add	r1, sp, #16
 80075c8:	4638      	mov	r0, r7
 80075ca:	f000 f879 	bl	80076c0 <_printf_i>
 80075ce:	e7ed      	b.n	80075ac <_svfiprintf_r+0x1c0>
 80075d0:	08007bd0 	.word	0x08007bd0
 80075d4:	08007bda 	.word	0x08007bda
 80075d8:	00000000 	.word	0x00000000
 80075dc:	08007335 	.word	0x08007335
 80075e0:	08007bd6 	.word	0x08007bd6

080075e4 <_printf_common>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	4616      	mov	r6, r2
 80075ea:	4698      	mov	r8, r3
 80075ec:	688a      	ldr	r2, [r1, #8]
 80075ee:	690b      	ldr	r3, [r1, #16]
 80075f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	bfb8      	it	lt
 80075f8:	4613      	movlt	r3, r2
 80075fa:	6033      	str	r3, [r6, #0]
 80075fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007600:	4607      	mov	r7, r0
 8007602:	460c      	mov	r4, r1
 8007604:	b10a      	cbz	r2, 800760a <_printf_common+0x26>
 8007606:	3301      	adds	r3, #1
 8007608:	6033      	str	r3, [r6, #0]
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	0699      	lsls	r1, r3, #26
 800760e:	bf42      	ittt	mi
 8007610:	6833      	ldrmi	r3, [r6, #0]
 8007612:	3302      	addmi	r3, #2
 8007614:	6033      	strmi	r3, [r6, #0]
 8007616:	6825      	ldr	r5, [r4, #0]
 8007618:	f015 0506 	ands.w	r5, r5, #6
 800761c:	d106      	bne.n	800762c <_printf_common+0x48>
 800761e:	f104 0a19 	add.w	sl, r4, #25
 8007622:	68e3      	ldr	r3, [r4, #12]
 8007624:	6832      	ldr	r2, [r6, #0]
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	42ab      	cmp	r3, r5
 800762a:	dc26      	bgt.n	800767a <_printf_common+0x96>
 800762c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	3b00      	subs	r3, #0
 8007634:	bf18      	it	ne
 8007636:	2301      	movne	r3, #1
 8007638:	0692      	lsls	r2, r2, #26
 800763a:	d42b      	bmi.n	8007694 <_printf_common+0xb0>
 800763c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007640:	4641      	mov	r1, r8
 8007642:	4638      	mov	r0, r7
 8007644:	47c8      	blx	r9
 8007646:	3001      	adds	r0, #1
 8007648:	d01e      	beq.n	8007688 <_printf_common+0xa4>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	6922      	ldr	r2, [r4, #16]
 800764e:	f003 0306 	and.w	r3, r3, #6
 8007652:	2b04      	cmp	r3, #4
 8007654:	bf02      	ittt	eq
 8007656:	68e5      	ldreq	r5, [r4, #12]
 8007658:	6833      	ldreq	r3, [r6, #0]
 800765a:	1aed      	subeq	r5, r5, r3
 800765c:	68a3      	ldr	r3, [r4, #8]
 800765e:	bf0c      	ite	eq
 8007660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007664:	2500      	movne	r5, #0
 8007666:	4293      	cmp	r3, r2
 8007668:	bfc4      	itt	gt
 800766a:	1a9b      	subgt	r3, r3, r2
 800766c:	18ed      	addgt	r5, r5, r3
 800766e:	2600      	movs	r6, #0
 8007670:	341a      	adds	r4, #26
 8007672:	42b5      	cmp	r5, r6
 8007674:	d11a      	bne.n	80076ac <_printf_common+0xc8>
 8007676:	2000      	movs	r0, #0
 8007678:	e008      	b.n	800768c <_printf_common+0xa8>
 800767a:	2301      	movs	r3, #1
 800767c:	4652      	mov	r2, sl
 800767e:	4641      	mov	r1, r8
 8007680:	4638      	mov	r0, r7
 8007682:	47c8      	blx	r9
 8007684:	3001      	adds	r0, #1
 8007686:	d103      	bne.n	8007690 <_printf_common+0xac>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007690:	3501      	adds	r5, #1
 8007692:	e7c6      	b.n	8007622 <_printf_common+0x3e>
 8007694:	18e1      	adds	r1, r4, r3
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	2030      	movs	r0, #48	@ 0x30
 800769a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800769e:	4422      	add	r2, r4
 80076a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076a8:	3302      	adds	r3, #2
 80076aa:	e7c7      	b.n	800763c <_printf_common+0x58>
 80076ac:	2301      	movs	r3, #1
 80076ae:	4622      	mov	r2, r4
 80076b0:	4641      	mov	r1, r8
 80076b2:	4638      	mov	r0, r7
 80076b4:	47c8      	blx	r9
 80076b6:	3001      	adds	r0, #1
 80076b8:	d0e6      	beq.n	8007688 <_printf_common+0xa4>
 80076ba:	3601      	adds	r6, #1
 80076bc:	e7d9      	b.n	8007672 <_printf_common+0x8e>
	...

080076c0 <_printf_i>:
 80076c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076c4:	7e0f      	ldrb	r7, [r1, #24]
 80076c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076c8:	2f78      	cmp	r7, #120	@ 0x78
 80076ca:	4691      	mov	r9, r2
 80076cc:	4680      	mov	r8, r0
 80076ce:	460c      	mov	r4, r1
 80076d0:	469a      	mov	sl, r3
 80076d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076d6:	d807      	bhi.n	80076e8 <_printf_i+0x28>
 80076d8:	2f62      	cmp	r7, #98	@ 0x62
 80076da:	d80a      	bhi.n	80076f2 <_printf_i+0x32>
 80076dc:	2f00      	cmp	r7, #0
 80076de:	f000 80d1 	beq.w	8007884 <_printf_i+0x1c4>
 80076e2:	2f58      	cmp	r7, #88	@ 0x58
 80076e4:	f000 80b8 	beq.w	8007858 <_printf_i+0x198>
 80076e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076f0:	e03a      	b.n	8007768 <_printf_i+0xa8>
 80076f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076f6:	2b15      	cmp	r3, #21
 80076f8:	d8f6      	bhi.n	80076e8 <_printf_i+0x28>
 80076fa:	a101      	add	r1, pc, #4	@ (adr r1, 8007700 <_printf_i+0x40>)
 80076fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007700:	08007759 	.word	0x08007759
 8007704:	0800776d 	.word	0x0800776d
 8007708:	080076e9 	.word	0x080076e9
 800770c:	080076e9 	.word	0x080076e9
 8007710:	080076e9 	.word	0x080076e9
 8007714:	080076e9 	.word	0x080076e9
 8007718:	0800776d 	.word	0x0800776d
 800771c:	080076e9 	.word	0x080076e9
 8007720:	080076e9 	.word	0x080076e9
 8007724:	080076e9 	.word	0x080076e9
 8007728:	080076e9 	.word	0x080076e9
 800772c:	0800786b 	.word	0x0800786b
 8007730:	08007797 	.word	0x08007797
 8007734:	08007825 	.word	0x08007825
 8007738:	080076e9 	.word	0x080076e9
 800773c:	080076e9 	.word	0x080076e9
 8007740:	0800788d 	.word	0x0800788d
 8007744:	080076e9 	.word	0x080076e9
 8007748:	08007797 	.word	0x08007797
 800774c:	080076e9 	.word	0x080076e9
 8007750:	080076e9 	.word	0x080076e9
 8007754:	0800782d 	.word	0x0800782d
 8007758:	6833      	ldr	r3, [r6, #0]
 800775a:	1d1a      	adds	r2, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6032      	str	r2, [r6, #0]
 8007760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007764:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007768:	2301      	movs	r3, #1
 800776a:	e09c      	b.n	80078a6 <_printf_i+0x1e6>
 800776c:	6833      	ldr	r3, [r6, #0]
 800776e:	6820      	ldr	r0, [r4, #0]
 8007770:	1d19      	adds	r1, r3, #4
 8007772:	6031      	str	r1, [r6, #0]
 8007774:	0606      	lsls	r6, r0, #24
 8007776:	d501      	bpl.n	800777c <_printf_i+0xbc>
 8007778:	681d      	ldr	r5, [r3, #0]
 800777a:	e003      	b.n	8007784 <_printf_i+0xc4>
 800777c:	0645      	lsls	r5, r0, #25
 800777e:	d5fb      	bpl.n	8007778 <_printf_i+0xb8>
 8007780:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007784:	2d00      	cmp	r5, #0
 8007786:	da03      	bge.n	8007790 <_printf_i+0xd0>
 8007788:	232d      	movs	r3, #45	@ 0x2d
 800778a:	426d      	negs	r5, r5
 800778c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007790:	4858      	ldr	r0, [pc, #352]	@ (80078f4 <_printf_i+0x234>)
 8007792:	230a      	movs	r3, #10
 8007794:	e011      	b.n	80077ba <_printf_i+0xfa>
 8007796:	6821      	ldr	r1, [r4, #0]
 8007798:	6833      	ldr	r3, [r6, #0]
 800779a:	0608      	lsls	r0, r1, #24
 800779c:	f853 5b04 	ldr.w	r5, [r3], #4
 80077a0:	d402      	bmi.n	80077a8 <_printf_i+0xe8>
 80077a2:	0649      	lsls	r1, r1, #25
 80077a4:	bf48      	it	mi
 80077a6:	b2ad      	uxthmi	r5, r5
 80077a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80077aa:	4852      	ldr	r0, [pc, #328]	@ (80078f4 <_printf_i+0x234>)
 80077ac:	6033      	str	r3, [r6, #0]
 80077ae:	bf14      	ite	ne
 80077b0:	230a      	movne	r3, #10
 80077b2:	2308      	moveq	r3, #8
 80077b4:	2100      	movs	r1, #0
 80077b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ba:	6866      	ldr	r6, [r4, #4]
 80077bc:	60a6      	str	r6, [r4, #8]
 80077be:	2e00      	cmp	r6, #0
 80077c0:	db05      	blt.n	80077ce <_printf_i+0x10e>
 80077c2:	6821      	ldr	r1, [r4, #0]
 80077c4:	432e      	orrs	r6, r5
 80077c6:	f021 0104 	bic.w	r1, r1, #4
 80077ca:	6021      	str	r1, [r4, #0]
 80077cc:	d04b      	beq.n	8007866 <_printf_i+0x1a6>
 80077ce:	4616      	mov	r6, r2
 80077d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80077d4:	fb03 5711 	mls	r7, r3, r1, r5
 80077d8:	5dc7      	ldrb	r7, [r0, r7]
 80077da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077de:	462f      	mov	r7, r5
 80077e0:	42bb      	cmp	r3, r7
 80077e2:	460d      	mov	r5, r1
 80077e4:	d9f4      	bls.n	80077d0 <_printf_i+0x110>
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d10b      	bne.n	8007802 <_printf_i+0x142>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	07df      	lsls	r7, r3, #31
 80077ee:	d508      	bpl.n	8007802 <_printf_i+0x142>
 80077f0:	6923      	ldr	r3, [r4, #16]
 80077f2:	6861      	ldr	r1, [r4, #4]
 80077f4:	4299      	cmp	r1, r3
 80077f6:	bfde      	ittt	le
 80077f8:	2330      	movle	r3, #48	@ 0x30
 80077fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007802:	1b92      	subs	r2, r2, r6
 8007804:	6122      	str	r2, [r4, #16]
 8007806:	f8cd a000 	str.w	sl, [sp]
 800780a:	464b      	mov	r3, r9
 800780c:	aa03      	add	r2, sp, #12
 800780e:	4621      	mov	r1, r4
 8007810:	4640      	mov	r0, r8
 8007812:	f7ff fee7 	bl	80075e4 <_printf_common>
 8007816:	3001      	adds	r0, #1
 8007818:	d14a      	bne.n	80078b0 <_printf_i+0x1f0>
 800781a:	f04f 30ff 	mov.w	r0, #4294967295
 800781e:	b004      	add	sp, #16
 8007820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	f043 0320 	orr.w	r3, r3, #32
 800782a:	6023      	str	r3, [r4, #0]
 800782c:	4832      	ldr	r0, [pc, #200]	@ (80078f8 <_printf_i+0x238>)
 800782e:	2778      	movs	r7, #120	@ 0x78
 8007830:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	6831      	ldr	r1, [r6, #0]
 8007838:	061f      	lsls	r7, r3, #24
 800783a:	f851 5b04 	ldr.w	r5, [r1], #4
 800783e:	d402      	bmi.n	8007846 <_printf_i+0x186>
 8007840:	065f      	lsls	r7, r3, #25
 8007842:	bf48      	it	mi
 8007844:	b2ad      	uxthmi	r5, r5
 8007846:	6031      	str	r1, [r6, #0]
 8007848:	07d9      	lsls	r1, r3, #31
 800784a:	bf44      	itt	mi
 800784c:	f043 0320 	orrmi.w	r3, r3, #32
 8007850:	6023      	strmi	r3, [r4, #0]
 8007852:	b11d      	cbz	r5, 800785c <_printf_i+0x19c>
 8007854:	2310      	movs	r3, #16
 8007856:	e7ad      	b.n	80077b4 <_printf_i+0xf4>
 8007858:	4826      	ldr	r0, [pc, #152]	@ (80078f4 <_printf_i+0x234>)
 800785a:	e7e9      	b.n	8007830 <_printf_i+0x170>
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	f023 0320 	bic.w	r3, r3, #32
 8007862:	6023      	str	r3, [r4, #0]
 8007864:	e7f6      	b.n	8007854 <_printf_i+0x194>
 8007866:	4616      	mov	r6, r2
 8007868:	e7bd      	b.n	80077e6 <_printf_i+0x126>
 800786a:	6833      	ldr	r3, [r6, #0]
 800786c:	6825      	ldr	r5, [r4, #0]
 800786e:	6961      	ldr	r1, [r4, #20]
 8007870:	1d18      	adds	r0, r3, #4
 8007872:	6030      	str	r0, [r6, #0]
 8007874:	062e      	lsls	r6, r5, #24
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	d501      	bpl.n	800787e <_printf_i+0x1be>
 800787a:	6019      	str	r1, [r3, #0]
 800787c:	e002      	b.n	8007884 <_printf_i+0x1c4>
 800787e:	0668      	lsls	r0, r5, #25
 8007880:	d5fb      	bpl.n	800787a <_printf_i+0x1ba>
 8007882:	8019      	strh	r1, [r3, #0]
 8007884:	2300      	movs	r3, #0
 8007886:	6123      	str	r3, [r4, #16]
 8007888:	4616      	mov	r6, r2
 800788a:	e7bc      	b.n	8007806 <_printf_i+0x146>
 800788c:	6833      	ldr	r3, [r6, #0]
 800788e:	1d1a      	adds	r2, r3, #4
 8007890:	6032      	str	r2, [r6, #0]
 8007892:	681e      	ldr	r6, [r3, #0]
 8007894:	6862      	ldr	r2, [r4, #4]
 8007896:	2100      	movs	r1, #0
 8007898:	4630      	mov	r0, r6
 800789a:	f7f8 fcb1 	bl	8000200 <memchr>
 800789e:	b108      	cbz	r0, 80078a4 <_printf_i+0x1e4>
 80078a0:	1b80      	subs	r0, r0, r6
 80078a2:	6060      	str	r0, [r4, #4]
 80078a4:	6863      	ldr	r3, [r4, #4]
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	2300      	movs	r3, #0
 80078aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078ae:	e7aa      	b.n	8007806 <_printf_i+0x146>
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	4632      	mov	r2, r6
 80078b4:	4649      	mov	r1, r9
 80078b6:	4640      	mov	r0, r8
 80078b8:	47d0      	blx	sl
 80078ba:	3001      	adds	r0, #1
 80078bc:	d0ad      	beq.n	800781a <_printf_i+0x15a>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	079b      	lsls	r3, r3, #30
 80078c2:	d413      	bmi.n	80078ec <_printf_i+0x22c>
 80078c4:	68e0      	ldr	r0, [r4, #12]
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	4298      	cmp	r0, r3
 80078ca:	bfb8      	it	lt
 80078cc:	4618      	movlt	r0, r3
 80078ce:	e7a6      	b.n	800781e <_printf_i+0x15e>
 80078d0:	2301      	movs	r3, #1
 80078d2:	4632      	mov	r2, r6
 80078d4:	4649      	mov	r1, r9
 80078d6:	4640      	mov	r0, r8
 80078d8:	47d0      	blx	sl
 80078da:	3001      	adds	r0, #1
 80078dc:	d09d      	beq.n	800781a <_printf_i+0x15a>
 80078de:	3501      	adds	r5, #1
 80078e0:	68e3      	ldr	r3, [r4, #12]
 80078e2:	9903      	ldr	r1, [sp, #12]
 80078e4:	1a5b      	subs	r3, r3, r1
 80078e6:	42ab      	cmp	r3, r5
 80078e8:	dcf2      	bgt.n	80078d0 <_printf_i+0x210>
 80078ea:	e7eb      	b.n	80078c4 <_printf_i+0x204>
 80078ec:	2500      	movs	r5, #0
 80078ee:	f104 0619 	add.w	r6, r4, #25
 80078f2:	e7f5      	b.n	80078e0 <_printf_i+0x220>
 80078f4:	08007be1 	.word	0x08007be1
 80078f8:	08007bf2 	.word	0x08007bf2

080078fc <memmove>:
 80078fc:	4288      	cmp	r0, r1
 80078fe:	b510      	push	{r4, lr}
 8007900:	eb01 0402 	add.w	r4, r1, r2
 8007904:	d902      	bls.n	800790c <memmove+0x10>
 8007906:	4284      	cmp	r4, r0
 8007908:	4623      	mov	r3, r4
 800790a:	d807      	bhi.n	800791c <memmove+0x20>
 800790c:	1e43      	subs	r3, r0, #1
 800790e:	42a1      	cmp	r1, r4
 8007910:	d008      	beq.n	8007924 <memmove+0x28>
 8007912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800791a:	e7f8      	b.n	800790e <memmove+0x12>
 800791c:	4402      	add	r2, r0
 800791e:	4601      	mov	r1, r0
 8007920:	428a      	cmp	r2, r1
 8007922:	d100      	bne.n	8007926 <memmove+0x2a>
 8007924:	bd10      	pop	{r4, pc}
 8007926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800792a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800792e:	e7f7      	b.n	8007920 <memmove+0x24>

08007930 <_realloc_r>:
 8007930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007934:	4607      	mov	r7, r0
 8007936:	4614      	mov	r4, r2
 8007938:	460d      	mov	r5, r1
 800793a:	b921      	cbnz	r1, 8007946 <_realloc_r+0x16>
 800793c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007940:	4611      	mov	r1, r2
 8007942:	f7ff bb75 	b.w	8007030 <_malloc_r>
 8007946:	b92a      	cbnz	r2, 8007954 <_realloc_r+0x24>
 8007948:	f7ff fcaa 	bl	80072a0 <_free_r>
 800794c:	4625      	mov	r5, r4
 800794e:	4628      	mov	r0, r5
 8007950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007954:	f000 f81a 	bl	800798c <_malloc_usable_size_r>
 8007958:	4284      	cmp	r4, r0
 800795a:	4606      	mov	r6, r0
 800795c:	d802      	bhi.n	8007964 <_realloc_r+0x34>
 800795e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007962:	d8f4      	bhi.n	800794e <_realloc_r+0x1e>
 8007964:	4621      	mov	r1, r4
 8007966:	4638      	mov	r0, r7
 8007968:	f7ff fb62 	bl	8007030 <_malloc_r>
 800796c:	4680      	mov	r8, r0
 800796e:	b908      	cbnz	r0, 8007974 <_realloc_r+0x44>
 8007970:	4645      	mov	r5, r8
 8007972:	e7ec      	b.n	800794e <_realloc_r+0x1e>
 8007974:	42b4      	cmp	r4, r6
 8007976:	4622      	mov	r2, r4
 8007978:	4629      	mov	r1, r5
 800797a:	bf28      	it	cs
 800797c:	4632      	movcs	r2, r6
 800797e:	f7ff fc81 	bl	8007284 <memcpy>
 8007982:	4629      	mov	r1, r5
 8007984:	4638      	mov	r0, r7
 8007986:	f7ff fc8b 	bl	80072a0 <_free_r>
 800798a:	e7f1      	b.n	8007970 <_realloc_r+0x40>

0800798c <_malloc_usable_size_r>:
 800798c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007990:	1f18      	subs	r0, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	bfbc      	itt	lt
 8007996:	580b      	ldrlt	r3, [r1, r0]
 8007998:	18c0      	addlt	r0, r0, r3
 800799a:	4770      	bx	lr

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
